# Copyright 2024 OASIS Open
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.



@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:         <http://www.w3.org/2002/07/owl#> .
@prefix dcterms:     <http://purl.org/dc/terms/> .
@prefix vann:        <http://purl.org/vocab/vann/> .

@prefix oslc_am: <http://open-services.net/ns/am#> .
@prefix oslc_sysmlv2: <http://open-services.net/ns/sysmlv2#> .

oslc_sysmlv2:
  a owl:Ontology ;
  dcterms:title "OSLC SysML v2 Vocabulary" ;
  rdfs:label "OSLC SysML v2 Vocabulary" ;
  dcterms:description "All vocabulary URIs defined in the OSLC SysML v2 namespace."^^rdf:XMLLiteral ;
  vann:preferredNamespacePrefix "oslc_sysmlv2" ;
  dcterms:publisher <https://open-services.net/about/> ;
  dcterms:issued "2022-07-11"^^<http://www.w3.org/2001/XMLSchema#date> ;
  dcterms:license <http://www.apache.org/licenses/LICENSE-2.0> ;
  dcterms:source <https://docs.oasis-open-projects.org/oslc-op/sysml/v2.0/os/SysML-Vocabulary-vocab.ttl> ;
  dcterms:isPartOf <https://docs.oasis-open-projects.org/oslc-op/sysml/v2.0/os/sysml-spec.html> ;
  dcterms:hasVersion "WD" ;
  dcterms:dateCopyrighted  "2012-2024" .



<http://open-services.net/ns/sysmlv2#namespaceImportedMembership>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Memberships</code> in this <code>Namespace</code> that result from the <code>ownedImports</code> of this <code>Namespace</code>.</p>
""" ;
      rdfs:label "namespaceImportedMembership" .

<http://open-services.net/ns/sysmlv2#AnnotatingElement>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>AnnotatingElement</code> is an <code>Element</code> that provides additional description of or metadata on some other <code>Element</code>. An <code>AnnotatingElement</code> is either attached to its <code>annotatedElements</code> by <code>Annotation</code> <code>Relationships</code>, or it implicitly annotates its <code>owningNamespace</code>.</p>

annotatedElement = 
 if annotation->notEmpty() then annotation.annotatedElement
 else Sequence{owningNamespace} endif
ownedAnnotatingRelationship = ownedRelationship->
    selectByKind(Annotation)->
    select(a | a.annotatingElement = self)""" ;
      rdfs:label "AnnotatingElement" .

<http://open-services.net/ns/sysmlv2#viewpointUsageViewpointStakeholder>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>PartUsages</code> that identify the stakeholders with concerns framed by this <code>ViewpointUsage</code>, which are the owned and inherited <code>stakeholderParameters</code> of the <code>framedConcerns</code> of this <code>ViewpointUsage</code>.</p>" ;
      rdfs:label "viewpointUsageViewpointStakeholder" .

<http://open-services.net/ns/sysmlv2#definitionOwnedPart>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>PartUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.</p>" ;
      rdfs:label "definitionOwnedPart" .

<http://open-services.net/ns/sysmlv2#successionEffectStep>
      a       rdf:Property ;
      rdfs:comment """<p><code>Steps</code> that represent occurrences that are side effects of the <code>transitionStep</code> occurring.</p>
""" ;
      rdfs:label "successionEffectStep" .

<http://open-services.net/ns/sysmlv2#usageNestedConcern>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ConcernUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>.</p>
""" ;
      rdfs:label "usageNestedConcern" .

<http://open-services.net/ns/sysmlv2#EventOccurrenceUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>EventOccurrenceUsage</code> is an <code>OccurrenceUsage</code> that represents another <code>OccurrenceUsage</code> occurring as a <code><em>suboccurrence</em></code> of the containing occurrence of the <code>EventOccurrenceUsage</code>. Unless it is the <code>EventOccurrenceUsage</code> itself, the referenced <code>OccurrenceUsage</code> is related to the <code>EventOccurrenceUsage</code> by a <code>ReferenceSubsetting</code> <code>Relationship</code>.</p>

<p>If the <code>EventOccurrenceUsage</code> is owned by an <code>OccurrenceDefinition</code> or <code>OccurrenceUsage</code>, then it also subsets the <em><code>timeEnclosedOccurrences</code></em> property of the <code>Class</code> <em><code>Occurrence</code></em> from the Kernel Semantic Library model <em><code>Occurrences</code></em>.</p>
eventOccurrence =
    if ownedReferenceSubsetting = null then self
    else if ownedReferenceSubsetting.referencedFeature.oclIsKindOf(OccurrenceUsage) then 
        ownedReferenceSubsetting.referencedFeature.oclAsType(OccurrenceUsage)
    else null
    endif endif
ownedReferenceSubsetting <> null implies
    ownedReferenceSubsetting.referencedFeature.oclIsKindOf(OccurrenceUsage)
owningType <> null and
(owningType.oclIsKindOf(OccurrenceDefinition) or
 owningType.oclIsKindOf(OccurrenceUsage)) implies
    specializesFromLibrary('Occurrences::Occurrence::timeEnclosedOccurrences')
isReference""" ;
      rdfs:label "EventOccurrenceUsage" .

<http://open-services.net/ns/sysmlv2#functionIsModelLevelEvaluable>
      a       rdf:Property ;
      rdfs:comment """<p>Whether this <code>Function</code> can be used as the <code>function</code> of a model-level evaluable <code>InvocationExpression</code>. Certain <code>Functions</code> from the Kernel Functions Library are considered to have <code>isModelLevelEvaluable = true</code>. For all other <code>Functions</code> it is <code>false</code>.</p>

<p><strong>Note:</strong> See the specification of the KerML concrete syntax notation for <code>Expressions</code> for an identification of which library <code>Functions</code> are model-level evaluable.</p>""" ;
      rdfs:label "functionIsModelLevelEvaluable" .

<http://open-services.net/ns/sysmlv2#ConjugatedPortDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>ConjugatedPortDefinition</code> is a <code>PortDefinition</code> that is a <code>PortDefinition</code> of its original <code>PortDefinition</code>. That is, a <code>ConjugatedPortDefinition</code> inherits all the <code>features</code> of the original <code>PortDefinition</code>, but input <code>flows</code> of the original <code>PortDefinition</code> become outputs on the <code>ConjugatedPortDefinition</code> and output <code>flows</code> of the original <code>PortDefinition</code> become inputs on the <code>ConjugatedPortDefinition</code>. Every <code>PortDefinition</code> (that is not itself a <code><code>ConjugatedPortDefinition</code></code>) has exactly one corresponding <code>ConjugatedPortDefinition</code>, whose effective name is the name of the <code>originalPortDefinition</code>, with the character <code>~</code> prepended.</p>
ownedPortConjugator.originalPortDefinition = originalPortDefinition
conjugatedPortDefinition = null""" ;
      rdfs:label "ConjugatedPortDefinition" .

<http://open-services.net/ns/sysmlv2#verificationCaseUsageVerificationCaseDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>VerificationCase</code> that is the <code>definition</code> of this <code>VerificationCaseUsage</code>.</p>" ;
      rdfs:label "verificationCaseUsageVerificationCaseDefinition" .

<http://open-services.net/ns/sysmlv2#ActionDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>ActionDefinition</code> is a <code>Definition</code> that is also a <code>Behavior</code> that defines an <em><code>Action</code></em> performed by a system or part of a system.</p>
specializesFromLibrary('Actions::Action')
action = usage->selectByKind(ActionUsage)""" ;
      rdfs:label "ActionDefinition" .

<http://open-services.net/ns/sysmlv2#ReturnParameterMembership>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>ReturnParameterMembership</code> is a <code>ParameterMembership</code> that indicates that the <code>ownedMemberParameter</code> is the <code>result</code> <code>parameter</code> of a <code>Function</code> or <code>Expression</code>. The <code>direction</code> of the <code>ownedMemberParameter</code> must be <code>out</code>.</p>

owningType.oclIsKindOf(Function) or owningType.oclIsKindOf(Expression)""" ;
      rdfs:label "ReturnParameterMembership" .

<http://open-services.net/ns/sysmlv2#transitionUsageSource>
      a       rdf:Property ;
      rdfs:comment "<p>The source <code>ActionUsage</code> of this <code>TransitionUsage</code>, which becomes the <code>source</code> of the <code>succession</code> for the <code>TransitionUsage</code>.</p>" ;
      rdfs:label "transitionUsageSource" .

<http://open-services.net/ns/sysmlv2#annotationOwningAnnotatingElement>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>annotatingElement</code> of this <code>Annotation</code>, when it is also its <code>owningRelatedElement</code>.</p>" ;
      rdfs:label "annotationOwningAnnotatingElement" .

<http://open-services.net/ns/sysmlv2#SuccessionAsUsage>
      a       rdfs:Class ;
      rdfs:comment "<p>A <code>SuccessionAsUsage</code> is both a <code>ConnectorAsUsage</code> and a <code>Succession</code>.<p>" ;
      rdfs:label "SuccessionAsUsage" .

<http://open-services.net/ns/sysmlv2#portDefinitionConjugatedPortDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <codeConjugatedPortDefinition</code> that is conjugate to this <code>PortDefinition</code>.</p>" ;
      rdfs:label "portDefinitionConjugatedPortDefinition" .

<http://open-services.net/ns/sysmlv2#featureIsPortion>
      a       rdf:Property ;
      rdfs:comment """<p>Whether the values of this <code>Feature</code> are contained in the space and time of instances of the domain of the <code>Feature</code> and represent the same thing as those instances.</p>
""" ;
      rdfs:label "featureIsPortion" .

<http://open-services.net/ns/sysmlv2#InvocationExpression>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>InvocationExpression</code> is an <code>Expression</code> each of whose input <code>parameters</code> are bound to the <code>result</code> of an <code>argument</code> Expression.</p>

not ownedTyping->exists(oclIsKindOf(Behavior)) and
not ownedSubsetting.subsettedFeature.type->exists(oclIsKindOf(Behavior)) implies
    ownedFeature.selectByKind(BindingConnector)->exists(
        relatedFeature->includes(self) and
        relatedFeature->includes(result))
            
TBD
ownedFeature->
    select(direction = _'in').valuation->
    select(v | v <> null).value
let features : Set(Feature) = type.feature->asSet() in
input->forAll(inp | 
    inp.ownedRedefinition.redefinedFeature->
        intersection(features)->size() = 1)
let features : Set(Feature) = type.feature->asSet() in
input->forAll(inp1 | input->forAll(inp2 |
    inp1 <> inp2 implies
        inp1.ownedRedefinition.redefinedFeature->
            intersection(inp2.ownedRedefinition.redefinedFeature)->
            intersection(features)->isEmpty()))""" ;
      rdfs:label "InvocationExpression" .

<http://open-services.net/ns/sysmlv2#stateUsageEntryAction>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ActionUsage</code> of this <code>StateUsage</code> to be performed on entry to the state defined by the <code>StateDefinition</code>. It is the owned <code>ActionUsage</code> related to the <code>StateUsage</code> by a <code>StateSubactionMembership</code>  with <code>kind = entry</code>.</p>" ;
      rdfs:label "stateUsageEntryAction" .

<http://open-services.net/ns/sysmlv2#RequirementDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>RequirementDefinition</code> is a <code>ConstraintDefinition</code> that defines a requirement used in the context of a specification as a constraint that a valid solution must satisfy. The specification is relative to a specified subject, possibly in collaboration with one or more external actors.</p>
text = documentation.body
assumedConstraint = ownedFeatureMembership->
    selectByKind(RequirementConstraintMembership)->
    select(kind = RequirementConstraintKind::assumption).
    ownedConstraint
requiredConstraint = ownedFeatureMembership->
    selectByKind(RequirementConstraintMembership)->
    select(kind = RequirementConstraintKind::requirement).
    ownedConstraint
subjectParameter =
    let subjects : OrderedSet(SubjectMembership) = 
        featureMembership->selectByKind(SubjectMembership) in
    if subjects->isEmpty() then null
    else subjects->first().ownedSubjectParameter
    endif
framedConcern = featureMembership->
    selectByKind(FramedConcernMembership).
    ownedConcern
actorParameter = featureMembership->
    selectByKind(ActorMembership).
    ownedActorParameter
stakeholderParameter = featureMembership->
    selectByKind(StakholderMembership).
    ownedStakeholderParameter
featureMembership->	
    selectByKind(SubjectMembership)->
    size() <= 1
input->notEmpty() and input->first() = subjectParameter
specializesFromLibrary('Requirements::RequirementCheck')""" ;
      rdfs:label "RequirementDefinition" .

<http://open-services.net/ns/sysmlv2#featureValueFeatureWithValue>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Feature</code> to be provided a value.</p>

<p>The Feature to be provided a value.</p>""" ;
      rdfs:label "featureValueFeatureWithValue" .

<http://open-services.net/ns/sysmlv2#ItemFlowEnd>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>ItemFlowEnd</code> is a <code>Feature</code> that is one of the <code>connectorEnds</code> giving the <code><em>source</em></code> or <code><em>target</em></code> of an <code>ItemFlow</code>. For <code>ItemFlows</code> typed by <code><em>FlowTransfer</em></code> or its specializations, <code>ItemFlowEnds</code> must have exactly one <code>ownedFeature</code>, which redefines <code><em>Transfer::source::sourceOutput</em></code> or <code><em>Transfer::target::targetInput</em></code> and redefines the corresponding feature of the <code>relatedElement</code> for its end.</p>
isEnd
ownedFeature->size() = 1
owningType <> null and owningType.oclIsKindOf(ItemFlow)""" ;
      rdfs:label "ItemFlowEnd" .

<http://open-services.net/ns/sysmlv2#viewUsageViewDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ViewDefinition</code> that is the <code>definition</code> of this <code>ViewUsage</code>.</p>" ;
      rdfs:label "viewUsageViewDefinition" .

<http://open-services.net/ns/sysmlv2#Connector>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>Connector</code> is a usage of <code>Associations</code>, with links restricted according to instances of the <code>Type</code> in which they are used (domain of the <code>Connector</code>). The <code>associations</code> of the <code>Connector</code> restrict what kinds of things might be linked. The <code>Connector</code> further restricts these links to be between values of <code>Features</code> on instances of its domain.</p>

relatedFeature = connectorEnd.ownedReferenceSubsetting->
    select(s | s <> null).subsettedFeature
relatedFeature->forAll(f | 
    if featuringType->isEmpty() then f.isFeaturedWithin(null)
    else featuringType->forAll(t | f.isFeaturedWithin(t))
    endif)
sourceFeature = 
    if relatedFeature->isEmpty() then null 
    else relatedFeature->first() 
    endif
targetFeature =
    if relatedFeature->size() < 2 then OrderedSet{}
    else 
        relatedFeature->
            subSequence(2, relatedFeature->size())->
            asOrderedSet()
    endif
not isAbstract implies relatedFeature->size() >= 2
specializesFromLibrary('Links::links')
association->exists(oclIsKindOf(AssociationStructure)) implies
    specializesFromLibrary('Objects::linkObjects')
connectorEnds->size() = 2 and
association->exists(oclIsKindOf(AssocationStructure)) implies
    specializesFromLibrary('Objects::binaryLinkObjects')
connectorEnd->size() = 2 implies
    specializesFromLibrary('Links::binaryLinks')
connectorEnds->size() > 2 implies
    not specializesFromLibrary('Links::BinaryLink')""" ;
      rdfs:label "Connector" .

<http://open-services.net/ns/sysmlv2#allocationDefinitionAllocation>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>AllocationUsages</code> that refine the allocation mapping defined by this <code>AllocationDefinition</code>.</p>" ;
      rdfs:label "allocationDefinitionAllocation" .

<http://open-services.net/ns/sysmlv2#FlowConnectionDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>FlowConnectionDefinition</code> is a <code>ConnectionDefinition</code> and <code>ActionDefinition</code> that is also an <code>Interaction</code> representing flows between <code>Usages</code>.</p>
specializesFromLibrary('Connections::MessageConnection')""" ;
      rdfs:label "FlowConnectionDefinition" .

<http://open-services.net/ns/sysmlv2#transitionUsageTriggerAction>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>AcceptActionUsages</code> that define the triggers of this <code>TransitionUsage</code>, which are the <code>ownedFeatures</code> of the <code>TransitionUsage</code> related to it by <code>TransitionFeatureMemberships</code> with <code>kind = trigger</code>, which must all be <code>AcceptActionUsages</code>.</p>" ;
      rdfs:label "transitionUsageTriggerAction" .

<http://open-services.net/ns/sysmlv2#viewUsageViewCondition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Expressions</code> related to this <code>ViewUsage</code> by <code>ElementFilterMemberships</code>, which specify conditions on <code>Elements</code> to be rendered in a view.</p>" ;
      rdfs:label "viewUsageViewCondition" .

<http://open-services.net/ns/sysmlv2#VariantMembership>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>VariantMembership</code> is a <code>Membership</code> between a variation point <code>Definition</code> or <code>Usage</code> and a <code>Usage</code> that represents a variant in the context of that variation. The <code>membershipOwningNamespace</code> for the <code>VariantMembership</code> must be either a Definition or a <code>Usage</code> with <code>isVariation = true</code>.</p>
membershipOwningNamespace.oclIsKindOf(Definition) and
    membershipOwningNamespace.oclAsType(Definition).isVariation or
membershipOwningNamespace.oclIsKindOf(Usage) and
    membershipOwningNamespace.oclAsType(Usage).isVariation
""" ;
      rdfs:label "VariantMembership" .

<http://open-services.net/ns/sysmlv2#NullExpression>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>NullExpression</code> is an <code>Expression</code> that results in a null value.</p>

specializesFromLibrary('Performances::nullEvaluations')""" ;
      rdfs:label "NullExpression" .

<http://open-services.net/ns/sysmlv2#LiteralString>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>LiteralString</code> is a <code>LiteralExpression</code> that provides a <code><em>String</em></code> value as a result. Its <code>result</code> <code>parameter</code> must have the type <code><em>String</em></code>.</p>

specializesFromLibrary('Performances::literalStringEvaluations')""" ;
      rdfs:label "LiteralString" .

<http://open-services.net/ns/sysmlv2#elementOwningMembership>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>owningRelationship</code> of this <code>Element</code>, if that <code>Relationship</code> is a <code>Membership</code>.</p>
""" ;
      rdfs:label "elementOwningMembership" .

<http://open-services.net/ns/sysmlv2#dependencyClient>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Element</code> or <code>Elements</code> dependent on the <code>supplier</code> <code>Elements</code>.</p>" ;
      rdfs:label "dependencyClient" .

<http://open-services.net/ns/sysmlv2#EnumerationUsage>
      a       rdfs:Class ;
      rdfs:comment "<p>An <code>EnumerationUsage</code> is an <code>AttributeUsage</code> whose <code>attributeDefinition</code> is an <code>EnumerationDefinition</code>.</p>" ;
      rdfs:label "EnumerationUsage" .

<http://open-services.net/ns/sysmlv2#OperatorExpression>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>OperatorExpression</code> is an <code>InvocationExpression</code> whose <code>function</code> is determined by resolving its <code>operator</code> in the context of one of the standard packages from the Kernel Function Library.</p>
let libFunctions : Sequence(Element) = 
    Sequence{'BaseFunctions', 'DataFunctions', 'ControlFunctions'}->
    collect(ns | resolveGlobal(ns + \"::'\" + operator + \"'\").
    memberElement) in
libFunctions->includes(function)
    
""" ;
      rdfs:label "OperatorExpression" .

<http://open-services.net/ns/sysmlv2#BooleanExpression>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>BooleanExpression</code> is a <em><code>Boolean</code></em>-valued <code>Expression</code> whose type is a <code>Predicate</code>. It represents a logical condition resulting from the evaluation of the <code>Predicate</code>.</p>

specializesFromLibrary('Performances::booleanEvaluations')""" ;
      rdfs:label "BooleanExpression" .

<http://open-services.net/ns/sysmlv2#definitionOwnedState>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>StateUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.</p>" ;
      rdfs:label "definitionOwnedState" .

<http://open-services.net/ns/sysmlv2#membershipVisibility>
      a       rdf:Property ;
      rdfs:comment """<p>Whether or not the <code>Membership</code> of the <code>memberElement</code> in the <code>membershipOwningNamespace</code> is publicly visible outside that <code>Namespace</code>.</p>
""" ;
      rdfs:label "membershipVisibility" .

<http://open-services.net/ns/sysmlv2#usageNestedCalculation>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>CalculationUsage</code> that are <code>nestedUsages</code> of this <code>Usage</code>.</p>
""" ;
      rdfs:label "usageNestedCalculation" .

<http://open-services.net/ns/sysmlv2#StateDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>StateDefinition</code> is the <code>Definition</code> of the </code>Behavior</code> of a system or part of a system in a certain state condition.</p>

<p>A <code>StateDefinition</code> may be related to up to three of its <code>ownedFeatures</code> by <code>StateBehaviorMembership</code> <code>Relationships</code>, all of different <code>kinds</code>, corresponding to the entry, do and exit actions of the <code>StateDefinition</code>.</p>
specializesFromLibrary('States::StateAction')
ownedMembership->
    selectByKind(StateSubactionMembership)->
    isUnique(kind)
state = action->selectByKind(StateUsage)
doAction =
    let doMemberships : Sequence(StateSubactionMembership) =
        ownedMembership->
            selectByKind(StateSubactionMembership)->
            select(kind = StateSubactionKind::do) in
    if doMemberships->isEmpty() then null
    else doMemberships->at(1)
    endif
entryAction =
    let entryMemberships : Sequence(StateSubactionMembership) =
        ownedMembership->
            selectByKind(StateSubactionMembership)->
            select(kind = StateSubactionKind::entry) in
    if entryMemberships->isEmpty() then null
    else entryMemberships->at(1)
    endif
isParallel implies
    ownedAction.incomingTransition->isEmpty() and
    ownedAction.outgoingTransition->isEmpty()
exitAction = 
    let exitMemberships : Sequence(StateSubactionMembership) =
        ownedMembership->
            selectByKind(StateSubactionMembership)->
            select(kind = StateSubactionKind::exit) in
    if exitMemberships->isEmpty() then null
    else exitMemberships->at(1)
    endif""" ;
      rdfs:label "StateDefinition" .

<http://open-services.net/ns/sysmlv2#NamespaceExpose>
      a       rdfs:Class ;
      rdfs:comment "<p>A <code>NamespaceExpose</code> is an <code>Expose</code> <code>Relationship</code> that exposes the <code>Memberships</code> of a specific <code>importedNamespace</code> and, if <code>isRecursive = true</code>, additional <code>Memberships</code> recursively.</p>" ;
      rdfs:label "NamespaceExpose" .

<http://open-services.net/ns/sysmlv2#relationshipIsImplied>
      a       rdf:Property ;
      rdfs:comment "<p>Whether this Relationship was generated by tooling to meet semantic rules, rather than being directly created by a modeler.</p>" ;
      rdfs:label "relationshipIsImplied" .

<http://open-services.net/ns/sysmlv2#Specialization>
      a       rdfs:Class ;
      rdfs:comment """<p><code>Specialization</code> is a <code>Relationship</code> between two <code>Types</code> that requires all instances of the <code>specific</code> type to also be instances of the <code>general</code> Type (i.e., the set of instances of the <code>specific</code> Type is a <em>subset</em> of those of the <code>general</code> Type, which might be the same set).</p>

not specific.isConjugated""" ;
      rdfs:label "Specialization" .

<http://open-services.net/ns/sysmlv2#usageUsage>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Usages</code> that are <code>features</code> of this <code>Usage</code> (not necessarily owned).</p>" ;
      rdfs:label "usageUsage" .

<http://open-services.net/ns/sysmlv2#elementDeclaredShortName>
      a       rdf:Property ;
      rdfs:comment """<p>An optional alternative name for the <code>Element</code> that is intended to be shorter or in some way more succinct than its primary <code>name</code>. It may act as a modeler-specified identifier for the <code>Element</code>, though it is then the responsibility of the modeler to maintain the uniqueness of this identifier within a model or relative to some other context.</p> 
""" ;
      rdfs:label "elementDeclaredShortName" .

<http://open-services.net/ns/sysmlv2#caseDefinitionActorParameter>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>parameters</code> of this <code>CaseDefinition</code> that represent actors involved in the case.</p>" ;
      rdfs:label "caseDefinitionActorParameter" .

<http://open-services.net/ns/sysmlv2#featureInvertingOwningFeature>
      a       rdf:Property ;
      rdfs:comment """<p>A <code>featureInverted</code> that is also the <code>owningRelatedElement</code> of this <code>FeatureInverting</code>.</p>
""" ;
      rdfs:label "featureInvertingOwningFeature" .

<http://open-services.net/ns/sysmlv2#viewRenderingMembershipReferencedRendering>
      a       rdf:Property ;
      rdfs:comment "<p> The <code>RenderingUsage</code> that is referenced through this <code>ViewRenderingMembership</code>. It is the <code>referencedFeature</code> of the <code>ownedReferenceSubsetting</code> for the <code>ownedRendering</code>, if there is one, and, otherwise, the <code>ownedRendering</code> itself.</p>" ;
      rdfs:label "viewRenderingMembershipReferencedRendering" .

<http://open-services.net/ns/sysmlv2#featureMembershipOwningType>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Type</code> that owns this <code>FeatureMembership</code>.</p>
""" ;
      rdfs:label "featureMembershipOwningType" .

<http://open-services.net/ns/sysmlv2#definitionOwnedConnection>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ConnectorAsUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>. Note that this list includes <code>BindingConnectorAsUsages</code> and <code>SuccessionAsUsages</code>, even though these are <code>ConnectorAsUsages</code> but not <code>ConnectionUsages</code>.</p>" ;
      rdfs:label "definitionOwnedConnection" .

<http://open-services.net/ns/sysmlv2#expressionFunction>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Function</code> that types this <code>Expression</code>.</p>

<p>This is the Function that types the Expression.</p>
""" ;
      rdfs:label "expressionFunction" .

<http://open-services.net/ns/sysmlv2#LibraryPackage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>LibraryPackage</code> is a <code>Package</code> that is the container for a model library. A <code>LibraryPackage</code> is itself a library <code>Element</code> as are all <code>Elements</code> that are directly or indirectly contained in it.</p>
""" ;
      rdfs:label "LibraryPackage" .

<http://open-services.net/ns/sysmlv2#usageNestedPart>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>PartUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>.</p>" ;
      rdfs:label "usageNestedPart" .

<http://open-services.net/ns/sysmlv2#definitionVariant>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Usages</code> which represent the variants of this <code>Definition</code> as a variation point <code>Definition</code>, if <code>isVariation</code> = true. If <code>isVariation = false</code>, the there must be no <code>variants</code>.</p>" ;
      rdfs:label "definitionVariant" .

<http://open-services.net/ns/sysmlv2#itemFlowItemType>
      a       rdf:Property ;
      rdfs:comment """<p>The type of values transferred, which is the <code>type</code> of the <code>itemFeature</code> of the <code>ItemFlow</code>.</p>

""" ;
      rdfs:label "itemFlowItemType" .

<http://open-services.net/ns/sysmlv2#usageNestedView>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ViewUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>.</p> 
""" ;
      rdfs:label "usageNestedView" .

<http://open-services.net/ns/sysmlv2#usageNestedEnumeration>
      a       rdf:Property ;
      rdfs:comment "<p>The code>EnumerationUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>.<p>" ;
      rdfs:label "usageNestedEnumeration" .

<http://open-services.net/ns/sysmlv2#literalIntegerValue>
      a       rdf:Property ;
      rdfs:comment """<p>The <code><em>Integer</em></code> value that is the result of evaluating this <code>LiteralInteger</code>.</p>
<p>The Integer value that is the result of evaluating this Expression.</p>
""" ;
      rdfs:label "literalIntegerValue" .

<http://open-services.net/ns/sysmlv2#elementIsLibraryElement>
      a       rdf:Property ;
      rdfs:comment "<p>Whether this Element is contained in the ownership tree of a library model.</p>" ;
      rdfs:label "elementIsLibraryElement" .

<http://open-services.net/ns/sysmlv2#typeInheritedMembership>
      a       rdf:Property ;
      rdfs:comment """<p>All <code>Memberships</code> inherited by this <code>Type</code> via <code>Specialization</code> or <code>Conjugation</code>. These are included in the derived union for the <code>memberships</code> of the <code>Type</code>.</p>
""" ;
      rdfs:label "typeInheritedMembership" .

<http://open-services.net/ns/sysmlv2#definitionOwnedCalculation>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>CalculationUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.</p>" ;
      rdfs:label "definitionOwnedCalculation" .

<http://open-services.net/ns/sysmlv2#ViewpointUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>ViewpointUsage</code> is a <code>Usage</code> of a <code>ViewpointDefinition</code>.</p>


viewpointStakeholder = framedConcern.featureMemberhsip->
    selectByKind(StakeholderMembership).
    ownedStakeholderParameter
specializesFromLibrary('Views::viewpoints')
isComposite and owningType <> null and
(owningType.oclIsKindOf(ViewDefinition) or
 owningType.oclIsKindOf(ViewUsage)) implies
    specializesFromLibrary('Views::View::viewpointSatisfactions')""" ;
      rdfs:label "ViewpointUsage" .

<http://open-services.net/ns/sysmlv2#ConnectionDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>ConnectionDefinition</code> is a <code>PartDefinition</code> that is also an <code>AssociationStructure</code>. The end <code>Features</code> of a <code>ConnectionDefinition</code> must be <code>Usages</code>.</p>
specializesFromLibrary('Connections::Connection')
ownedEndFeature->size() = 2 implies
    specializesFromLibrary('Connections::BinaryConnections')""" ;
      rdfs:label "ConnectionDefinition" .

<http://open-services.net/ns/sysmlv2#Relationship>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>Relationship</code> is an <code>Element</code> that relates other <code>Element</code>. Some of its <code>relatedElements</code> may be owned, in which case those <code>ownedRelatedElements</code> will be deleted from a model if their <code>owningRelationship</code> is. A <code>Relationship</code> may also be owned by another <code>Element</code>, in which case the <code>ownedRelatedElements</code> of the <code>Relationship</code> are also considered to be transitively owned by the <code>owningRelatedElement</code> of the <code>Relationship</code>.</p>

<p>The <code>relatedElements</code> of a <code>Relationship</code> are divided into <code>source</code> and <code>target</code> <code>Elements</code>. The <code>Relationship</code> is considered to be directed from the <code>source</code> to the <code>target</code> <code>Elements</code>. An undirected <code>Relationship</code> may have either all <code>source</code> or all <code>target</code> <code>Elements</code>.</p>

<p>A &quot;relationship <code>Element</code>&quot; in the abstract syntax is generically any <code>Element</code> that is an instance of either <code>Relationship</code> or a direct or indirect specialization of <code>Relationship</code>. Any other kind of <code>Element</code> is a &quot;non-relationship <code>Element</code>&quot;. It is a convention of that non-relationship <code>Elements</code> are <em>only</em> related via reified relationship <code>Elements</code>. Any meta-associations directly between non-relationship <code>Elements</code> must be derived from underlying reified <code>Relationship</code>.</p>

relatedElement = source->union(target)""" ;
      rdfs:label "Relationship" .

<http://open-services.net/ns/sysmlv2#connectorTargetFeature>
      a       rdf:Property ;
      rdfs:comment "<p>The target <code>relatedFeatures</code> for this <code>Connector</code>. This includes all the <code>relatedFeatures</code> other than the <code>sourceFeature</code>.</p>" ;
      rdfs:label "connectorTargetFeature" .

<http://open-services.net/ns/sysmlv2#behaviorParameter>
      a       rdf:Property ;
      rdfs:comment """<p>The parameters of this <code>Behavior</code>, which are defined as its <code>directedFeatures</code>, whose values are passed into and/or out of a performance of the <code>Behavior</code>.</p>
""" ;
      rdfs:label "behaviorParameter" .

<http://open-services.net/ns/sysmlv2#elementOwnedAnnotation>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ownedRelationships</code> of this <code>Element</code> that are <code>Annotations</code>, for which this <code>Element</code> is the <code>annotatedElement</code>.</code>" ;
      rdfs:label "elementOwnedAnnotation" .

<http://open-services.net/ns/sysmlv2#subclassificationOwningClassifier>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Classifier</code> that owns this <code>Subclassification</code> relationship, which must also be its <code>subclassifier</code>.</p>
""" ;
      rdfs:label "subclassificationOwningClassifier" .

<http://open-services.net/ns/sysmlv2#conjugatedPortDefinitionOwnedPortConjugator>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>PortConjugation</code> that is the <code>ownedConjugator</code> of this <code>ConjugatedPortDefinition</code>, linking it to its <code>originalPortDefinition</code>.</p>" ;
      rdfs:label "conjugatedPortDefinitionOwnedPortConjugator" .

<http://open-services.net/ns/sysmlv2#requirementDefinitionReqId>
      a       rdf:Property ;
      rdfs:comment "<p>An optional modeler-specified identifier for this <code>RequirementDefinition</code> (used, e.g., to link it to an original requirement text in some source document), which is the <code>declaredShortName</code> for the <code>RequirementDefinition</code>.</p>" ;
      rdfs:label "requirementDefinitionReqId" .

<http://open-services.net/ns/sysmlv2#Intersecting>
      a       rdfs:Class ;
      rdfs:comment """<p><code>Intersecting</code> is a <code>Relationship</code> that makes its <code>intersectingType</code> one of the <code>intersectingTypes</code> of its <code>typeIntersected</code>.</p>
""" ;
      rdfs:label "Intersecting" .

<http://open-services.net/ns/sysmlv2#viewRenderingMembershipOwnedRendering>
      a       rdf:Property ;
      rdfs:comment "<p>The owned <code>RenderingUsage</code> that is either itself the <code>referencedRendering</code> or subsets the <code>referencedRendering</code>." ;
      rdfs:label "viewRenderingMembershipOwnedRendering" .

<http://open-services.net/ns/sysmlv2#ParameterMembership>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>ParameterMembership</code> is a <code>FeatureMembership</code> that identifies its <code>memberFeature</code> as a parameter, which is always owned, and must have a <code>direction</code>. A <code>ParameterMembership</code> must be owned by a <code>Behavior</code> or a <code>Step</code>.</p>
ownedMemberParameter.direction = parameterDirection()
owningType.oclIsKindOf(Behavior) or owningType.oclIsKindOf(Step)""" ;
      rdfs:label "ParameterMembership" .

<http://open-services.net/ns/sysmlv2#membershipMemberShortName>
      a       rdf:Property ;
      rdfs:comment "<p>The short name of the <code>memberElement</code> relative to the <code>membershipOwningNamespace</code>.</p>" ;
      rdfs:label "membershipMemberShortName" .

<http://open-services.net/ns/sysmlv2#definitionOwnedConstraint>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ConstraintUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.</p> 
""" ;
      rdfs:label "definitionOwnedConstraint" .

<http://open-services.net/ns/sysmlv2#usageNestedState>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>StateUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>.</p>
""" ;
      rdfs:label "usageNestedState" .

<http://open-services.net/ns/sysmlv2#acceptActionUsagePayloadArgument>
      a       rdf:Property ;
      rdfs:comment """<p>An <code>Expression</code> whose <code>result</code> is bound to the <code><em>payload</em></code> <code>parameter</code> of this <code>AcceptActionUsage</code>. If provided, the <code>AcceptActionUsage</code> will only accept a <code><em>Transfer</em></code> with exactly this <code><em>payload</em></code>.</p> 
""" ;
      rdfs:label "acceptActionUsagePayloadArgument" .

<http://open-services.net/ns/sysmlv2#Class>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>Class</code> is a <code>Classifier</code> of things (in the universe) that can be distinguished without regard to how they are related to other things (via <code>Features</code>). This means multiple things classified by the same <code>Class</code> can be distinguished, even when they are related other things in exactly the same way.</p>

specializesFromLibrary('Occurrences::Occurrence')
ownedSpecialization.general->
    forAll(not oclIsKindOf(DataType)) and
not oclIsKindOf(Association) implies
    ownedSpecialization.general->
        forAll(not oclIsKindOf(Association))""" ;
      rdfs:label "Class" .

<http://open-services.net/ns/sysmlv2#definitionOwnedVerificationCase>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>VerificationCaseUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.</p>" ;
      rdfs:label "definitionOwnedVerificationCase" .

<http://open-services.net/ns/sysmlv2#whileLoopActionUsageUntilArgument>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Expression</code> whose result, if false, determines that the <code>bodyAction</code> should continue to be performed. It is the (optional) third owned <code>parameter</code> of the <code>WhileLoopActionUsage</code>.</p> 
""" ;
      rdfs:label "whileLoopActionUsageUntilArgument" .

<http://open-services.net/ns/sysmlv2#itemFlowItemFlowEnd>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>connectorEnds</code> of this <code>ItemFlow</code> that are <code>ItemFlowEnds</code>.</p>
""" ;
      rdfs:label "itemFlowItemFlowEnd" .

<http://open-services.net/ns/sysmlv2#Subclassification>
      a       rdfs:Class ;
      rdfs:comment """<p><code>Subclassification</code> is <code>Specialization</code> in which both the <code>specific</code> and <code>general</code> <code>Types</code> are <code>Classifier</code>. This means all instances of the specific <code>Classifier</code> are also instances of the general <code>Classifier</code>.</p>
""" ;
      rdfs:label "Subclassification" .

<http://open-services.net/ns/sysmlv2#Element>
      a       rdfs:Class ;
      rdfs:subClassOf oslc_am:Resource ;
      rdfs:comment """<p>An <code>Element</code> is a constituent of a model that is uniquely identified relative to all other <code>Elements</code>. It can have <code>Relationships</code> with other <code>Elements</code>. Some of these <code>Relationships</code> might imply ownership of other <code>Elements</code>, which means that if an <code>Element</code> is deleted from a model, then so are all the <code>Elements</code> that it owns.</p>

ownedElement = ownedRelationship.ownedRelatedElement
owner = owningRelationship.owningRelatedElement
qualifiedName =
    if owningNamespace = null then null
    else if owningNamespace.owner = null then escapedName()
    else if owningNamespace.qualifiedName = null or 
            escapedName() = null then null
    else owningNamespace.qualifiedName + '::' + escapedName()
    endif endif endif
documentation = ownedElement->selectByKind(Documentation)
ownedAnnotation = ownedRelationship->
    selectByKind(Annotation)->
    select(a | a.annotatedElement = self)
name = effectiveName()
ownedRelationship->exists(isImplied) implies isImpliedIncluded
isLibraryElement = libraryNamespace() <> null

shortName = effectiveShortName()
owningNamespace =
    if owningMembership = null then null
    else owningMembership.membershipOwningNamespace
    endif
textualRepresentation = ownedElement->selectByKind(TextualRepresentation)""" ;
      rdfs:label "Element" .

<http://open-services.net/ns/sysmlv2#namespaceOwnedMember>
      a       rdf:Property ;
      rdfs:comment """<p>The owned <code>members</code> of this <code>Namespace</code>, which are the <cpde><code>ownedMemberElements</code> of the <code>ownedMemberships</code> of the .</cpde></p>
""" ;
      rdfs:label "namespaceOwnedMember" .

<http://open-services.net/ns/sysmlv2#assignmentActionUsageTargetArgument>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Expression</code> whose value is an occurrence in the domain of the <code>referent</code> <code>Feature</code>, for which the value of the <code>referent</code> will be set to the result of the <code>valueExpression</code> by this <code>AssignmentActionUsage</code>.</p>" ;
      rdfs:label "assignmentActionUsageTargetArgument" .

<http://open-services.net/ns/sysmlv2#owningMembershipOwnedMemberShortName>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>shortName</code> of the <code>ownedMemberElement</code>.</p>" ;
      rdfs:label "owningMembershipOwnedMemberShortName" .

<http://open-services.net/ns/sysmlv2#TransitionFeatureMembership>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>TransitionFeatureMembership</code> is a <code>FeatureMembership</code> for a trigger, guard or effect of a <code>TransitionUsage</code>, whose <code>transitionFeature</code> is a <code>AcceptActionUsage</code>, <em><code>Boolean</code></em>-valued <code>Expression</code> or <code>ActionUsage</code>, depending on its <code>kind</code>. </p>
kind = TransitionFeatureKind::trigger implies
    transitionFeature.oclIsKindOf(AcceptActionUsage)
owningType.oclIsKindOf(TransitionUsage)
kind = TransitionFeatureKind::guard implies
    transitionFeature.oclIsKindOf(Expression) and
    let guard : Expression = transitionFeature.oclIsKindOf(Expression) in
    guard.result.specializesFromLibrary('ScalarValues::Boolean') and
    guard.result.multiplicity <> null and
    guard.result.multiplicity.hasBounds(1,1)
kind = TransitionFeatureKind::effect implies
    transitionFeature.oclIsKindOf(ActionUsage)""" ;
      rdfs:label "TransitionFeatureMembership" .

<http://open-services.net/ns/sysmlv2#textualRepresentationRepresentedElement>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Element</code> that is represented by this <code>TextualRepresentation</code>.</p>
""" ;
      rdfs:label "textualRepresentationRepresentedElement" .

<http://open-services.net/ns/sysmlv2#framedConcernMembershipReferencedConcern>
      a       rdf:Property ;
      rdfs:comment "<p> The <code>ConcernUsage</code> that is referenced through this <code>FramedConcernMembership</code>. It is the <code>referencedConstraint</code> of the <code>FramedConcernMembership</code> considered as a <code>RequirementConstraintMembership</code>, which must be a <code>ConcernUsage</code>.</p>" ;
      rdfs:label "framedConcernMembershipReferencedConcern" .

<http://open-services.net/ns/sysmlv2#typeFeaturingOwningFeatureOfType>
      a       rdf:Property ;
      rdfs:comment "<p>A <code>featureOfType</code> that is also the <code>owningRelatedElement</code> of this <code>TypeFeaturing</code>.</p>" ;
      rdfs:label "typeFeaturingOwningFeatureOfType" .

<http://open-services.net/ns/sysmlv2#FeatureValue>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>FeatureValue</code> is a <code>Membership</code> that identifies a particular member <code>Expression</code> that provides the value of the <code>Feature</code> that owns the <code>FeatureValue</code>. The value is specified as either a bound value or an initial value, and as either a concrete or default value. A <code>Feature</code> can have at most one <code>FeatureValue</code>.</p>

<p>The result of the <code>value</code> <code>Expression</code> is bound to the <code>featureWithValue</code> using a <code>BindingConnector</code>. If <code>isInitial = false</code>, then the <code>featuringType</code> of the <code>BindingConnector</code> is the same as the <code>featuringType</code> of the <code>featureWithValue</code>. If <code>isInitial = true</code>, then the <code>featuringType</code> of the <code>BindingConnector</code> is restricted to its <code>startShot</code>.

<p>If <code>isDefault = false</code>, then the above semantics of the <code>FeatureValue</code> are realized for the given <code>featureWithValue</code>. Otherwise, the semantics are realized for any individual of the <code>featuringType</code> of the <code>featureWithValue</code>, unless another value is explicitly given for the <code>featureWithValue</code> for that individual.</p>

not isDefault implies
    featureWithValue.ownedMember->
        selectByKind(BindingConnector)->exists(b |
            b.relatedFeature->includes(featureWithValue) and
            b.relatedFeature->includes(value.result) and
            if not isInitial then 
                b.featuringType = featureWithValue.featuringType
            else 
                b.featuringType->exists(t |
                    t.oclIsKindOf(Feature) and
                    t.oclAsType(Feature).chainingFeature =
                        Sequence{
                            resolveGlobal('Base::things::that').
                                memberElement,
                            resolveGlobal('Occurrences::Occurrence::startShot').
                                memberElement
                        }
                )
            endif)
featureWithValue.redefinition.redefinedFeature->
    closure(redefinition.redefinedFeature).valuation->
    forAll(isDefault)""" ;
      rdfs:label "FeatureValue" .

<http://open-services.net/ns/sysmlv2#requirementDefinitionRequiredConstraint>
      a       rdf:Property ;
      rdfs:comment "<p>The owned <code>ConstraintUsages</code> that represent requirements of this <code>RequirementDefinition</code>, derived as the <code>ownedConstraints</code> of the <code>RequirementConstraintMemberships</code> of the <code>RequirementDefinition</code> with <code>kind</code> = <code>requirement</code>.</p>" ;
      rdfs:label "requirementDefinitionRequiredConstraint" .

<http://open-services.net/ns/sysmlv2#relationshipTarget>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>relatedElements</code> to which this Relationship is considered to be directed.</p>
""" ;
      rdfs:label "relationshipTarget" .

<http://open-services.net/ns/sysmlv2#typeOwnedDisjoining>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ownedRelationships</code> of this <code>Type</code> that are <code>Disjoinings</code>, for which the <code>Type</code> is the <code>typeDisjoined</code> <code>Type</code>.</p>
""" ;
      rdfs:label "typeOwnedDisjoining" .

<http://open-services.net/ns/sysmlv2#occurrenceUsagePortionKind>
      a       rdf:Property ;
      rdfs:comment "<p>The kind of (temporal) portion of the life of the <code>occurrenceDefinition</code> represented by this <code>OccurrenceUsage</code>, if it is so restricted.</p>" ;
      rdfs:label "occurrenceUsagePortionKind" .

<http://open-services.net/ns/sysmlv2#annotationAnnotatingElement>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>AnnotatingElement</code> that annotates the <code>annotatedElement</code> of this <code>Annotation</code>.</p>
""" ;
      rdfs:label "annotationAnnotatingElement" .

<http://open-services.net/ns/sysmlv2#elementShortName>
      a       rdf:Property ;
      rdfs:comment "<p>The short name to be used for this <code>Element</code> during name resolution within its <code>owningNamespace</code>. This is derived using the <code>effectiveShortName()</code> operation. By default, it is the same as the <code>declaredShortName</code>, but this is overridden for certain kinds of <code>Elements</code> to compute a <code>shortName</code> even when the <code>declaredName</code> is null.</p>" ;
      rdfs:label "elementShortName" .

<http://open-services.net/ns/sysmlv2#Comment>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>Comment</code> is an <code>AnnotatingElement</code> whose <code>body</code> in some way describes its <code>annotatedElements</code>.</p>
""" ;
      rdfs:label "Comment" .

<http://open-services.net/ns/sysmlv2#viewUsageSatisfiedViewpoint>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>nestedRequirements</code> of this <code>ViewUsage</code> that are <code>ViewpointUsages</code> for (additional) viewpoints satisfied by the <code>ViewUsage</code>.</p>" ;
      rdfs:label "viewUsageSatisfiedViewpoint" .

<http://open-services.net/ns/sysmlv2#usageNestedTransition>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>TransitionUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>.</p>
""" ;
      rdfs:label "usageNestedTransition" .

<http://open-services.net/ns/sysmlv2#disjoiningDisjoiningType>
      a       rdf:Property ;
      rdfs:comment """<p><code>Type</code> asserted to be disjoint with the <code>typeDisjoined</code>.</p>
""" ;
      rdfs:label "disjoiningDisjoiningType" .

<http://open-services.net/ns/sysmlv2#FeatureChainExpression>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>FeatureChainExpression</code> is an <code>OperatorExpression</code> whose operator is <code>\".\"</code>, which resolves to the <code>Function</code> <em><code>ControlFunctions::'.'</code></em> from the Kernel Functions Library. It evaluates to the result of chaining the <code>result</code> <code>Feature</code> of its single <code>argument</code> <code>Expression</code> with its <code>targetFeature</code>.</p>
let sourceParameter : Feature = sourceTargetFeature() in
sourceTargetFeature <> null and
sourceTargetFeature.redefinesFromLibrary('ControlFunctions::'.'::source::target')
let sourceParameter : Feature = sourceTargetFeature() in
sourceTargetFeature <> null and
sourceTargetFeature.redefines(targetFeature)
targetFeature =
    let nonParameterMemberships : Sequence(Membership) = ownedMembership->
        reject(oclIsKindOf(ParameterMembership)) in
    if nonParameterMemberships->isEmpty() or
       not nonParameterMemberships->first().memberElement.oclIsKindOf(Feature)
    then null
    else nonParameterMemberships->first().memberElement.oclAsType(Feature)
    endif
argument->notEmpty() implies
    targetFeature.featuringType->forAll(t | 
        t.specializes(argument->at(1).result))""" ;
      rdfs:label "FeatureChainExpression" .

<http://open-services.net/ns/sysmlv2#satisfyRequirementUsageSatisfiedRequirement>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>RequirementUsage</code> that is satisfied by the <code>satisfyingSubject</code> of this <code>SatisfyRequirementUsage</code>. It is the <code>assertedConstraint</code> of the <code>SatisfyRequirementUsage</code> considered as an <code>AssertConstraintUsage</code>, which must be a <code>RequirementUsage</code>.</p>" ;
      rdfs:label "satisfyRequirementUsageSatisfiedRequirement" .

<http://open-services.net/ns/sysmlv2#owningMembershipOwnedMemberElementId>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>elementId</code> of the <code>ownedMemberElement</code>.</p>" ;
      rdfs:label "owningMembershipOwnedMemberElementId" .

<http://open-services.net/ns/sysmlv2#usageNestedConnection>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ConnectorAsUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>. Note that this list includes <code>BindingConnectorAsUsages</code> and <code>SuccessionAsUsages</code>, even though these are <code>ConnectorAsUsages</code> but not <code>ConnectionUsages</code>.</p>" ;
      rdfs:label "usageNestedConnection" .

<http://open-services.net/ns/sysmlv2#stateDefinitionState>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>StateUsages</code>, which are <code>actions</code> in the <code>StateDefinition</code>, that specify the discrete states in the behavior defined by the <code>StateDefinition</code>.</p>" ;
      rdfs:label "stateDefinitionState" .

<http://open-services.net/ns/sysmlv2#commentLocale>
      a       rdf:Property ;
      rdfs:comment "<p>Identification of the language of the <code>body</code> text and, optionally, the region and/or encoding. The format shall be a POSIX locale conformant to ISO/IEC 15897, with the format <code>[language[_territory][.codeset][@modifier]]</code>.</p>" ;
      rdfs:label "commentLocale" .

<http://open-services.net/ns/sysmlv2#UseCaseUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>UseCaseUsage</code> is a <code>Usage</code> of a <code>UseCaseDefinition</code>.</p>
includedUseCase = ownedUseCase->
    selectByKind(IncludeUseCaseUsage).
    useCaseIncluded
specializesFromLibrary('UseCases::useCases')
isComposite and owningType <> null and
(owningType.oclIsKindOf(UseCaseDefinition) or
 owningType.oclIsKindOf(UseCaseUsage)) implies
    specializesFromLibrary('UseCases::UseCase::subUseCases')""" ;
      rdfs:label "UseCaseUsage" .

<http://open-services.net/ns/sysmlv2#DataType>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>DataType</code> is a <code>Classifier</code> of things (in the universe) that can only be distinguished by how they are related to other things (via Features). This means multiple things classified by the same <code>DataType</code></p>

<ul>
	<li>Cannot be distinguished when they are related to other things in exactly the same way, even when they are intended to be about different things.</li>
	<li>Can be distinguished when they are related to other things in different ways, even when they are intended to be about the same thing.</li>
</ul>

specializesFromLibrary('Base::DataValue')
ownedSpecialization.general->
    forAll(not oclIsKindOf(Class) and 
           not oclIsKindOf(Association))""" ;
      rdfs:label "DataType" .

<http://open-services.net/ns/sysmlv2#relationshipSource>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>relatedElements</c ode> from which this Relationship is considered to be directed.</p>" ;
      rdfs:label "relationshipSource" .

<http://open-services.net/ns/sysmlv2#connectionUsageConnectionDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>AssociationStructures</code> that are the types of this <code>ConnectionUsage</code>. Nominally, these are , but other kinds of Kernel <code>AssociationStructures</code> are also allowed, to permit use of <code>AssociationStructures</code> from the Kernel Model Libraries</p>" ;
      rdfs:label "connectionUsageConnectionDefinition" .

<http://open-services.net/ns/sysmlv2#Expression>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>Expression</code> is a <code>Step</code> that is typed by a <code>Function</code>. An <code>Expression</code> that also has a <code>Function</code> as its <code>featuringType</code> is a computational step within that <code>Function</code>. An <code>Expression</code> always has a single <code>result</code> parameter, which redefines the <code>result</code> parameter of its defining <code>function</code>. This allows <code>Expressions</code> to be interconnected in tree structures, in which inputs to each <code>Expression</code> in the tree are determined as the results of other <code>Expression</code> in the tree.</p>

isModelLevelEvaluable = modelLevelEvaluable(Set(Element){})
specializesFromLibrary('Performances::evaluations')
owningMembership <> null and 
owningMembership.oclIsKindOf(FeatureValue) implies
    let featureWithValue : Feature = 
        owningMembership.oclAsType(FeatureValue).featureWithValue in
    featuringType = featureWithValue.featuringType
ownedMembership.selectByKind(ResultExpressionMembership)->
    forAll(mem | ownedFeature.selectByKind(BindingConnector)->
        exists(binding |
            binding.relatedFeature->includes(result) and
            binding.relatedFeature->includes(mem.ownedResultExpression.result)))
result =
    let resultParams : Sequence(Feature) =
        ownedFeatureMemberships->
            selectByKind(ReturnParameterMembership).
            ownedParameterMember in
    if resultParams->notEmpty() then resultParams->first()
    else if function <> null then function.result
    else null
    endif endif
ownedFeatureMembership->
    selectByKind(ReturnParameterMembership)->
    size() <= 1
membership->selectByKind(ResultExpressionMembership)->size() <= 1""" ;
      rdfs:label "Expression" .

<http://open-services.net/ns/sysmlv2#relationshipRelatedElement>
      a       rdf:Property ;
      rdfs:comment "<p>The Elements that are related by this Relationship, derived as the union of the <code>source</code> and <code>target</code> Elements of the Relationship.</p>" ;
      rdfs:label "relationshipRelatedElement" .

<http://open-services.net/ns/sysmlv2#requirementVerificationMembershipVerifiedRequirement>
      a       rdf:Property ;
      rdfs:comment "<p> The <code>RequirementUsage</code> that is identified as being verified. It is the <code>referencedConstraint</code> of the <code>RequirementVerificationMembership</code> considered as a <code>RequirementConstraintMembership</code>, which must be a <code>RequirementUsage</code>.</p>" ;
      rdfs:label "requirementVerificationMembershipVerifiedRequirement" .

<http://open-services.net/ns/sysmlv2#elementFilterMembershipCondition>
      a       rdf:Property ;
      rdfs:comment """<p>The model-level evaluable <code>Boolean</code>-valued <code>Expression</code> used to filter the imported <code>members</code> of the <code>membershipOwningNamespace</code> of this <code>ElementFilterMembership</code>.</p>
""" ;
      rdfs:label "elementFilterMembershipCondition" .

<http://open-services.net/ns/sysmlv2#occurrenceUsageOccurrenceDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Classes</code> that are the types of this <code>OccurrenceUsage</code>. Nominally, these are <code>OccurrenceDefinitions</code>, but other kinds of kernel <code>Classes</code> are also allowed, to permit use of <code>Classes</code> from the Kernel Model Libraries.</p>" ;
      rdfs:label "occurrenceUsageOccurrenceDefinition" .

<http://open-services.net/ns/sysmlv2#successionTriggerStep>
      a       rdf:Property ;
      rdfs:comment """<p><code>Steps</code> that map incoming events to the timing of occurrences of the <code>transitionStep</code>. The values of <code>triggerStep</code> subset the list of acceptable events to be received by a <code>Behavior</code> or the object that performs it.</p>
""" ;
      rdfs:label "successionTriggerStep" .

<http://open-services.net/ns/sysmlv2#subclassificationSuperclassifier>
      a       rdf:Property ;
      rdfs:comment """<p>The more <code>general</code> Classifier in this <code>Subclassification</code>.</p>
""" ;
      rdfs:label "subclassificationSuperclassifier" .

<http://open-services.net/ns/sysmlv2#occurrenceDefinitionLifeClass>
      a       rdf:Property ;
      rdfs:comment "<p>If <code>isIndividual</code> is true, a <code>LifeClass</code> that specializes this <code>OccurrenceDefinition</code>, restricting it to represent an individual.</p>" ;
      rdfs:label "occurrenceDefinitionLifeClass" .

<http://open-services.net/ns/sysmlv2#verificationCaseUsageVerifiedRequirement>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>RequirementUsages</code> verified by this <code>VerificationCaseUsage</code>, which are the <code>verifiedRequirements</code> of all <code>RequirementVerificationMemberships</code> of the <code>objectiveRequirement</code>.</p>" ;
      rdfs:label "verificationCaseUsageVerifiedRequirement" .

<http://open-services.net/ns/sysmlv2#relationshipOwnedRelatedElement>
      a       rdf:Property ;
      rdfs:comment "<p>The <tt>relatedElements</tt> of this Relationship that are owned by the Relationship.</p>" ;
      rdfs:label "relationshipOwnedRelatedElement" .

<http://open-services.net/ns/sysmlv2#PartDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>PartDefinition</code> is an <code>ItemDefinition</code> of a <code>Class</code> of systems or parts of systems. Note that all parts may be considered items for certain purposes, but not all items are parts that can perform actions within a system.</p>

specializesFromLibrary('Parts::Part')""" ;
      rdfs:label "PartDefinition" .

<http://open-services.net/ns/sysmlv2#SendActionUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>SendActionUsage</code> is an <code>ActionUsage</code> that specifies the sending of a payload given by the result of its <code>payloadArgument</code> <code>Expression</code> via a <em><code>MessageTransfer</code></em> whose <em><code>source</code></em> is given by the result of the <code>senderArgument</code> <code>Expression</code> and whose <code>target</code> is given by the result of the <code>receiverArgument</code> <code>Expression</code>. If no <code>senderArgument</code> is provided, the default is the <em><code>this</code></em> context for the action. If no <code>receiverArgument</code> is given, then the receiver is to be determined by, e.g., outgoing <em><code>Connections</code></em> from the sender.</p> 

senderArgument = argument(2)
payloadArgument = argument(1)
inputParameters()->size() >= 3
receiverArgument = argument(3)
isSubactionUsage() implies
    specializesFromLibrary('Actions::Action::acceptSubactions')
specializesFromLibrary('Actions::sendActions')""" ;
      rdfs:label "SendActionUsage" .

<http://open-services.net/ns/sysmlv2#literalBooleanValue>
      a       rdf:Property ;
      rdfs:comment """<p>The <code><em>Boolean</em></code> value that is the result of evaluating this <code>LiteralBoolean</code>.</p>
<p>The Boolean value that is the result of evaluating this Expression.</p>
""" ;
      rdfs:label "literalBooleanValue" .

<http://open-services.net/ns/sysmlv2#elementOwnedElement>
      a       rdf:Property ;
      rdfs:comment """<p>The Elements owned by this Element, derived as the <tt>ownedRelatedElements</tt> of the <tt>ownedRelationships</tt> of this Element.</p>
""" ;
      rdfs:label "elementOwnedElement" .

<http://open-services.net/ns/sysmlv2#membershipMemberElementId>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>elementId</code> of the <code>memberElement</code>.</p>" ;
      rdfs:label "membershipMemberElementId" .

<http://open-services.net/ns/sysmlv2#LiteralExpression>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>LiteralExpression</code> is an <code>Expression</code> that provides a basic <code><em>DataValue</em></code> as a result.</p>

isModelLevelEvaluable = true
specializesFromLibrary('Performances::literalEvaluations')""" ;
      rdfs:label "LiteralExpression" .

<http://open-services.net/ns/sysmlv2#StakeholderMembership>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>StakeholderMembership</code> is a <code>ParameterMembership</code> that identifies a <code>PartUsage</code> as a <code>stakeholderParameter</code> of a <code>RequirementDefinition</code> or <code>RequirementUsage</code>, which specifies a role played by an entity with concerns framed by the <code>owningType</code>.</p>
owningType.oclIsKindOf(RequirementUsage) or
owningType.oclIsKindOf(RequirementDefinition)""" ;
      rdfs:label "StakeholderMembership" .

<http://open-services.net/ns/sysmlv2#definitionDirectedUsage>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>usages</code> of this <code>Definition</code> that are <code>directedFeatures</code>.</p>
""" ;
      rdfs:label "definitionDirectedUsage" .

<http://open-services.net/ns/sysmlv2#differencingTypeDifferenced>
      a       rdf:Property ;
      rdfs:comment """<p><code>Type</code> with interpretations partly determined by <code>differencingType</code>, as described in <code>Type::differencingType</code>.</p>
""" ;
      rdfs:label "differencingTypeDifferenced" .

<http://open-services.net/ns/sysmlv2#ReferenceUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>ReferenceUsage</code> is a <code>Usage</code> that specifies a non-compositional (<code>isComposite = false</code>) reference to something. The <code>definition</code> of a <code>ReferenceUsage</code> can be any kind of <code>Classifier</code>, with the default being the top-level <code>Classifier</code> <code><em>Base::Anything</em></code> from the Kernel Semantic Library. This allows the specification of a generic reference without distinguishing if the thing referenced is an attribute value, item, action, etc.</p>
isReference""" ;
      rdfs:label "ReferenceUsage" .

<http://open-services.net/ns/sysmlv2#AllocationDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>AllocationDefinition</code> is a <code>ConnectionDefinition</code> that specifies that some or all of the responsibility to realize the intent of the <code>source</code> is allocated to the <code>target</code> instances. Such allocations define mappings across the various structures and hierarchies of a system model, perhaps as a precursor to more rigorous specifications and implementations. An <code>AllocationDefinition</code> can itself be refined using nested <code>allocations</code> that give a finer-grained decomposition of the containing allocation mapping.</p>
allocation = usage->selectAsKind(AllocationUsage)
specializesFromLibrary('Allocations::Allocation')""" ;
      rdfs:label "AllocationDefinition" .

<http://open-services.net/ns/sysmlv2#featureTypingOwningFeature>
      a       rdf:Property ;
      rdfs:comment "<p>A <code>typedFeature</code> that is also the <code>owningRelatedElement</code> of this <code>FeatureTyping</code>.</p>" ;
      rdfs:label "featureTypingOwningFeature" .

<http://open-services.net/ns/sysmlv2#ReferenceSubsetting>
      a       rdfs:Class ;
      rdfs:comment """<p><code>ReferenceSubsetting</code> is a kind of <code>Subsetting</code> in which the <code>referencedFeature</code> is syntactically distinguished from other <code>Features</code> subsetted by the <code>referencingFeature</code>. <code>ReferenceSubsetting</code> has the same semantics as <code>Subsetting</code>, but the <code>referenceFeature</code> may have a special purpose relative to the <code>referencingFeature</code>. For instance, <code>ReferenceSubsetting</code> is used to identify the <code>relatedFeatures</code> of a <code>Connector</code>.</p>

<p><code>ReferenceSubsetting</code> is always an <code>ownedRelationship</code> of its <code>referencingFeature</code>. A <code>Feature</code> can have at most one <code>ownedReferenceSubsetting</code>.</p>
""" ;
      rdfs:label "ReferenceSubsetting" .

<http://open-services.net/ns/sysmlv2#sendActionUsageReceiverArgument>
      a       rdf:Property ;
      rdfs:comment """<p>An <code>Expression</code> whose result is bound to the <em><code>receiver</code></em> input parameter of this <code>SendActionUsage</code>.</p> 
""" ;
      rdfs:label "sendActionUsageReceiverArgument" .

<http://open-services.net/ns/sysmlv2#expressionResult>
      a       rdf:Property ;
      rdfs:comment """<p><p>An <code>output</code> <code>parameter</code> of the <code>Expression</code> whose value is the result of the <code>Expression</code>. The result of an <code>Expression</code> is either inherited from its <code>function</code> or it is related to the <code>Expression</code> via a <code>ReturnParameterMembership</code>, in which case it redefines the <code>result</code> <code>parameter</code> of its <code>function</code>.</p>
""" ;
      rdfs:label "expressionResult" .

<http://open-services.net/ns/sysmlv2#Invariant>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>Invariant</code> is a <code>BooleanExpression</code> that is asserted to have a specific <code><em>Boolean</em></code> result value. If <code>isNegated = false</code>, then the result is asserted to be true. If <code>isNegated = true</code>, then the result is asserted to be false.</p>

if isNegated then
    specializesFromLibrary('Performances::falseEvaluations')
else
    specializesFromLibrary('Performances::trueEvaluations')
endif""" ;
      rdfs:label "Invariant" .

<http://open-services.net/ns/sysmlv2#Type>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>Type</code> is a <code>Namespace</code> that is the most general kind of <code>Element</code> supporting the semantics of classification. A <code>Type</code> may be a <code>Classifier</code> or a <code>Feature</code>, defining conditions on what is classified by the <code>Type</code> (see also the description of <code>isSufficient</code>).</p>

ownedSpecialization = ownedRelationship->selectByKind(Specialization)->
    select(s | s.special = self)
    
multiplicity = 
    let ownedMultiplicities: Sequence(Multiplicity) =
        ownedMember->selectByKind(Multiplicity) in
    if ownedMultiplicities->isEmpty() then null
    else ownedMultiplicities->first()
    endif
ownedFeatureMembership = ownedRelationship->selectByKind(FeatureMembership)
ownedConjugator =
    let ownedConjugators: Sequence(Conjugator) = 
        ownedRelationship->selectByKind(Conjugation) in
    if ownedConjugators->isEmpty() then null 
    else ownedConjugators->at(1) endif
output = feature->select(f | 
    let direction: FeatureDirectionKind = directionOf(f) in
    direction = FeatureDirectionKind::out or
    direction = FeatureDirectionKind::inout)
input = feature->select(f | 
    let direction: FeatureDirectionKind = directionOf(f) in
    direction = FeatureDirectionKind::_'in' or
    direction = FeatureDirectionKind::inout)
inheritedMembership = inheritedMemberships(Set{})
specializesFromLibrary('Base::Anything')
directedFeature = feature->select(f | directionOf(f) <> null)
feature = featureMembership.ownedMemberFeature
featureMembership = ownedFeatureMembership->union(
    inheritedMembership->selectByKind(FeatureMembership))
ownedFeature = ownedFeatureMembership.ownedMemberFeature
differencingType = ownedDifferencing.differencingType
intersectingType->excludes(self)
differencingType->excludes(self)
unioningType = ownedUnioning.unioningType
unioningType->excludes(self)
intersectingType = ownedIntersecting.intersectingType
ownedRelationship->selectByKind(Conjugation)->size() <= 1
ownedMember->selectByKind(Multiplicity)->size() <= 1
endFeature = feature->select(isEnd)
ownedDisjoining =
    ownedRelationship->selectByKind(Disjoining)
ownedUnioning =
    ownedRelationship->selectByKind(Unioning)
ownedRelationship->selectByKind(Intersecting)
ownedDifferencing =
    ownedRelationship->selectByKind(Differencing)
ownedEndFeature = ownedFeature->select(isEnd)
inheritedFeature = inheritedMemberships->
    selectByKind(FeatureMembership).memberFeature
ownedUnioning->size() <> 1
ownedIntersecting->size() <> 1
ownedDifferencing->size() <> 1""" ;
      rdfs:label "Type" .

<http://open-services.net/ns/sysmlv2#definitionOwnedAction>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ActionUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.</p>" ;
      rdfs:label "definitionOwnedAction" .

<http://open-services.net/ns/sysmlv2#definitionOwnedViewpoint>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ViewpointUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.</p>" ;
      rdfs:label "definitionOwnedViewpoint" .

<http://open-services.net/ns/sysmlv2#intersectingTypeIntersected>
      a       rdf:Property ;
      rdfs:comment """<p><code>Type</code> with interpretations partly determined by <code>intersectingType</code>, as described in <code>Type::intersectingType</code>.</p>
""" ;
      rdfs:label "intersectingTypeIntersected" .

<http://open-services.net/ns/sysmlv2#featureDirection>
      a       rdf:Property ;
      rdfs:comment """<p>Indicates how values of this <code>Feature</code> are determined or used (as specified for the <code>FeatureDirectionKind</code>).</p>
""" ;
      rdfs:label "featureDirection" .

<http://open-services.net/ns/sysmlv2#membershipMemberName>
      a       rdf:Property ;
      rdfs:comment """<p>The name of the <code>memberElement</code> relative to the <code>membershipOwningNamespace</code>.</p>
""" ;
      rdfs:label "membershipMemberName" .

<http://open-services.net/ns/sysmlv2#usageOwningDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Definition</code> that owns this <code>Usage</code> (if any).</p>" ;
      rdfs:label "usageOwningDefinition" .

<http://open-services.net/ns/sysmlv2#AnalysisCaseUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>AnalysisCaseUsage</code> is a <code>Usage</code> of an <code>AnalysisCaseDefinition</code>.</p>
analysisAction = usage->select(
    isComposite and
    specializes('AnalysisCases::AnalysisAction'))
resultExpression =
    let results : OrderedSet(ResultExpressionMembership) =
        featureMembersip->
            selectByKind(ResultExpressionMembership) in
    if results->isEmpty() then null
    else results->first().ownedResultExpression
    endif
specializesFromLibrary('AnalysisCases::analysisCases')
isComposite and owningType <> null and
    (owningType.oclIsKindOf(AnalysisCaseDefinition) or
     owningType.oclIsKindOf(AnalysisCaseUsage)) implies
    specializesFromLibrary('AnalysisCases::AnalysisCase::subAnalysisCases')""" ;
      rdfs:label "AnalysisCaseUsage" .

<http://open-services.net/ns/sysmlv2#requirementDefinitionActorParameter>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>parameters</code> of this <code>RequirementDefinition</code> that represent actors involved in the requirement.</p>" ;
      rdfs:label "requirementDefinitionActorParameter" .

<http://open-services.net/ns/sysmlv2#connectorRelatedFeature>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Features</code> that are related by this <code>Connector</code> considered as a <code>Relationship</code> and that restrict the links it identifies, given by the referenced <code>Features</code> of the <code>connectorEnds</code> of the <code>Connector</code>.</p>
""" ;
      rdfs:label "connectorRelatedFeature" .

<http://open-services.net/ns/sysmlv2#assignmentActionUsageValueExpression>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Expression</code> whose result is to be assigned to the <code>referent</code> <code>Feature</code>.</p>" ;
      rdfs:label "assignmentActionUsageValueExpression" .

<http://open-services.net/ns/sysmlv2#unioningTypeUnioned>
      a       rdf:Property ;
      rdfs:comment """<p><code>Type</code> with interpretations partly determined by <code>unioningType</code>, as described in <code>Type::unioningType</code>.</p>
""" ;
      rdfs:label "unioningTypeUnioned" .

<http://open-services.net/ns/sysmlv2#specializationGeneral>
      a       rdf:Property ;
      rdfs:comment """<p>A <code>Type</code> with a superset of all instances of the <code>specific</code> <code>Type</code>, which might be the same set.</p>
""" ;
      rdfs:label "specializationGeneral" .

<http://open-services.net/ns/sysmlv2#featureOwnedFeatureChaining>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ownedRelationships</code> of this <code>Feature</code> that are <code>FeatureChainings</code>, for which the <code>Feature</code> will be the <code>featureChained</code>.</p>" ;
      rdfs:label "featureOwnedFeatureChaining" .

<http://open-services.net/ns/sysmlv2#viewDefinitionViewRendering>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>RenderingUsage</code> to be used to render views defined by this <code>ViewDefinition</code>, which is the <code>referencedRendering</code> of the <code>ViewRenderingMembership</code> of the <code>ViewDefinition</code>.<p>" ;
      rdfs:label "viewDefinitionViewRendering" .

<http://open-services.net/ns/sysmlv2#packageFilterCondition>
      a       rdf:Property ;
      rdfs:comment """<p>The model-level evaluable <code><em>Boolean</em></code>-valued <code>Expression</code> used to filter the <code>members</code> of this <code>Package</code>, which are owned by the <code>Package</code> are via <code>ElementFilterMemberships</code>.</p>
""" ;
      rdfs:label "packageFilterCondition" .

<http://open-services.net/ns/sysmlv2#elementOwner>
      a       rdf:Property ;
      rdfs:comment "<p>The owner of this Element, derived as the <code>owningRelatedElement</code> of the <code>owningRelationship</code> of this Element, if any.</p>" ;
      rdfs:label "elementOwner" .

<http://open-services.net/ns/sysmlv2#allocationUsageAllocationDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>AllocationDefinitions</code> that are the types of this <code>AllocationUsage</code>.</p>" ;
      rdfs:label "allocationUsageAllocationDefinition" .

<http://open-services.net/ns/sysmlv2#definitionOwnedInterface>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>InterfaceUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.</p>" ;
      rdfs:label "definitionOwnedInterface" .

<http://open-services.net/ns/sysmlv2#FramedConcernMembership>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>FramedConcernMembership</code> is a <code>RequirementConstraintMembership</code> for a framed <code>ConcernUsage</code> of a <code>RequirementDefinition</code> or <code>RequirementUsage</code>.</p>
kind = RequirementConstraintKind::requirement""" ;
      rdfs:label "FramedConcernMembership" .

<http://open-services.net/ns/sysmlv2#elementIsImpliedIncluded>
      a       rdf:Property ;
      rdfs:comment "<p>Whether all necessary implied Relationships have been included in the <code>ownedRelationships</code> of this Element. This property may be true, even if there are not actually any <code>ownedRelationships</code> with <code>isImplied = true</code>, meaning that no such Relationships are actually implied for this Element. However, if it is false, then <code>ownedRelationships</code> may <em>not</em> contain any implied Relationships. That is, either <em>all</em> required implied Relationships must be included, or none of them.</p>" ;
      rdfs:label "elementIsImpliedIncluded" .

<http://open-services.net/ns/sysmlv2#usageNestedFlow>
      a       rdf:Property ;
      rdfs:comment "<p>The code>FlowConnectionUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>.</p>" ;
      rdfs:label "usageNestedFlow" .

<http://open-services.net/ns/sysmlv2#AssignmentActionUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>AssignmentActionUsage</code> is an <code>ActionUsage</code> that is defined, directly or indirectly, by the <code>ActionDefinition</code> <em><code>AssignmentAction</code></em> from the Systems Model Library. It specifies that the value of the <code>referent</code> <code>Feature</code>, relative to the target given by the result of the <code>targetArgument</code> <code>Expression</code>, should be set to the result of the <code>valueExpression</code>.</p>

specializesFromLibrary('Actions::assignmentActions')
let targetParameter : Feature = inputParameter(1) in
targetParameter <> null and
targetParameter.ownedFeature->notEmpty() and
targetParameter.ownedFeature->first().
    redefines('AssignmentAction::target::startingAt')
valueExpression = argument(2)
targetArgument = argument(1)
isSubactionUsage() implies
    specializesFromLibrary('Actions::Action::assignments')
let targetParameter : Feature = inputParameter(1) in
targetParameter <> null and
targetParameter.ownedFeature->notEmpty() and
targetParameter->first().ownedFeature->notEmpty() and
targetParameter->first().ownedFeature->first().
    redefines('AssigmentAction::target::startingAt::accessedFeature')
let targetParameter : Feature = inputParameter(1) in
targetParameter <> null and
targetParameter.ownedFeature->notEmpty() and
targetParameter->first().ownedFeature->notEmpty() and
targetParameter->first().ownedFeature->first().redefines(referent)
referent =
    let unownedFeatures : Sequence(Feature) = ownedMembership->
        reject(oclIsKindOf(FeatureMembership)).memberElement->
        selectByKind(Feature) in
    if unownedFeatures->isEmpty() then null
    else unownedFeatures->first().oclAsType(Feature)
    endif
ownedMembership->exists(
    not oclIsKindOf(OwningMembership) and 
    memberElement.oclIsKindOf(Feature))""" ;
      rdfs:label "AssignmentActionUsage" .

<http://open-services.net/ns/sysmlv2#analysisCaseUsageAnalysisAction>
      a       rdf:Property ;
      rdfs:comment """<p>The composite <code>usages</code> of the <code>AnalysisCaseUsage</code> that are defined as <code>AnalysisActions</code>.</p>
""" ;
      rdfs:label "analysisCaseUsageAnalysisAction" .

<http://open-services.net/ns/sysmlv2#Package>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>Package</code> is a <code>Namespace</code> used to group <code>Elements</code>, without any instance-level semantics. It may have one or more model-level evaluable <code>filterCondition</code> <code>Expressions</code> used to filter its <code>importedMemberships</code>. Any imported <code>member</code> must meet all of the <code>filterConditions</code>.</p>
filterCondition = ownedMembership->
    selectByKind(ElementFilterMembership).condition""" ;
      rdfs:label "Package" .

<http://open-services.net/ns/sysmlv2#invariantIsNegated>
      a       rdf:Property ;
      rdfs:comment """<p>Whether this <code>Invariant</code> is asserted to be false rather than true.</p>
""" ;
      rdfs:label "invariantIsNegated" .

<http://open-services.net/ns/sysmlv2#stakeholderMembershipOwnedStakeholderParameter>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>PartUsage</code> specifying the stakeholder.</p>" ;
      rdfs:label "stakeholderMembershipOwnedStakeholderParameter" .

<http://open-services.net/ns/sysmlv2#definitionOwnedCase>
      a       rdf:Property ;
      rdfs:comment "<p>The code>CaseUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.</p>" ;
      rdfs:label "definitionOwnedCase" .

<http://open-services.net/ns/sysmlv2#ItemFeature>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>ItemFeature</code> is the <code>ownedFeature</code> of an <code>ItemFlow</code> that identifies the things carried by the kinds of transfers that are instances of the <code>ItemFlow</code>.</p>
ownedRedefinition.redefinedFeature->
    redefinesFromLibrary('Transfers::Transfer::item')""" ;
      rdfs:label "ItemFeature" .

<http://open-services.net/ns/sysmlv2#ConstraintUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>ConstraintUsage</code> is an <code>OccurrenceUsage</code> that is also a <code>BooleanExpression</code>, and, so, is typed by a <code>Predicate</code>. Nominally, if the type is a <code>ConstraintDefinition</code>, a <code>ConstraintUsage</code> is a <code>Usage</code> of that <code>ConstraintDefinition</code>. However, other kinds of kernel <code>Predicates</code> are also allowed, to permit use of <code>Predicates</code> from the Kernel Model Libraries.</p>
owningFeatureMembership <> null and
owningFeatureMembership.oclIsKindOf(RequirementConstraintMembership) implies
    if owningFeatureMembership.oclAsType(RequirementConstraintMembership).kind = 
        RequirementConstraintKind::assumption then
        specializesFromLibrary('Requirements::RequirementCheck::assumptions')
    else
        specializesFromLibrary('Requirements::RequirementCheck::constraints')
    endif
specializesFromLibrary('Constraints::constraintChecks')
owningType <> null and
(owningType.oclIsKindOf(ItemDefinition) or
 owningType.oclIsKindOf(ItemUsage)) implies
    specializesFromLibrary('Items::Item::checkedConstraints')""" ;
      rdfs:label "ConstraintUsage" .

<http://open-services.net/ns/sysmlv2#typeOutput>
      a       rdf:Property ;
      rdfs:comment """<p>All <code>features</code> related to this <code>Type</code> by <code>FeatureMemberships</code> that have <code>direction</code> <code>out<code> or <code>inout<code>.</code></code></code></code></p>
""" ;
      rdfs:label "typeOutput" .

<http://open-services.net/ns/sysmlv2#featureIsReadOnly>
      a       rdf:Property ;
      rdfs:comment """<p>Whether the values of this <code>Feature</code> can change over the lifetime of an instance of the domain.</p>
""" ;
      rdfs:label "featureIsReadOnly" .

<http://open-services.net/ns/sysmlv2#viewpointDefinitionViewpointStakeholder>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>PartUsages</code> that identify the stakeholders with concerns framed by this <code>ViewpointDefinition</code>, which are the owned and inherited <code>stakeholderParameters</code> of the <code>framedConcerns</code> of this <code>ViewpointDefinition</code>.</p>" ;
      rdfs:label "viewpointDefinitionViewpointStakeholder" .

<http://open-services.net/ns/sysmlv2#SubjectMembership>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>SubjectMembership</code> is a <code>ParameterMembership</code> that indicates that its <code>ownedSubjectParameter</code> is the subject of its <code>owningType</code>. The <code>owningType</code> of a <code>SubjectMembership</code> must be a <code>RequirementDefinition</code>, <code>RequirementUsage</code>, <code>CaseDefinition</code>, or <code>CaseUsage</code>.</p>
owningType.oclIsType(RequirementDefinition) or
owningType.oclIsType(RequiremenCaseRequirementDefinition) or
owningType.oclIsType(CaseDefinition) or
owningType.oclIsType(CaseUsage)
""" ;
      rdfs:label "SubjectMembership" .

<http://open-services.net/ns/sysmlv2#stateUsageExitAction>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ActionUsage</code> of this <code>StateUsage</code> to be performed on exit to the state defined by the <code>StateDefinition</code>. It is the owned <code>ActionUsage</code> related to the <code>StateUsage</code> by a <code>StateSubactionMembership</code>  with <code>kind = exit</code>.</p>" ;
      rdfs:label "stateUsageExitAction" .

<http://open-services.net/ns/sysmlv2#exhibitStateUsageExhibitedState>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>StateUsage</code> to be exhibited by the <code>ExhibitStateUsage</code>. It is the <code>performedAction</code> of the <code>ExhibitStateUsage</code> considered as a <code>PerformActionUsage</code>, which must be a <code>StateUsage</code>.</p>" ;
      rdfs:label "exhibitStateUsageExhibitedState" .

<http://open-services.net/ns/sysmlv2#stateSubactionMembershipKind>
      a       rdf:Property ;
      rdfs:comment "<p>Whether this <code>StateSubactionMembership</code> is for an <code>entry<code>, <code>do</code> or <code>exit</code> <code>ActionUsage</code>.</p>" ;
      rdfs:label "stateSubactionMembershipKind" .

<http://open-services.net/ns/sysmlv2#assertConstraintUsageAssertedConstraint>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ConstraintUsage</code> to be performed by the <code>AssertConstraintUsage</code>. It is the <code>referenceFeature</code> of the <code>ownedReferenceSubsetting</code> for the <code>AssertConstraintUsage</code>, if there is one, and, otherwise, the <code>AssertConstraintUsage</code> itself.</p>" ;
      rdfs:label "assertConstraintUsageAssertedConstraint" .

<http://open-services.net/ns/sysmlv2#featuringType>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Type<code> that features the <code>featureOfType</code>.</p>" ;
      rdfs:label "featuringType" .

<http://open-services.net/ns/sysmlv2#viewDefinitionViewCondition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Expressions</code> related to this <code>ViewDefinition</code> by <code>ElementFilterMemberships</code>, which specify conditions on <code>Elements</code> to be rendered in a view.</p>" ;
      rdfs:label "viewDefinitionViewCondition" .

<http://open-services.net/ns/sysmlv2#definitionOwnedConcern>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ConcernUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.</p>" ;
      rdfs:label "definitionOwnedConcern" .

<http://open-services.net/ns/sysmlv2#FeatureInverting>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>FeatureInverting</code> is a <code>Relationship</code> between <code>Features</code> asserting that their interpretations (sequences) are the reverse of each other, identified as <code>featureInverted</code> and <code>invertingFeature</code>. For example, a <code>Feature</code> identifying each person&#39;s parents is the inverse of a <code>Feature</code> identifying each person&#39;s children. A person identified as a parent of another will identify that other as one of their children.</p>
""" ;
      rdfs:label "FeatureInverting" .

<http://open-services.net/ns/sysmlv2#conjugatedPortTypingConjugatedPortDefinition>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>type</code> of this <code>ConjugatedPortTyping</code> considered as a <code>FeatureTyping</code>, which must be a <code>ConjugatedPortDefinition</code>.</p>
""" ;
      rdfs:label "conjugatedPortTypingConjugatedPortDefinition" .

<http://open-services.net/ns/sysmlv2#itemFlowTargetInputFeature>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Feature</code> that receives the values carried by the <code>ItemFlow</code>. It must be an owned <code>output</code> of the target participant of the <code>ItemFlow</code>.</p>" ;
      rdfs:label "itemFlowTargetInputFeature" .

<http://open-services.net/ns/sysmlv2#featureChainingChainingFeature>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Feature</code> whose values partly determine values of <code>featureChained</code>, as described in <code>Feature::chainingFeature</code>.</p>
""" ;
      rdfs:label "featureChainingChainingFeature" .

<http://open-services.net/ns/sysmlv2#featureInvertingFeatureInverted>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Feature</code> that is an inverse of the <code>invertingFeature</code>.</p>" ;
      rdfs:label "featureInvertingFeatureInverted" .

<http://open-services.net/ns/sysmlv2#definitionOwnedItem>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ItemUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.</p>" ;
      rdfs:label "definitionOwnedItem" .

<http://open-services.net/ns/sysmlv2#definitionOwnedAllocation>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>AllocationUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.</p>" ;
      rdfs:label "definitionOwnedAllocation" .

<http://open-services.net/ns/sysmlv2#requirementConstraintMembershipKind>
      a       rdf:Property ;
      rdfs:comment "<p>Whether the <code>RequirementConstraintMembership</code> is for an assumed or required <code>ConstraintUsage</code>.</p>" ;
      rdfs:label "requirementConstraintMembershipKind" .

<http://open-services.net/ns/sysmlv2#ElementFilterMembership>
      a       rdfs:Class ;
      rdfs:comment """<p><code>ElementFilterMembership</code> is a <code>Membership</code> between a <code>Namespace</code> and a model-level evaluable <code><em>Boolean</em></code>-valued <code>Expression</code>, asserting that imported <code>members</code> of the <code>Namespace</code> should be filtered using the <code>condition</code> <code>Expression</code>. A general <code>Namespace</code> does not define any specific filtering behavior, but such behavior may be defined for various specialized kinds of <code>Namespaces</code>.</p>

condition.isModelLevelEvaluable
condition.result.specializesFromLibrary('ScalarValues::Boolean')""" ;
      rdfs:label "ElementFilterMembership" .

<http://open-services.net/ns/sysmlv2#membershipImportImportedMembership>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Membership</code> to be imported.</p>
""" ;
      rdfs:label "membershipImportImportedMembership" .

<http://open-services.net/ns/sysmlv2#successionTransitionStep>
      a       rdf:Property ;
      rdfs:comment """<p>A <code>Step</code> that is typed by the <code>Behavior</code> <code><em>TransitionPerformances::TransitionPerformance</em></code> (from the Kernel Semantic Library) that has this <code>Succession</code> as its <em><code>transitionLink</code></em>.</p>
""" ;
      rdfs:label "successionTransitionStep" .

<http://open-services.net/ns/sysmlv2#IncludeUseCaseUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>IncludeUseCaseUsage</code> is a <code>UseCaseUsage</code> that represents the inclusion of a <code>UseCaseUsage</code> by a <code>UseCaseDefinition</code> or <code>UseCaseUsage</code>. Unless it is the <code>IncludeUseCaseUsage</code> itself, the <code>UseCaseUsage</code> to be included is related to the <code>includedUseCase</code> by a <code>ReferenceSubsetting</code> <code>Relationship</code>. An <code>IncludeUseCaseUsage</code> is also a PerformActionUsage, with its <code>useCaseIncluded</code> as the <code>performedAction</code>.</p>

owningType <> null and
(owningType.oclIsKindOf(UseCaseDefinition) or
 owningType.oclIsKindOf(UseCaseUsage) implies
    specializesFromLibrary('UseCases::UseCase::includedUseCases')
ownedReferenceSubsetting <> null implies
    ownedReferenceSubsetting.referencedFeature.oclIsKindOf(UseCaseUsage)""" ;
      rdfs:label "IncludeUseCaseUsage" .

<http://open-services.net/ns/sysmlv2#variantMembershipOwnedVariantUsage>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Usage</code> that represents a variant in the context of the <code>owningVariationDefinition</code> or <code>owningVariationUsage</code>.</p>" ;
      rdfs:label "variantMembershipOwnedVariantUsage" .

<http://open-services.net/ns/sysmlv2#portConjugationOriginalPortDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>PortDefinition</code> being conjugated.</p>" ;
      rdfs:label "portConjugationOriginalPortDefinition" .

<http://open-services.net/ns/sysmlv2#stateSubactionMembershipAction>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ActionUsage</code> that is the <code>ownedMemberFeature</code> of this <code>StateSubactionMembership</code>.</p>" ;
      rdfs:label "stateSubactionMembershipAction" .

<http://open-services.net/ns/sysmlv2#ItemUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>ItemUsage</code> is a <code>ItemUsage</code> whose <code>definition</code> is a <code>Structure</code>. Nominally, if the <code>definition</code> is an <code>ItemDefinition</code>, an <code>ItemUsage</code> is a <code>ItemUsage</code> of that <code>ItemDefinition</code> within a system. However, other kinds of Kernel <code>Structures</code> are also allowed, to permit use of <code>Structures</code> from the Kernel Model Libraries.</p>
itemDefinition = occurrenceDefinition->selectByKind(ItemDefinition)
specializesFromLibrary('Items::items')
isComposite and owningType <> null and
(owningType.oclIsKindOf(ItemDefinition) or
 owningType.oclIsKindOf(ItemUsage)) implies
    specializesFromLibrary('Items::Item::subitem')""" ;
      rdfs:label "ItemUsage" .

<http://open-services.net/ns/sysmlv2#TextualRepresentation>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>TextualRepresentation</code> is an <code>AnnotatingElement</code> whose <code>body</code> represents the <code>representedElement</code> in a given <code>language</code>. The <code>representedElement</code> must be the <code>owner</code> of the <code>TextualRepresentation</code>. The named <code>language</code> can be a natural language, in which case the <code>body</code> is an informal representation, or an artificial language, in which case the <code>body</code> is expected to be a formal, machine-parsable representation.</p>

<p>If the named <code>language</code> of a <code>TextualRepresentation</code> is machine-parsable, then the <code>body</code> text should be legal input text as defined for that <code>language</code>. The interpretation of the named language string shall be case insensitive. The following <code>language</code> names are defined to correspond to the given standard languages:</p>

<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" width=\"498\">
	<thead>
	</thead>
	<tbody>
		<tr>
			<td style=\"text-align: center; width: 154px;\"><code>kerml</code></td>
			<td style=\"width: 332px;\">Kernel Modeling Language</td>
		</tr>
		<tr>
			<td style=\"text-align: center; width: 154px;\"><code>ocl</code></td>
			<td style=\"width: 332px;\">Object Constraint Language</td>
		</tr>
		<tr>
			<td style=\"text-align: center; width: 154px;\"><code>alf</code></td>
			<td style=\"width: 332px;\">Action Language for fUML</td>
		</tr>
	</tbody>
</table>

<p>Other specifications may define specific <code>language</code> strings, other than those shown above, to be used to indicate the use of languages from those specifications in KerML <code>TextualRepresentation</code>.</p>

<p>If the <code>language</code> of a <code>TextualRepresentation</code> is &quot;<code>kerml</code>&quot;, then the <code>body</code> text shall be a legal representation of the <code>representedElement</code> in the KerML textual concrete syntax. A conforming tool can use such a <code>TextualRepresentation</code> <code>Annotation</code> to record the original KerML concrete syntax text from which an <code>Element</code> was parsed. In this case, it is a tool responsibility to ensure that the <code>body</code> of the <code>TextualRepresentation</code> remains correct (or the Annotation is removed) if the annotated <code>Element</code> changes other than by re-parsing the <code>body</code> text.</p>

<p>An <code>Element</code> with a <code>TextualRepresentation</code> in a language other than KerML is essentially a semantically &quot;opaque&quot; <code>Element</code> specified in the other language. However, a conforming KerML tool may interpret such an element consistently with the specification of the named language.</p>
""" ;
      rdfs:label "TextualRepresentation" .

<http://open-services.net/ns/sysmlv2#definitionOwnedMetadata>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>MetadataUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.</p>" ;
      rdfs:label "definitionOwnedMetadata" .

<http://open-services.net/ns/sysmlv2#connectorSourceFeature>
      a       rdf:Property ;
      rdfs:comment "<p>The source <code>relatedFeature</code> for this <code>Connector</code>. It is the first <code>relatedFeature</code>.</p>" ;
      rdfs:label "connectorSourceFeature" .

<http://open-services.net/ns/sysmlv2#JoinNode>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>JoinNode</code> is a <code>ControlNode</code> that waits for the completion of all the predecessor <code>Actions</code> given by incoming <code>Successions</code>.</p>
sourceConnector->selectByKind(Succession)->size() <= 1
specializesFromLibrary('Actions::Action::join')""" ;
      rdfs:label "JoinNode" .

<http://open-services.net/ns/sysmlv2#ifActionUsageIfArgument>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Expression</code> whose result determines whether the <code>thenAction</code> or (optionally) the <code>elseAction</code> is performed. It is the first <code>parameter<code> of the <code>IfActionUsage</code>.</p> 
""" ;
      rdfs:label "ifActionUsageIfArgument" .

<http://open-services.net/ns/sysmlv2#definitionOwnedEnumeration>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>EnumerationUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.<p>" ;
      rdfs:label "definitionOwnedEnumeration" .

<http://open-services.net/ns/sysmlv2#typeInheritedFeature>
      a       rdf:Property ;
      rdfs:comment """<p>All the <code>memberFeatures</code> of the <code>inheritedMemberships</code> of this <code>Type</code> that are <code>FeatureMemberships</code>.</p>
""" ;
      rdfs:label "typeInheritedFeature" .

<http://open-services.net/ns/sysmlv2#CalculationDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>CalculationDefinition</code> is an <coed>ActionDefinition</code> that also defines a <code>Function</code> producing a <code>result</code>.</p>
specializesFromLibrary('Calculations::Calculation')
calculation = action->selectByKind(CalculationUsage)""" ;
      rdfs:label "CalculationDefinition" .

<http://open-services.net/ns/sysmlv2#ConjugatedPortTyping>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>ConjugatedPortTyping</code> is a <code>FeatureTyping</code> whose <code>type</code> is a <code>ConjugatedPortDefinition</code>. (This relationship is intended to be an abstract-syntax marker for a special surface notation for conjugated typing of ports.)</p>
portDefinition = conjugatedPortDefinition.originalPortDefinition""" ;
      rdfs:label "ConjugatedPortTyping" .

<http://open-services.net/ns/sysmlv2#multiplicityRangeUpperBound>
      a       rdf:Property ;
      rdfs:comment "The <code>Expression</code> whose result is the upper bound of the <code>MultiplicityRange</code>." ;
      rdfs:label "multiplicityRangeUpperBound" .

<http://open-services.net/ns/sysmlv2#literalRationalValue>
      a       rdf:Property ;
      rdfs:comment """<p>The value whose rational approximation is the result of evaluating this <code>LiteralRational</code>.</p>

<p>The Real value that is the result of evaluating this Expression.</p>""" ;
      rdfs:label "literalRationalValue" .

<http://open-services.net/ns/sysmlv2#MergeNode>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>MergeNode</code> is a <code>ControlNode</code> that asserts the merging of its incoming <code>Successions</code>. A <code>MergeNode</code> may have at most one outgoing <code>Successions</code>.</p>
sourceConnector->selectAsKind(Succession)->size() <= 1
targetConnector->selectByKind(Succession)->
    collect(connectorEnd->at(1))->
    forAll(sourceMult |
        multiplicityHasBounds(sourceMult, 0, 1))
targetConnector->selectByKind(Succession)->
    forAll(subsetsChain(self, 
        resolveGlobal('ControlPerformances::MergePerformance::incomingHBLink')))
specializesFromLibrary('Actions::Action::merges')""" ;
      rdfs:label "MergeNode" .

<http://open-services.net/ns/sysmlv2#ConnectionUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>ConnectionUsage</code> is a <code>ConnectorAsUsage</code> that is also a <code>PartUsage</code>. Nominally, if its type is a <code>ConnectionDefinition</code>, then a <code>ConnectionUsage</code> is a Usage of that <code>ConnectionDefinition</code>, representing a connection between parts of a system. However, other kinds of kernel <code>AssociationStructures</code> are also allowed, to permit use of <code>AssociationStructures</code> from the Kernel Model Libraries.</p>
specializesFromLibrary('Connections::connections')
ownedEndFeature->size() = 2 implies
    specializesFromLibrary('Connections::binaryConnections')""" ;
      rdfs:label "ConnectionUsage" .

<http://open-services.net/ns/sysmlv2#NamespaceImport>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>NamespaceImport</code> is an Import that imports <code>Memberships</code> from its <code>importedNamespace</code> into the <code>importOwningNamespace</code>. If <code> isRecursive = false</code>, then only the visible <code>Memberships</code> of the <code>importedNamespace</code> are imported. If <code> isRecursive = true</code>, then, in addition, <code>Memberships</code> are recursively imported from any <code>ownedMembers</code> of the <code>importedNamespace</code> that are <code>Namespaces</code>.</p>

importedElement = importedNamespace""" ;
      rdfs:label "NamespaceImport" .

<http://open-services.net/ns/sysmlv2#framedConcernMembershipOwnedConcern>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ConcernUsage</code> that is the <code>ownedConstraint</code> of this <code>FramedConcernMembership</code>.</p>" ;
      rdfs:label "framedConcernMembershipOwnedConcern" .

<http://open-services.net/ns/sysmlv2#FeatureReferenceExpression>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>FeatureReferenceExpression</code> is an <code>Expression</code> whose <code>result</code> is bound to a <code>referent</code> <code>Feature</code>.</p>
referent =
    let nonParameterMemberships : Sequence(Membership) = ownedMembership->
        reject(oclIsKindOf(ParameterMembership)) in
    if nonParameterMemberships->isEmpty() or
       not nonParameterMemberships->first().memberElement.oclIsKindOf(Feature)
    then null
    else nonParameterMemberships->first().memberElement.oclAsType(Feature)
    endif
ownedMember->selectByKind(BindingConnector)->exists(b |
    b.relatedFeatures->includes(targetFeature) and
    b.relatedFeatures->includes(result))
let membership : Membership = 
    ownedMembership->reject(m | m.oclIsKindOf(ParameterMembership)) in
membership->notEmpty() and
membership->at(1).memberElement.oclIsKindOf(Feature)""" ;
      rdfs:label "FeatureReferenceExpression" .

<http://open-services.net/ns/sysmlv2#associationTargetType>
      a       rdf:Property ;
      rdfs:comment """<p>The target <code>relatedTypes</code> for this <code>Association</code>. This includes all the <code>relatedTypes</code> other than the <code>sourceType</code>.</p> 
""" ;
      rdfs:label "associationTargetType" .

<http://open-services.net/ns/sysmlv2#portUsagePortDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>occurrenceDefinitions</code> of this <code>PortUsage</code>, which must all be <code>PortDefinitions<code>.</p>" ;
      rdfs:label "portUsagePortDefinition" .

<http://open-services.net/ns/sysmlv2#sendActionUsageSenderArgument>
      a       rdf:Property ;
      rdfs:comment """<p>An <code>Expression</code> whose result is bound to the <em><code>sender</code></em> input parameter of this <code>SendActionUsage</code>.</p> 
""" ;
      rdfs:label "sendActionUsageSenderArgument" .

<http://open-services.net/ns/sysmlv2#featureOwningFeatureMembership>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>FeatureMembership</code> that owns this <code>Feature</code> as an <code>ownedMemberFeature</code>, determining its <code>owningType</code>.</p>" ;
      rdfs:label "featureOwningFeatureMembership" .

<http://open-services.net/ns/sysmlv2#elementAliasIds>
      a       rdf:Property ;
      rdfs:comment "<p>Various alternative identifiers for this Element. Generally, these will be set by tools.</p>" ;
      rdfs:label "elementAliasIds" .

<http://open-services.net/ns/sysmlv2#AcceptActionUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>AcceptActionUsage</code> is an <code>ActionUsage</code> that specifies the acceptance of an <em><code>incomingTransfer</code></em> from the <code><em>Occurrence</em></code> given by the result of its <code>receiverArgument</code> Expression. (If no <code>receiverArgument</code> is provided, the default is the <em><code>this</code></em> context of the AcceptActionUsage.) The payload of the accepted <em><code>Transfer</em></code> is output on its <code>payloadParameter</code>. Which <em><code>Transfers</em></code> may be accepted is determined by conformance to the typing and (potentially) binding of the <code>payloadParameter</code>.</p>

inputParameters()->size() >= 2
receiverArgument = argument(2)
payloadArgument = argument(1)
payloadParameter = 
 if parameter->isEmpty() then null
 else parameter->first() endif
not isTriggerAction() implies
    specializesFromLibrary('Actions::acceptActions')
isSubactionUsage() and not isTriggerAction() implies
    specializesFromLibrary('Actions::Action::acceptSubactions')
isTriggerAction() implies
    specializesFromLibrary('Actions::TransitionAction::accepter')
payloadArgument <> null and
payloadArgument.oclIsKindOf(TriggerInvocationExpression) implies
    let invocation : Expression =
        payloadArgument.oclAsType(Expression) in
    parameter->size() >= 2 and
    invocation.parameter->size() >= 2 and        
    ownedFeature->selectByKind(BindingConnector)->exists(b |
        b.relatedFeatures->includes(parameter->at(2)) and
        b.relatedFeatures->includes(invocation.parameter->at(2)))""" ;
      rdfs:label "AcceptActionUsage" .

<http://open-services.net/ns/sysmlv2#subclassificationSubclassifier>
      a       rdf:Property ;
      rdfs:comment """<p>The more specific <code>Classifier</code> in this <code>Subclassification</code>.</p>
""" ;
      rdfs:label "subclassificationSubclassifier" .

<http://open-services.net/ns/sysmlv2#BindingConnector>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>BindingConnector</code> is a binary <code>Connector</code> that requires its <code>relatedFeatures</code> to identify the same things (have the same values).</p>

specializesFromLibrary('Links::selfLinks')
relatedFeature->size() = 2""" ;
      rdfs:label "BindingConnector" .

<http://open-services.net/ns/sysmlv2#subjectMembershipOwnedSubjectParameter>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Usage</code< that is the <code>ownedMemberParameter</code> of this <code>SubjectMembership</code>.</p>" ;
      rdfs:label "subjectMembershipOwnedSubjectParameter" .

<http://open-services.net/ns/sysmlv2#connectorAssociation>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Associations</code> that type the <code>Connector</code>.</p>
""" ;
      rdfs:label "connectorAssociation" .

<http://open-services.net/ns/sysmlv2#analysisCaseDefinitionResultExpression>
      a       rdf:Property ;
      rdfs:comment """<p>An <code>Expression</code> used to compute the <code>result</code> of the <code>AnalysisCaseDefinition</code>, owned via a <code>ResultExpressionMembership</code>.</p>
""" ;
      rdfs:label "analysisCaseDefinitionResultExpression" .

<http://open-services.net/ns/sysmlv2#redefinitionRedefinedFeature>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Feature</code> that is redefined by the <code>redefiningFeature</code> of this <code>Redefinition</code>.</p>
""" ;
      rdfs:label "redefinitionRedefinedFeature" .

<http://open-services.net/ns/sysmlv2#TriggerInvocationExpression>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>TriggerInvocationExpression</code> is an <code>InvocationExpression</code> that invokes one of the trigger <code>Functions</code> from the Kernel Semantic Library <code><em>Triggers<em></code> package, as indicated by its <code>kind</code>.</p>
specializesFromLibrary(
    if kind = TriggerKind::when then
        'Triggers::TriggerWhen'
    else if kind = TriggerKind::at then
        'Triggers::TriggerAt'
    else 
        'Triggers::TriggerAfter'
    endif endif
)
kind = TriggerKind::after implies
    argument->notEmpty() and
    argument->at(1).result.specializesFromLibrary('Quantities::ScalarQuantityValue') and
    let mRef : Element = 
        resolveGlobal('Quantities::TensorQuantityValue::mRef').ownedMemberElement in
    argument->at(1).result.feature->
        select(ownedRedefinition.redefinedFeature->
           closure(ownedRedefinition.redefinedFeature)->
           includes(mRef))->
        exists(specializesFromLibrary('ISQBase::DurationUnit'))
kind = TriggerKind::at implies
    argument->notEmpty() and
    argument->at(1).result.specializesFromLibrary('Time::TimeInstantValue')
kind = TriggerKind::when implies
    argument->notEmpty() and
    argument->at(1).oclIsKindOf(FeatureReferenceExpression) and
    let referent : Feature = 
        argument->at(1).oclAsType(FeatureReferenceExpression).referent in
    referent.oclIsKindOf(Expression) and
    referent.oclAsType(Expression).result.specializesFromLibrary('ScalarValues::Boolean')""" ;
      rdfs:label "TriggerInvocationExpression" .

<http://open-services.net/ns/sysmlv2#redefinitionRedefiningFeature>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Feature</code> that is redefining the <code>redefinedFeature</code> of this <code>Redefinition</code>.</p>
""" ;
      rdfs:label "redefinitionRedefiningFeature" .

<http://open-services.net/ns/sysmlv2#whileLoopActionUsageWhileArgument>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Expression</code> whose result, if true, determines that the <code>bodyAction</code> should continue to be performed. It is the first owned <code>parameter</code> of the <code>WhileLoopActionUsage</code>.</p> 
""" ;
      rdfs:label "whileLoopActionUsageWhileArgument" .

<http://open-services.net/ns/sysmlv2#ViewUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>ViewUsage</code> is a usage of a <code>ViewDefinition</code> to specify the generation of a view of the <code>members</code> of a collection of <code>exposedNamespaces</code>. The <code>ViewUsage</code> can satisfy more <code>viewpoints</code> than its definition, and it can specialize the <code>viewRendering</code> specified by its definition.<p>
exposedElement = ownedImport->selectByKind(Expose).
    importedMemberships(Set{}).memberElement->
    select(elm | includeAsExposed(elm))->
    asOrderedSet()
satisfiedViewpoint = ownedRequirement->
    selectByKind(ViewpointUsage)->
    select(isComposite)
viewCondition = ownedMembership->
    selectByKind(ElementFilterMembership).
    condition
viewRendering =
    let renderings: OrderedSet(ViewRenderingMembership) =
        featureMembership->selectByKind(ViewRenderingMembership) in
    if renderings->isEmpty() then null
    else renderings->first().referencedRendering
    endif
featureMembership->
    selectByKind(ViewRenderingMembership)->
    size() <= 1
specializesFromLibrary('Views::views')
owningType <> null and
(owningType.oclIsKindOf(ViewDefinition) or
 owningType.oclIsKindOf(ViewUsage)) implies
    specializesFromLibrary('Views::View::subviews')""" ;
      rdfs:label "ViewUsage" .

<http://open-services.net/ns/sysmlv2#subsettingSubsettingFeature>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Feature</code> that is a subset of the <code>subsettedFeature</code> of this <code>Subsetting</code>.</p>
""" ;
      rdfs:label "subsettingSubsettingFeature" .

<http://open-services.net/ns/sysmlv2#AttributeDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>AttributeDefinition</code> is a <code>Definition</code> and a <code>DataType</code> of information about a quality or characteristic of a system or part of a system that has no independent identity other than its value. All <code>features</code> of an <code>AttributeDefinition</code> must be referential (non-composite).</p>

<p>As a <code>DataType</code>, an <code>AttributeDefinition</code> must specialize, directly or indirectly, the base <code>DataType</code> <code><em>Base::DataValue</em></code> from the Kernel Semantic Library.</p>
feature->forAll(not isComposite)""" ;
      rdfs:label "AttributeDefinition" .

<http://open-services.net/ns/sysmlv2#Metaclass>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>Metaclass</code> is a <code>Structure</code> used to type <code>MetadataFeatures</code>.</p>
specializesFromLibrary('Metaobjects::Metaobject')""" ;
      rdfs:label "Metaclass" .

<http://open-services.net/ns/sysmlv2#metadataAccessExpressionReferencedElement>
      a       rdf:Property ;
      rdfs:comment "<p> The <code>Element</code> whose metadata is being accessed.</p>" ;
      rdfs:label "metadataAccessExpressionReferencedElement" .

<http://open-services.net/ns/sysmlv2#subsettingOwningFeature>
      a       rdf:Property ;
      rdfs:comment """<p>A <code>subsettingFeature</code> that is also the <code>owningRelatedElement</code> of this <code>Subsetting</code>.</p>

""" ;
      rdfs:label "subsettingOwningFeature" .

<http://open-services.net/ns/sysmlv2#usageVariant>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Usages</code> which represent the variants of this <code>Usage</code> as a variation point <code>Usage</code>, if <code>isVariation = true</code>. If <code>isVariation = false</code>, then there must be no <code>variants</code>.</p>" ;
      rdfs:label "usageVariant" .

<http://open-services.net/ns/sysmlv2#annotatingElementOwnedAnnotatingRelationship>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ownedRelationships</code> of this <code>AnnotatingElement</code> that are <code>Annotations</code>, for which this <code>AnnotatingElement</code> is the <code>annotatingElement</code>.</p>" ;
      rdfs:label "annotatingElementOwnedAnnotatingRelationship" .

<http://open-services.net/ns/sysmlv2#transitionUsageSuccession>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Succession</code> that is the <code>ownedFeature</code> of this <code>TransitionUsage</code>, which, if the <code>TransitionUsage</code> is triggered, asserts the temporal ordering of the <code>source</code> and <code>target</code>.</p>" ;
      rdfs:label "transitionUsageSuccession" .

<http://open-services.net/ns/sysmlv2#typeIntersectingType>
      a       rdf:Property ;
      rdfs:comment """<p>The interpretations of a <code>Type</code> with <code>intersectingTypes</code> are asserted to be those in common among the <code>intersectingTypes</code>, which are the <code>Types</code> derived from the <code>intersectingType</code> of the <code>ownedIntersectings</code> of this <code>Type</code>. For example, a <code>Classifier</code> might be an intersection of <code>Classifiers</code> for people of a particular sex and of a particular nationality. Similarly, a feature for people&#39;s children of a particular sex might be the intersection of a <code>Feature</code> for their children and a <code>Classifier</code> for people of that sex (because the interpretations of the children <code>Feature</code> that identify those of that sex are also interpretations of the Classifier for that sex).</p>
""" ;
      rdfs:label "typeIntersectingType" .

<http://open-services.net/ns/sysmlv2#intersectingIntersectingType>
      a       rdf:Property ;
      rdfs:comment """<p><code>Type</code> that partly determines interpretations of <code>typeIntersected</code>, as described in <code>Type::intersectingType</code>.</p>
""" ;
      rdfs:label "intersectingIntersectingType" .

<http://open-services.net/ns/sysmlv2#UseCaseDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>UseCaseDefinition</code> is a <code>CaseDefinition</code> that specifies a set of actions performed by its subject, in interaction with one or more actors external to the subject. The objective is to yield an observable result that is of value to one or more of the actors.</p>

includedUseCase = ownedUseCase->
    selectByKind(IncludeUseCaseUsage).
    useCaseIncluded
specializesFromLibrary('UseCases::UseCase')""" ;
      rdfs:label "UseCaseDefinition" .

<http://open-services.net/ns/sysmlv2#Step>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>Step</code> is a <code>Feature</code> that is typed by one or more <code>Behaviors</code>. <code>Steps</code> may be used by one <code>Behavior</code> to coordinate the performance of other <code>Behaviors</code>, supporting a steady refinement of behavioral descriptions. <code>Steps</code> can be ordered in time and can be connected using <code>ItemFlows</code> to specify things flowing between their <code>parameters</code>.</p>

specializesFromLibrary('Performances::performances')
owningType <> null and
    (owningType.oclIsKindOf(Behavior) or
     owningType.oclIsKindOf(Step)) implies
    specializesFromLibrary('Performances::Performance::enclosedPerformance')
isComposite and owningType <> null and
(owningType.oclIsKindOf(Structure) or
 owningType.oclIsKindOf(Feature) and
 owningType.oclAsType(Feature).type->
    exists(oclIsKindOf(Structure)) implies
    specializesFromLibrary('Objects::Object::ownedPerformance')
owningType <> null and
    (owningType.oclIsKindOf(Behavior) or
     owningType.oclIsKindOf(Step)) and
    self.isComposite implies
    specializesFromLibrary('Performances::Performance::subperformance')
behavior = type->selectByKind(Behavior)""" ;
      rdfs:label "Step" .

<http://open-services.net/ns/sysmlv2#definitionOwnedRendering>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>RenderingUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.</p>" ;
      rdfs:label "definitionOwnedRendering" .

<http://open-services.net/ns/sysmlv2#forLoopActionUsageSeqArgument>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Expression</code> whose result provides the sequence of values to which the <code>loopVariable</code> is set for each iterative performance of the <code>bodyAction</code>. It is the <code>Expression</code> whose <code>result</code> is bound to the <em><code>seq</code></em> <code>input</code> <code>parameter</code> of this <code>ForLoopActionUsage</code>.</p>
""" ;
      rdfs:label "forLoopActionUsageSeqArgument" .

<http://open-services.net/ns/sysmlv2#commentBody>
      a       rdf:Property ;
      rdfs:comment """<p>The annotation text for the <code>Comment</code>.</p>
""" ;
      rdfs:label "commentBody" .

<http://open-services.net/ns/sysmlv2#useCaseUsageIncludedUseCase>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>UseCaseUsages</code> that are included by this <code>UseCaseUse</code>, which are the <code>useCaseIncludeds</code> of the <code>IncludeUseCaseUsages</code> owned by this <code>UseCaseUsage<code>.</p>" ;
      rdfs:label "useCaseUsageIncludedUseCase" .

<http://open-services.net/ns/sysmlv2#typeOwnedSpecialization>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ownedRelationships</code> of this <code>Type</code> that are <code>Specializations</code>, for which the <code>Type</code> is the <code>specific</code> <code>Type</code>.</p>
""" ;
      rdfs:label "typeOwnedSpecialization" .

<http://open-services.net/ns/sysmlv2#actorMembershipOwnedActorParameter>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>PartUsage</code> specifying the actor.</p>" ;
      rdfs:label "actorMembershipOwnedActorParameter" .

<http://open-services.net/ns/sysmlv2#itemFlowSourceOutputFeature>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Feature</code> that provides the items carried by the <code>ItemFlow</code>. It must be an owned <code>output</code> of the <code>source</code> of the <code>ItemFlow</code>.</p>
""" ;
      rdfs:label "itemFlowSourceOutputFeature" .

<http://open-services.net/ns/sysmlv2#featureTypingTypedFeature>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Feature</code> that has a <code>type</code> determined by this <code>FeatureTyping</code>.</p>" ;
      rdfs:label "featureTypingTypedFeature" .

<http://open-services.net/ns/sysmlv2#AssociationStructure>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>AssociationStructure</code> is an <code>Association</code> that is also a <code>Structure</code>, classifying link objects that are both links and objects. As objects, link objects can be created and destroyed, and their non-end <code>Features</code> can change over time. However, the values of the end <code>Features</code> of a link object are fixed and cannot change over its lifetime.</p>
specializesFromLibrary('Objects::LinkObject')
endFeature->size() = 2 implies
    specializesFromLibrary('Objects::BinaryLinkObject')""" ;
      rdfs:label "AssociationStructure" .

<http://open-services.net/ns/sysmlv2#ResultExpressionMembership>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>ResultExpressionMembership</code> is a <code>FeatureMembership</code> that indicates that the <code>ownedResultExpression</code> provides the result values for the <code>Function</code> or <code>Expression</code> that owns it. The owning <code>Function</code> or <code>Expression</code> must contain a <code>BindingConnector</code> between the <code>result</code> <code>parameter</code> of the <code>ownedResultExpression</code> and the <code>result</code> <code>parameter</code> of the owning <code>Function</code> or <code>Expression</code>.</p>

owningType.oclIsKindOf(Function) or owningType.oclIsKindOf(Expression)""" ;
      rdfs:label "ResultExpressionMembership" .

<http://open-services.net/ns/sysmlv2#definitionOwnedAnalysisCase>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>AnalysisCaseUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.</p>" ;
      rdfs:label "definitionOwnedAnalysisCase" .

<http://open-services.net/ns/sysmlv2#membershipMembershipOwningNamespace>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Namespace</code> of which the <code>memberElement</code> becomes a <cpde>member due to this <code>Membership</code>.</cpde></p>
""" ;
      rdfs:label "membershipMembershipOwningNamespace" .

<http://open-services.net/ns/sysmlv2#renderingDefinitionRendering>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>usages</code> of a <code>RenderingDefinition</code> that are <code>RenderingUsages</code>.</p>" ;
      rdfs:label "renderingDefinitionRendering" .

<http://open-services.net/ns/sysmlv2#featureMembershipOwnedMemberFeature>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Feature</code> that this <code>FeatureMembership</code> relates to its <code>owningType</code>, making it an <code>ownedFeature</code> of the <code>owningType</code>.</p>
""" ;
      rdfs:label "featureMembershipOwnedMemberFeature" .

<http://open-services.net/ns/sysmlv2#MembershipImport>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>MembershipImport</code> is an <code>Import</code> that imports its <code>importedMembership</code> into the <code>importOwningNamespace</code>. If <code>isRecursive = true</code> and the <code>memberElement</code> of the <code>importedMembership</code> is a <code>Namespace</code>, then the equivalent of a recursive <code>NamespaceImport</code> is also performed on that <code>Namespace</code>.</p>

importedElement = importedMembership.memberElement""" ;
      rdfs:label "MembershipImport" .

<http://open-services.net/ns/sysmlv2#useCaseUsageUseCaseDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>UseCaseDefinition</code> that is the <code>definition</code> of this <code>UseCaseUsage</code>.</p>" ;
      rdfs:label "useCaseUsageUseCaseDefinition" .

<http://open-services.net/ns/sysmlv2#importVisibility>
      a       rdf:Property ;
      rdfs:comment """<p>The visibility level of the imported <code>members</code> from this Import relative to the <code>importOwningNamespace</code>.</p>
""" ;
      rdfs:label "importVisibility" .

<http://open-services.net/ns/sysmlv2#definitionOwnedRequirement>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>RequirementUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.</p>" ;
      rdfs:label "definitionOwnedRequirement" .

<http://open-services.net/ns/sysmlv2#usageNestedPort>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>PortUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>.</p>" ;
      rdfs:label "usageNestedPort" .

<http://open-services.net/ns/sysmlv2#PortUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>PortUsage</code> is a usage of a <code>PortDefinition</code>. A <code>PortUsage</code> itself as well as all its <code>nestedUsages</code> must be referential (non-composite).</p>
nestedUsage->
    reject(oclIsKindOf(PortUsage))->
    forAll(not isComposite)
specializesFromLibrary('Ports::ports')
isComposite and owningType <> null and
(owningType.oclIsKindOf(PortDefinition) or
 owningType.oclIsKindOf(PortUsage)) implies
    specializesFromLibrary('Ports::Port::subports')
owningType = null or
not owningType.oclIsKindOf(PortDefinition) and
not owningType.oclIsKindOf(PortUsage) implies
    isReference""" ;
      rdfs:label "PortUsage" .

<http://open-services.net/ns/sysmlv2#usageNestedReference>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ReferenceUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>.</p> 
""" ;
      rdfs:label "usageNestedReference" .

<http://open-services.net/ns/sysmlv2#ConstraintDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>ConstraintDefinition</code> is an <code>OccurrenceDefinition</code> that is also a <code>Predicate</code> that defines a constraint that may be asserted to hold on a system or part of a system.</p>


specializesFromLibrary('Constraints::ConstraintCheck')""" ;
      rdfs:label "ConstraintDefinition" .

<http://open-services.net/ns/sysmlv2#SelectExpression>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>SelectExpression</code> is an <code>OperatorExpression</code> whose operator is <code>\"select\"</code>, which resolves to the <code>Function</code> <em><code>ControlFunctions::select</code></em> from the Kernel Functions Library.</p>
operator = 'select'""" ;
      rdfs:label "SelectExpression" .

<http://open-services.net/ns/sysmlv2#transitionFeatureMembershipKind>
      a       rdf:Property ;
      rdfs:comment "<p>Whether this <code>TransitionFeatureMembership </code> is for a <code>trigger</code>, <code>guard</code> or <code>effect</code>.</p>" ;
      rdfs:label "transitionFeatureMembershipKind" .

<http://open-services.net/ns/sysmlv2#PortConjugation>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>PortConjugation</code> is a <code>Conjugation</code> <code>Relationship</code> between a <code>PortDefinition</code> and its corresponding <code>ConjugatedPortDefinition</code>. As a result of this <code>Relationship</code>, the <code>ConjugatedPortDefinition</code> inherits all the <code>features</code> of the original <code>PortDefinition</code>, but input <code>flows</code> of the original <code>PortDefinition</code> become outputs on the <code>ConjugatedPortDefinition</code> and output <code>flows</code> of the original <code>PortDefinition</code> become inputs on the <code>ConjugatedPortDefinition</code>.</code></p>
""" ;
      rdfs:label "PortConjugation" .

<http://open-services.net/ns/sysmlv2#Succession>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>Succession</code> is a binary <code>Connector</code> that requires its <code>relatedFeatures</code> to happen separately in time.</p>

specializesFromLibrary('Occurences::happensBeforeLinks')
transitionStep =
    if owningNamespace.oclIsKindOf(Step) and 
        owningNamespace.oclAsType(Step).
            specializesFromLibrary('TransitionPerformances::TransitionPerformance') then
        owningNamespace.oclAsType(Step)
    else null
    endif
triggerStep =
    if transitionStep = null or 
       transitionStep.ownedFeature.size() < 2 or
       not transitionStep.ownedFeature->at(2).oclIsKindOf(Step) 
    then Set{}
    else Set{transitionStep.ownedFeature->at(2).oclAsType(Step)}
    endif
effectStep =
    if transitionStep = null or 
       transitionStep.ownedFeature.size() < 4 or
       not transitionStep.ownedFeature->at(4).oclIsKindOf(Step) 
    then Set{}
    else Set{transitionStep.ownedFeature->at(4).oclAsType(Step)}
    endif
guardExpression =
    if transitionStep = null or 
       transitionStep.ownedFeature.size() < 3 or
       not transitionStep.ownedFeature->at(3).oclIsKindOf(Expression) 
    then Set{}
    else Set{transitionStep.ownedFeature->at(3).oclAsType(Expression)}
    endif""" ;
      rdfs:label "Succession" .

<http://open-services.net/ns/sysmlv2#MetadataDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>MetadataDefinition</code> is an <code>ItemDefinition</code> that is also a <code>Metaclass</code>.</p>
specializesFromLibrary('Metadata::MetadataItem')""" ;
      rdfs:label "MetadataDefinition" .

<http://open-services.net/ns/sysmlv2#connectionDefinitionConnectionEnd>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Usages</code> that define the things related by the <code>ConnectionDefinition</code>.</p>" ;
      rdfs:label "connectionDefinitionConnectionEnd" .

<http://open-services.net/ns/sysmlv2#transitionUsageGuardExpression>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Expressions</code> that define the guards of this <code>TransitionUsage</code>, which are the <code>ownedFeatures</code> of the <code>TransitionUsage</code> related to it by <code>TransitionFeatureMemberships</code> with <code>kind = guard</code>, which must all be <code>Expressions</code>.</p>" ;
      rdfs:label "transitionUsageGuardExpression" .

<http://open-services.net/ns/sysmlv2#definitionOwnedUseCase>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>UseCaseUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.</p>" ;
      rdfs:label "definitionOwnedUseCase" .

<http://open-services.net/ns/sysmlv2#IfActionUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>IfActionUsage</code> is an <code>ActionUsage</code> that specifies that the <code>thenAction</code> <code>ActionUsage</code> should be performed if the result of the <code>ifArgument</code> <code>Expression</code> is true. It may also optionally specify an <code>elseAction</code> <code>ActionUsage</code> that is performed if the result of the <code>ifArgument</code> is false.</p>
thenAction = 
    let parameter : Feature = inputParameter(2) in
    if parameter <> null and parameter.oclIsKindOf(ActionUsage) then
        parameter.oclAsType(ActionUsage)
    else
        null
    endif
isSubactionUsage() implies
    specializesFromLibrary('Actions::Action::ifSubactions')
if elseAction = null then
    specializesFromLibrary('Actions::ifThenActions')
else
    specializesFromLibrary('Actions::ifThenElseActions')
endif
ifArgument = 
    let parameter : Feature = inputParameter(1) in
    if parameter <> null and parameter.oclIsKindOf(Expression) then
        parameter.oclAsType(Expression)
    else
        null
    endif
elseAction = 
    let parameter : Feature = inputParameter(3) in
    if parameter <> null and parameter.oclIsKindOf(ActionUsage) then
        parameter.oclAsType(ActionUsage)
    else
        null
    endif
inputParameters()->size() >= 2""" ;
      rdfs:label "IfActionUsage" .

<http://open-services.net/ns/sysmlv2#namespaceMembership>
      a       rdf:Property ;
      rdfs:comment """<p>All <code>Memberships</code> in this <code>Namespace</code>, including (at least) the union of <code>ownedMemberships</code> and <code>importedMemberships</code>.</p>
""" ;
      rdfs:label "namespaceMembership" .

<http://open-services.net/ns/sysmlv2#ifActionUsageThenAction>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ActionUsage</code> that is to be performed if the result of the <code>ifArgument</code> is true. It is the second <code>parameter<code> of the <code>IfActionUsage</code>.</p> 
""" ;
      rdfs:label "ifActionUsageThenAction" .

<http://open-services.net/ns/sysmlv2#definitionOwnedView>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ViewUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.</p>" ;
      rdfs:label "definitionOwnedView" .

<http://open-services.net/ns/sysmlv2#TypeFeaturing>
      a       rdfs:Class ;
      rdfs:comment "<p>A <code>TypeFeaturing</code> is a <code>Featuring</code> <code>Relationship</code> in which the <code>featureOfType</code> is the <code>source</code> and the <code>featuringType</code> is the <code>target</code>.</p>" ;
      rdfs:label "TypeFeaturing" .

<http://open-services.net/ns/sysmlv2#EndFeatureMembership>
      a       rdfs:Class ;
      rdfs:comment """<p><code>EndFeatureMembership</code> is a <code>FeatureMembership</code> that requires its <code>memberFeature</code> be owned and have <code>isEnd = true</code>.</p>

ownedMemberFeature.isEnd""" ;
      rdfs:label "EndFeatureMembership" .

<http://open-services.net/ns/sysmlv2#conjugationConjugatedType>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Type</code> that is the result of applying <code>Conjugation</code> to the <code>originalType</code>.</p>
""" ;
      rdfs:label "conjugationConjugatedType" .

<http://open-services.net/ns/sysmlv2#elementOwnedRelationship>
      a       rdf:Property ;
      rdfs:comment "<p>The Relationships for which this Element is the <tt>owningRelatedElement</tt>.</p>" ;
      rdfs:label "elementOwnedRelationship" .

<http://open-services.net/ns/sysmlv2#elementOwningRelationship>
      a       rdf:Property ;
      rdfs:comment """<p>The Relationship for which this Element is an <tt>ownedRelatedElement</tt>, if any.</p>
""" ;
      rdfs:label "elementOwningRelationship" .

<http://open-services.net/ns/sysmlv2#featureOwnedSubsetting>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ownedSpecializations</code> of this <code>Feature</code> that are <code>Subsettings</code>, for which the <code>Feature</code> is the <code>subsettingFeature</code>.</p>
""" ;
      rdfs:label "featureOwnedSubsetting" .

<http://open-services.net/ns/sysmlv2#metadataUsageMetadataDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>MetadataDefinition</code> that is the <code>definition</code> of this <code>MetadataUsage</code>.</p>" ;
      rdfs:label "metadataUsageMetadataDefinition" .

<http://open-services.net/ns/sysmlv2#AttributeUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>AttributeUsage</code> is a <code>Usage</code> whose type is a <code>DataType</code>. Nominally, if the type is an <code>AttributeDefinition</code>, an <code>AttributeUsage</code> is a usage of a <code>AttributeDefinition</code> to represent the value of some system quality or characteristic. However, other kinds of kernel <code>DataTypes</code> are also allowed, to permit use of <code>DataTypes</code> from the Kernel Model Libraries. An <code>AttributeUsage</code> itself as well as all its nested <code>features</code> must be referential (non-composite).</p>

<p>An <code>AttributeUsage</code> must specialize, directly or indirectly, the base <code>Feature</code> <code><em>Base::dataValues</em></code> from the Kernel Semantic Library.</p>
isReference
feature->forAll(not isComposite)
specializesFromLibrary('Base::dataValues')""" ;
      rdfs:label "AttributeUsage" .

<http://open-services.net/ns/sysmlv2#usageNestedUseCase>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>UseCaseUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>.</p>
""" ;
      rdfs:label "usageNestedUseCase" .

<http://open-services.net/ns/sysmlv2#annotatingElementAnnotation>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Annotations</code> that relate this <code>AnnotatingElement</code> to its <code>annotatedElements</code>.</p>
""" ;
      rdfs:label "annotatingElementAnnotation" .

<http://open-services.net/ns/sysmlv2#unioningUnioningType>
      a       rdf:Property ;
      rdfs:comment """<p><code>Type</code> that partly determines interpretations of <code>typeUnioned</code>, as described in <code>Type::unioningType</code>.</p>
""" ;
      rdfs:label "unioningUnioningType" .

<http://open-services.net/ns/sysmlv2#Predicate>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>Predicate</code> is a <code>Function</code> whose <code>result</code> <code>parameter</code> has type <code><em>Boolean</em></code> and multiplicity <code>1..1</code>.</p>

specializesFromLibrary('Performances::BooleanEvaluation')""" ;
      rdfs:label "Predicate" .

<http://open-services.net/ns/sysmlv2#connectorConnectorEnd>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>endFeatures</code> of a <code>Connector</code>, which redefine the <code>endFeatures</code> of the <code>associations</code> of the <code>Connector</code>. The <code>connectorEnds</code> determine via <code>ReferenceSubsetting</code> <code>Relationships</code> which <code>Features</code> are related by the <code>Connector</code>.</p>" ;
      rdfs:label "connectorConnectorEnd" .

<http://open-services.net/ns/sysmlv2#satisfyRequirementUsageSatisfyingFeature>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Feature</code> that represents the actual subject that is asserted to satisfy the <code>satisfiedRequirement</code>. The <code>satisfyingFeature</code> is bound to the <code>subjectParameter</code> of the <code>SatisfyRequirementUsage</code>.</p>" ;
      rdfs:label "satisfyRequirementUsageSatisfyingFeature" .

<http://open-services.net/ns/sysmlv2#typeDirectedFeature>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>features</code> of this <code>Type</code> that have a non-null <code>direction</code>.</p>
""" ;
      rdfs:label "typeDirectedFeature" .

<http://open-services.net/ns/sysmlv2#MetadataAccessExpression>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>MetadataAccessExpression</code> is an <code>Expression</code> whose <code>result</code> is a sequence of instances of <code>Metaclasses</code> representing all the <code>MetadataFeature</code> annotations of the <code>referencedElement</code>. In addition, the sequence includes an instance of the reflective <code>Metaclass</code> corresponding to the MOF class of the <code>referencedElement</code>, with values for all the abstract syntax properties of the <code>referencedElement</code>.</p>
specializesFromLibrary('Performances::metadataAccessEvaluations')""" ;
      rdfs:label "MetadataAccessExpression" .

<http://open-services.net/ns/sysmlv2#multiplicityRangeLowerBound>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Expression</code> whose result provides the lower bound of the <code>MultiplicityRange</code>. If no <code>lowerBound</code> <code>Expression</code> is given, then the lower bound shall have the same value as the upper bound, unless the upper bound is unbounded (<code>*</code>), in which case the lower bound shall be 0.</p>
""" ;
      rdfs:label "multiplicityRangeLowerBound" .

<http://open-services.net/ns/sysmlv2#featureIsDerived>
      a       rdf:Property ;
      rdfs:comment """<p>Whether the values of this <code>Feature</code> can always be computed from the values of other <code>Features</code>.</p>
""" ;
      rdfs:label "featureIsDerived" .

<http://open-services.net/ns/sysmlv2#occurrenceUsageIsIndividual>
      a       rdf:Property ;
      rdfs:comment "<p>Whether this <code>OccurrenceUsage</code> represents the usage of the specific individual (or portion of it) represented by its <code>individualDefinition</code>.</p>" ;
      rdfs:label "occurrenceUsageIsIndividual" .

<http://open-services.net/ns/sysmlv2#usageNestedUsage>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Usages</code> that are <code>ownedFeatures</code> of this <code>Usage</code>.</p>" ;
      rdfs:label "usageNestedUsage" .

<http://open-services.net/ns/sysmlv2#Interaction>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>Interaction</code> is a <code>Behavior</code> that is also an <code>Association</code>, providing a context for multiple objects that have behaviors that impact one another.</p>
""" ;
      rdfs:label "Interaction" .

<http://open-services.net/ns/sysmlv2#elementDeclaredName>
      a       rdf:Property ;
      rdfs:comment """<p>The declared name of this <code>Element</code>.</p>
""" ;
      rdfs:label "elementDeclaredName" .

<http://open-services.net/ns/sysmlv2#DecisionNode>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>DecisionNode</code> is a <code>ControlNode</code> that makes a selection from its outgoing <code>Successions</code>.</p>
targetConnector->selectByKind(Succession)->size() <= 1
sourceConnector->selectAsKind(Succession)->
    collect(connectorEnd->at(2))->
    forAll(targetMult |
        multiplicityHasBounds(targetMult, 0, 1))
specializesFromLibrary('Actions::Action::decisions')
sourceConnector->selectByKind(Succession)->
    forAll(subsetsChain(self, 
        resolveGlobal('ControlPerformances::MergePerformance::outgoingHBLink')))""" ;
      rdfs:label "DecisionNode" .

<http://open-services.net/ns/sysmlv2#CaseDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>CaseDefinition</code> is a <code>CalculationDefinition</code> for a process, often involving collecting evidence or data, relative to a subject, possibly involving the collaboration of one or more other actors, producing a result that meets an objective.</p>
objectiveRequirement = 
    let objectives: OrderedSet(RequirementUsage) = 
        featureMembership->
            selectByKind(ObjectiveMembership).
            ownedRequirement in
    if objectives->isEmpty() then null
    else objectives->first().ownedObjectiveRequirement
    endif
featureMembership->
    selectByKind(ObjectiveMembership)->
    size() <= 1
subjectParameter =
    let subjectMems : OrderedSet(SubjectMembership) = 
        featureMembership->selectByKind(SubjectMembership) in
    if subjectMems->isEmpty() then null
    else subjectMems->first().ownedSubjectParameter
    endif
actorParameter = featureMembership->
    selectByKind(ActorMembership).
    ownedActorParameter
featureMembership->selectByKind(SubjectMembership)->size() <= 1
input->notEmpty() and input->first() = subjectParameter
specializesFromLibrary('Cases::Case')""" ;
      rdfs:label "CaseDefinition" .

<http://open-services.net/ns/sysmlv2#forLoopActionUsageLoopVariable>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ownedFeature</code> of this <co>ForLoopActionUsage</code> that acts as the loop variable, which is assigned the successive values of the input sequence on each iteration. It is the <code>ownedFeature</code> that redefines <em><code>ForLoopAction::var</code></em>.</p> " ;
      rdfs:label "forLoopActionUsageLoopVariable" .

<http://open-services.net/ns/sysmlv2#stateUsageStateDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Behaviors</code> that are the <code>types</code> of this <code>StateUsage</code>. Nominally, these would be <code>StateDefinitions</code>, but kernel <code>Behaviors</code> are also allowed, to permit use of <code>Behaviors</code> from the Kernel Model Libraries.</p>" ;
      rdfs:label "stateUsageStateDefinition" .

<http://open-services.net/ns/sysmlv2#WhileLoopActionUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>WhileLoopActionUsage</code> is a <code>LoopActionUsage</code> that specifies that the <code>bodyAction</code> <code>ActionUsage</code> should be performed repeatedly while the result of the <code>whileArgument</code> <code>Expression</code> is true or until the result of the <code>untilArgument</code> <code>Expression</code> (if provided) is true. The <code>whileArgument</code> <code>Expression</code> is evaluated before each (possible) performance of the <code>bodyAction</code>, and the <code>untilArgument</code> <code>Expression</code> is evaluated after each performance of the <code>bodyAction</code>.</p>
isSubactionUsage() implies
    specializesFromLibrary('Actions::Action::whileLoops')
untilArgument =
    let parameter : Feature = inputParameter(3) in
    if parameter <> null and parameter.oclIsKindOf(Expression) then
        parameter.oclAsType(Expression)
    else
        null
    endif

specializesFromLibrary('Actions::whileLoopActions')
whileArgument =
    let parameter : Feature = inputParameter(1) in
    if parameter <> null and parameter.oclIsKindOf(Expression) then
        parameter.oclAsType(Expression)
    else
        null
    endif

inputParameters()->size() >= 2""" ;
      rdfs:label "WhileLoopActionUsage" .

<http://open-services.net/ns/sysmlv2#typeFeatureMembership>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>FeatureMemberships</code> for <code>features</code> of this <code>Type</code>, which include all <code>ownedFeatureMemberships</code> and those <code>inheritedMemberships</code> that are <code>FeatureMemberships</code> (but does <em>not</em> include any <code>importedMemberships</code>).</p>
""" ;
      rdfs:label "typeFeatureMembership" .

<http://open-services.net/ns/sysmlv2#ExhibitStateUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>ExhibitStateUsage</code> is a <code>StateUsage</code> that represents the exhibiting of a <code>StateUsage</code>. Unless it is the <code>StateUsage</code> itself, the <code>StateUsage</code> to be exhibited is related to the <code>ExhibitStateUsage</code> by a <code>ReferenceSubsetting</code> <code>Relationship</code>. An <code>ExhibitStateUsage</code> is also a <code>PerformActionUsage</code>, with its <code>exhibitedState</code> as the <code>performedAction</code>.</p>

owningType <> null and
(owningType.oclIsKindOf(PartDefinition) or
 owningType.oclIsKindOf(PartUsage)) implies
    specializesFromLibrary('Parts::Part::exhibitedStates')
ownedReferenceSubsetting <> null implies
    ownedReferenceSubsetting.referencedFeature.oclIsKindOf(StateUsage)""" ;
      rdfs:label "ExhibitStateUsage" .

<http://open-services.net/ns/sysmlv2#ViewDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>ViewDefinition</code> is a <code>PartDefinition</code> that specifies how a view artifact is constructed to satisfy a <code>viewpoint</code>. It specifies a <code>viewConditions</code> to define the model content to be presented and a <code>viewRendering</code> to define how the model content is presented.</p>
view = usage->selectByKind(ViewUsage)
satisfiedViewpoint = ownedRequirement->
    selectByKind(ViewpointUsage)->
    select(isComposite)
viewRendering =
    let renderings: OrderedSet(ViewRenderingMembership) =
        featureMembership->selectByKind(ViewRenderingMembership) in
    if renderings->isEmpty() then null
    else renderings->first().referencedRendering
    endif
viewCondition = ownedMembership->
    selectByKind(ElementFilterMembership).
    condition
featureMembership->
    selectByKind(ViewRenderingMembership)->
    size() <= 1
specializesFromLibrary('Views::View')""" ;
      rdfs:label "ViewDefinition" .

<http://open-services.net/ns/sysmlv2#usageNestedAllocation>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>AllocationUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>.</p>" ;
      rdfs:label "usageNestedAllocation" .

<http://open-services.net/ns/sysmlv2#requirementUsageReqId>
      a       rdf:Property ;
      rdfs:comment "<p>An optional modeler-specified identifier for this <code>RequirementUsage</code> (used, e.g., to link it to an original requirement text in some source document), which is the <code>declaredShortName</code> for the <code>RequirementUsage</code>.</p>" ;
      rdfs:label "requirementUsageReqId" .

<http://open-services.net/ns/sysmlv2#LifeClass>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>LifeClass</code> is a <code>Class</code> that specializes both the <code>Class</code> <code><em>Occurrences::Life</em></code> from the Kernel Semantic Library and a single <code>OccurrenceDefinition</code>, and has a multiplicity of 0..1. This constrains the <code>OccurrenceDefinition</code> being specialized to have at most one instance that is a complete <code>Life</code>.</p>

specializesFromLibrary('Occurrences::Life')
multiplicity <> null and
multiplicity.specializesFromLibrary('Base::zeroOrOne')
specializes(individualDefinition)
isSufficient""" ;
      rdfs:label "LifeClass" .

<http://open-services.net/ns/sysmlv2#typeIsAbstract>
      a       rdf:Property ;
      rdfs:comment """<p>Indicates whether instances of this <code>Type</code> must also be instances of at least one of its specialized <code>Types</code>.</p>
""" ;
      rdfs:label "typeIsAbstract" .

<http://open-services.net/ns/sysmlv2#RequirementConstraintMembership>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>RequirementConstraintMembership</code> is a <code>FeatureMembership</code> for an assumed or required <code>ConstraintUsage</code> of a <code>RequirementDefinition</code> or <code>RequirementUsage<code>.</p>
referencedConstraint =
    let reference : ReferenceSubsetting = 
        ownedConstraint.ownedReferenceSubsetting in
    if reference = null then ownedConstraint
    else if not reference.referencedFeature.oclIsKindOf(ConstraintUsage) then null 
    else reference.referencedFeature.oclAsType(ConstraintUsage)
    endif endif
owningType.oclIsKindOf(RequirementDefinition) or
owningType.oclIsKindOf(RequirementUsage)
ownedConstraint.isComposite""" ;
      rdfs:label "RequirementConstraintMembership" .

<http://open-services.net/ns/sysmlv2#analysisCaseUsageResultExpression>
      a       rdf:Property ;
      rdfs:comment "<p>An <code>Expression</code> used to compute the <code>result</code> of the <code>AnalysisCaseUsage</code>, owned via a <code>ResultExpressionMembership</code>.</p>" ;
      rdfs:label "analysisCaseUsageResultExpression" .

<http://open-services.net/ns/sysmlv2#typeFeaturingFeatureOfType>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Feature</code> that is featured by the <code>featuringType</code>. It is the <code>source</code> of the <code>TypeFeaturing</code>.</p>" ;
      rdfs:label "typeFeaturingFeatureOfType" .

<http://open-services.net/ns/sysmlv2#stateDefinitionEntryAction>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ActionUsage</code> of this <code>StateDefinition</code> to be performed on entry to the state defined by the <code>StateDefinition</code>. It is the owned <code>ActionUsage</code> related to the <code>StateDefinition</code> by a <code>StateSubactionMembership</code>  with <code>kind = entry</code>.</p>" ;
      rdfs:label "stateDefinitionEntryAction" .

<http://open-services.net/ns/sysmlv2#OccurrenceUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>OccurrenceUsage</code> is a <code>Usage</code> whose <code>types</code> are all <code>Classes</code>. Nominally, if a <code>type</code> is an <code>OccurrenceDefinition</code>, an <code>OccurrenceUsage</code> is a <code>Usage</code> of that <code>OccurrenceDefinition</code> within a system. However, other types of Kernel <code>Classes</code> are also allowed, to permit use of <code>Classes</code> from the Kernel Model Libraries.</p>

individualDefinition =
    let individualDefinitions : OrderedSet(OccurrenceDefinition) = 
        occurrenceDefinition->
            selectByKind(OccurrenceDefinition)->
            select(isIndividual) in
    if individualDefinitions->isEmpty() then null
    else individualDefinitions->first() endif
isIndividual implies individualDefinition <> null
specializesFromLibrary('Occurrences::occurrences')
isComposite and
owningType <> null and
(owningType.oclIsKindOf(Class) or
 owningType.oclIsKindOf(OccurrenceUsage) or
 owningType.oclIsKindOf(Feature) and
    owningType.oclAsType(Feature).type->
        exists(oclIsKind(Class))) implies
    specializesFromLibrary('Occurrences::Occurrence::suboccurrences')
occurrenceDefinition->
    selectByKind(OccurrenceDefinition)->
    select(isIndividual).size() <= 1
portionKind <> null implies
    occurrenceDefinition->forAll(occ | 
        featuringType->exists(specializes(occ)))""" ;
      rdfs:label "OccurrenceUsage" .

<http://open-services.net/ns/sysmlv2#RenderingDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>RenderingDefinition</code> is a <code>PartDefinition</code> that defines a specific rendering of the content of a model view (e.g., symbols, style, layout, etc.).</p>
rendering = usages->selectByKind(RenderingUsage)
specializesFromLibrary('Views::Rendering')""" ;
      rdfs:label "RenderingDefinition" .

<http://open-services.net/ns/sysmlv2#typeUnioningType>
      a       rdf:Property ;
      rdfs:comment """<p>The interpretations of a <code>Type</code> with <code>unioningTypes</code> are asserted to be the same as those of all the <code>unioningTypes</code> together, which are the <code>Types</code> derived from the <code>unioningType</code> of the <code>ownedUnionings</code> of this <code>Type</code>. For example, a <code>Classifier</code> for people might be the union of <code>Classifiers</code> for all the sexes. Similarly, a feature for people&#39;s children might be the union of features dividing them in the same ways as people in general.</p>
""" ;
      rdfs:label "typeUnioningType" .

<http://open-services.net/ns/sysmlv2#CalculationUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>CalculationUsage</code> is an <code>ActionUsage</code> that is also an <code>Expression</code>, and, so, is typed by a <code>Function</code>. Nominally, if the <code>type</code> is a <code>CalculationDefinition</code>, a <code>CalculationUsage</code> is a <code>Usage</code> of that <code>CalculationDefinition</code> within a system. However, other kinds of kernel <code>Functions</code> are also allowed, to permit use of <code>Functions</code> from the Kernel Model Libraries.</p>
specializesFromLibrary('Calculations::calculations')
owningType <> null and
(owningType.oclIsKindOf(CalculationDefinition) or
 owningType.oclIsKindOf(CalculationUsage)) implies
    specializesFromLibrary('Calculations::Calculation::subcalculations')""" ;
      rdfs:label "CalculationUsage" .

<http://open-services.net/ns/sysmlv2#assignmentActionUsageReferent>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Feature</code> whose value is to be set.</p>" ;
      rdfs:label "assignmentActionUsageReferent" .

<http://open-services.net/ns/sysmlv2#LiteralBoolean>
      a       rdfs:Class ;
      rdfs:comment """<p><code>LiteralBoolean</code> is a <code>LiteralExpression</code> that provides a <code><em>Boolean</em></code> value as a result. Its <code>result</code> <code>parameter</code> must have type <code><em>Boolean</em></code>.</p>

specializesFromLibrary('Performances::literalBooleanEvaluations')""" ;
      rdfs:label "LiteralBoolean" .

<http://open-services.net/ns/sysmlv2#LiteralRational>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>LiteralRational</code> is a <code>LiteralExpression</code> that provides a <code><em>Rational</em></code> value as a result. Its <code>result</code> <code>parameter</code> must have the type <code><em>Rational</em></code>.</p>

specializesFromLibrary('Performances::literalRationalEvaluations')""" ;
      rdfs:label "LiteralRational" .

<http://open-services.net/ns/sysmlv2#typeOwnedEndFeature>
      a       rdf:Property ;
      rdfs:comment """<p>All <code>endFeatures</code> of this <code>Type</code> that are <code>ownedFeatures</code>.</p>
""" ;
      rdfs:label "typeOwnedEndFeature" .

<http://open-services.net/ns/sysmlv2#elementOwningNamespace>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Namespace</code> that owns this <code>Element</code>, which is the <code>membershipOwningNamespace</code> of the <code>owningMembership</code> of this <code>Element</code>, if any.</p>
""" ;
      rdfs:label "elementOwningNamespace" .

<http://open-services.net/ns/sysmlv2#analysisCaseDefinitionAnalysisAction>
      a       rdf:Property ;
      rdfs:comment "<p>The composite <code>actions</code> of the <code>AnalysisCaseDefinition</code> that are defined as <code>AnalysisActions</code>.</p>" ;
      rdfs:label "analysisCaseDefinitionAnalysisAction" .

<http://open-services.net/ns/sysmlv2#libraryPackageIsStandard>
      a       rdf:Property ;
      rdfs:comment "<p>Whether this <code>LibraryPackage</code> contains a standard library model. This should only be set to true for <code>LibraryPackages</code> in the standard Kernel Model Libraries or in normative model libraries for a language built on KerML.</p>" ;
      rdfs:label "libraryPackageIsStandard" .

<http://open-services.net/ns/sysmlv2#typeFeature>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ownedMemberFeatures</code> of the <code>featureMemberships</code> of this <code>Type</code>.</p>
""" ;
      rdfs:label "typeFeature" .

<http://open-services.net/ns/sysmlv2#viewDefinitionView>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>usages</code> of this <code>ViewDefinition</code> that are <code>ViewUsages</code>.</p>" ;
      rdfs:label "viewDefinitionView" .

<http://open-services.net/ns/sysmlv2#namespaceImportImportedNamespace>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Namespace</code> whose visible <code>Memberships</code> are imported by this <code>NamespaceImport</code>.</p>
""" ;
      rdfs:label "namespaceImportImportedNamespace" .

<http://open-services.net/ns/sysmlv2#Documentation>
      a       rdfs:Class ;
      rdfs:comment """<p><code>Documentation</code> is a <code>Comment</code> that specifically documents a <code>documentedElement</code>, which must be its <code>owner</code>.</p>
""" ;
      rdfs:label "Documentation" .

<http://open-services.net/ns/sysmlv2#ForkNode>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>ForkNode</code> is a <code>ControlNode</code> that must be followed by successor <code>Actions</code> as given by all its outgoing <code>Successions</code>.</p>
targetConnector->selectByKind(Succession)->size() <= 1
specializesFromLibrary('Actions::Action::forks')""" ;
      rdfs:label "ForkNode" .

<http://open-services.net/ns/sysmlv2#documentationDocumentedElement>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Element</code> that is documented by this <code>Documentation</code>.</p>
""" ;
      rdfs:label "documentationDocumentedElement" .

<http://open-services.net/ns/sysmlv2#enumerationUsageEnumerationDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The single EnumerationDefinition that is the type of this EnumerationUsage.</p>" ;
      rdfs:label "enumerationUsageEnumerationDefinition" .

<http://open-services.net/ns/sysmlv2#Annotation>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>Annotation</code> is a Relationship between an <code>AnnotatingElement</code> and the <code>Element</code> that is annotated by that <code>AnnotatingElement</code>.</p>
""" ;
      rdfs:label "Annotation" .

<http://open-services.net/ns/sysmlv2#multiplicityRangeBound>
      a       rdf:Property ;
      rdfs:comment "<p>The owned <code>Expressions</code> of the <code>MultiplicityRange</code> whose results provide its bounds. These must be the only <code>ownedMembers</code> of the <code>MultiplicityRange</code>.</p>" ;
      rdfs:label "multiplicityRangeBound" .

<http://open-services.net/ns/sysmlv2#FeatureMembership>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>FeatureMembership</code> is an <code>OwningMembership</code> between a <code>Feature</code> in an <code>owningType</code> that is also a <code>Featuring</code> <code>Relationship<code> between the <code>Feature</code> and the <code>Type</code>, in which the <code>featuringType</code> is the <code>source</code> and the <code>featureOfType</code> is the <code>target</code>. A <code>FeatureMembership</code> is always owned by its <code>owningType</code>, which is the <code>featuringType</code> for the <code>FeatureMembership</code> considered as a <code>Featuring</code>.</p>
""" ;
      rdfs:label "FeatureMembership" .

<http://open-services.net/ns/sysmlv2#Conjugation>
      a       rdfs:Class ;
      rdfs:comment """<p><code>Conjugation</code> is a <code>Relationship</code> between two types in which the <code>conjugatedType</code> inherits all the <code>Features</code> of the <code>originalType</code>, but with all <code>input</code> and <code>output</code> <code>Features</code> reversed. That is, any <code>Features</code> with a <code>direction</code> <em>in</em> relative to the <code>originalType</code> are considered to have an effective <code>direction</code> of <em>out</em> relative to the <code>conjugatedType</code> and, similarly, <code>Features</code> with <code>direction</code> <em>out</em> in the <code>originalType</code> are considered to have an effective <code>direction</code> of <em>in</em> in the <code>conjugatedType</code>. <code>Features</code> with <code>direction</code> <em>inout</em>, or with no <code>direction</code>, in the <code>originalType</code>, are inherited without change.</p>

<p>A <code>Type</code> may participate as a <code>conjugatedType</code> in at most one <code>Conjugation</code> relationship, and such a <code>Type</code> may not also be the <code>specific</code> <code>Type</code> in any <code>Specialization</code> relationship.</p>
""" ;
      rdfs:label "Conjugation" .

<http://open-services.net/ns/sysmlv2#loopActionUsageBodyAction>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ActionUsage</code> to be performed repeatedly by the <code>LoopActionUsage</code>. It is the second <code>parameter</code> of the <code>LoopActionUsage</code>.</p> 
""" ;
      rdfs:label "loopActionUsageBodyAction" .

<http://open-services.net/ns/sysmlv2#SatisfyRequirementUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>SatisfyRequirementUsage</code> is an <code>AssertConstraintUsage</code> that asserts, by default, that a satisfied <code>RequirementUsage</code> is true for a specific <code>satisfyingFeature</code>, or, if <code>isNegated = true</code>, that the <code>RequirementUsage</code> is false. The satisfied <code>RequirementUsage</code> is related to the <code>SatisfyRequirementUsage</code> by a <code>ReferenceSubsetting</code> <code>Relationship</code>.</p>
satisfyingFeature =
    let bindings: BindingConnector = ownedMember->
        selectByKind(BindingConnector)->
        select(b | b.relatedElement->includes(subjectParameter)) in
    if bindings->isEmpty() or 
       bindings->first().relatedElement->exits(r | r <> subjectParameter) 
    then null
    else bindings->first().relatedElement->any(r | r <> subjectParameter)
    endif
ownedMember->selectByKind(BindingConnector)->
    select(b |
        b.relatedElement->includes(subjectParameter) and
        b.relatedElement->exists(r | r <> subjectParameter))->
    size() = 1
ownedReferenceSubsetting <> null implies
    ownedReferenceSubsetting.referencedFeature.oclIsKindOf(RequirementUsage)""" ;
      rdfs:label "SatisfyRequirementUsage" .

<http://open-services.net/ns/sysmlv2#owningMembershipOwnedMemberName>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>name</code> of the <code>ownedMemberElement</code>.</p>
""" ;
      rdfs:label "owningMembershipOwnedMemberName" .

<http://open-services.net/ns/sysmlv2#typeOwnedDifferencing>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ownedRelationships</code> of this <code>Type</code> that are <code>Differencings</code>, having this <code>Type</code> as their <code>typeDifferenced</code>.</p>
""" ;
      rdfs:label "typeOwnedDifferencing" .

<http://open-services.net/ns/sysmlv2#AssertConstraintUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>AssertConstraintUsage</code> is a <code>ConstraintUsage</code> that is also an <code>Invariant</code> and, so, is asserted to be true (by default). Unless it is the <code>AssertConstraintUsage</code> itself, the asserted <code>ConstraintUsage</code> is related to the <code>AssertConstraintUsage</code> by a ReferenceSubsetting <code>Relationship</code>.</p>
assertedConstraint =
    if ownedReferenceSubsetting = null then self
    else ownedReferenceSubsetting.referencedFeature.oclAsType(ConstraintUsage)
    endif
if isNegated then
    specializesFromLibrary('Constraints::negatedConstraints')
else
    specializesFromLibrary('Constraints::assertedConstraints')
endif
ownedReferenceSubsetting <> null implies
    ownedReferenceSubsetting.referencedFeature.oclIsKindOf(ConstraintUsage)""" ;
      rdfs:label "AssertConstraintUsage" .

<http://open-services.net/ns/sysmlv2#FeatureTyping>
      a       rdfs:Class ;
      rdfs:comment """<p><code>FeatureTyping</code> is <code>Specialization</code> in which the <code>specific</code> <code>Type</code> is a <code>Feature</code>. This means the set of instances of the (specific) <code>typedFeature</code> is a subset of the set of instances of the (general) <code>type</code>. In the simplest case, the <code>type</code> is a <code>Classifier</code>, whereupon the <code>typedFeature</code> has values that are instances of the <code>Classifier</code>.</p>
""" ;
      rdfs:label "FeatureTyping" .

<http://open-services.net/ns/sysmlv2#stateDefinitionIsParallel>
      a       rdf:Property ;
      rdfs:comment """<p>Whether the <code>ownedStates</code> of this <code>StateDefinition</code> are to all be performed in parallel. If true, none of the <code>ownedActions</code> (which includes <code>ownedStates</code>) may have any incoming or outgoing <code>Transitions</code>. If false, only one <code>ownedState</code> may be performed at a time.</p>
""" ;
      rdfs:label "stateDefinitionIsParallel" .

<http://open-services.net/ns/sysmlv2#featureChainingFeature>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Feature</code> that are chained together to determine the values of this <code>Feature</code>, derived from the <code>chainingFeatures</code> of the <code>ownedFeatureChainings</code> of this <code>Feature</code>, in the same order. The values of a <code>Feature</code> with <code>chainingFeatures</code> are the same as values of the last <code>Feature</code> in the chain, which can be found by starting with the values of the first <code>Feature</code> (for each instance of the domain of the original <code>Feature</code>), then using each of those as domain instances to find the values of the second <code>Feature</code> in chainingFeatures, and so on, to values of the last <code>Feature</code>.</p>" ;
      rdfs:label "featureChainingFeature" .

<http://open-services.net/ns/sysmlv2#actionDefinitionAction>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ActionUsages</code> that are <code>steps</code> in this <code>ActionDefinition</code>, which define the actions that specify the behavior of the <code>ActionDefinition</code>.</p> 
""" ;
      rdfs:label "actionDefinitionAction" .

<http://open-services.net/ns/sysmlv2#occurrenceDefinitionIsIndividual>
      a       rdf:Property ;
      rdfs:comment "<p>Whether this OccurrenceDefinition is constrained to represent single individual.</p>" ;
      rdfs:label "occurrenceDefinitionIsIndividual" .

<http://open-services.net/ns/sysmlv2#VerificationCaseDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>VerificationCaseDefinition</code> is a <code>CaseDefinition</code> for the purpose of verification of the subject of the case against its requirements.</p>
verifiedRequirement =
    if objectiveRequirement = null then OrderedSet{}
    else 
        objectiveRequirement.featureMembership->
            selectByKind(RequirementVerificationMembership).
            verifiedRequirement->asOrderedSet()
    endif
specializesFromLibrary('VerificationCases::VerificationCase')""" ;
      rdfs:label "VerificationCaseDefinition" .

<http://open-services.net/ns/sysmlv2#requirementDefinitionFramedConcern>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ConcernUsages</code> framed by this <code>RequirementDefinition</code>, which are the <code>ownedConcerns</code> of all <code>FramedConcernMemberships</code> of the <code>RequirementDefinition</code>.</p>" ;
      rdfs:label "requirementDefinitionFramedConcern" .

<http://open-services.net/ns/sysmlv2#caseDefinitionObjectiveRequirement>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>RequirementUsage</code> representing the objective of this <code>CaseDefinition</code>.</p> 
""" ;
      rdfs:label "caseDefinitionObjectiveRequirement" .

<http://open-services.net/ns/sysmlv2#viewDefinitionSatisfiedViewpoint>
      a       rdf:Property ;
      rdfs:comment "<p>The composite <code>ownedRequirements</code> of this <code>ViewDefinition</code> that are <code>ViewpointUsages</code> for viewpoints satisfied by the <code>ViewDefinition</code>.</p>" ;
      rdfs:label "viewDefinitionSatisfiedViewpoint" .

<http://open-services.net/ns/sysmlv2#usageDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Classifiers</code> that are the types of this <code>Usage</code>. Nominally, these are <code>Definitions</code>, but other kinds of Kernel <code>Classifiers</code> are also allowed, to permit use of <code>Classifiers</code> from the Kernel Model Libraries.</p>" ;
      rdfs:label "usageDefinition" .

<http://open-services.net/ns/sysmlv2#eventOccurrenceUsageEventOccurrence>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>OccurrenceUsage</code> referenced as an event by this <code>EventOccurrenceUsage</code>. It is the <code>referenceFeature</code> of the <code>ownedReferenceSubsetting</code> for the <code>EventOccurrenceUsage</code>, if there is one, and, otherwise, the <code>EventOccurrenceUsage</code> itself.</p>" ;
      rdfs:label "eventOccurrenceUsageEventOccurrence" .

<http://open-services.net/ns/sysmlv2#Structure>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>Structure</code> is a <code>Class</code> of objects in the modeled universe that are primarily structural in nature. While such an object is not itself behavioral, it may be involved in and acted on by <code>Behaviors</code>, and it may be the performer of some of them.</p>

specializesFromLibrary('Objects::Object')
ownedSpecialization.general->forAll(not oclIsKindOf(Behavior))""" ;
      rdfs:label "Structure" .

<http://open-services.net/ns/sysmlv2#typeOwnedConjugator>
      a       rdf:Property ;
      rdfs:comment """<p>A <code>Conjugation</code> owned by this <code>Type</code> for which the <code>Type</code> is the <code>originalType</code>.</p>
""" ;
      rdfs:label "typeOwnedConjugator" .

<http://open-services.net/ns/sysmlv2#viewUsageViewRendering>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>RenderingUsage</code> to be used to render views defined by this <code>ViewUsage</code>, which is the <code>referencedRendering</code> of the <code>ViewRenderingMembership</code> of the <code>ViewUsage</code>.<p>" ;
      rdfs:label "viewUsageViewRendering" .

<http://open-services.net/ns/sysmlv2#definitionOwnedUsage>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Usages</code> that are <code>ownedFeatures</code> of this <code>Definition</code>.</p>" ;
      rdfs:label "definitionOwnedUsage" .

<http://open-services.net/ns/sysmlv2#ControlNode>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>ControlNode</code> is an <code>ActionUsage</code> that does not have any inherent behavior but provides constraints on incoming and outgoing <code>Successions</code> that are used to control other <code>Actions</code>. A <code>ControlNode</code> must be a composite owned <code>usage</code> of an <code>ActionDefinition</code> or <code>ActionUsage</code>.</p>

sourceConnector->selectByKind(Succession)->
    collect(connectorEnd->at(1).multiplicity)->
    forAll(sourceMult | 
        multiplicityHasBounds(sourceMult, 1, 1))
owningType <> null and 
(owningType.oclIsKindOf(ActionDefinition) or
 owningType.oclIsKindOf(ActionUsage))
targetConnector->selectByKind(Succession)->
    collect(connectorEnd->at(2).multiplicity)->
    forAll(targetMult | 
        multiplicityHasBounds(targetMult, 1, 1))
specializesFromLibrary('Action::Action::controls')""" ;
      rdfs:label "ControlNode" .

<http://open-services.net/ns/sysmlv2#featureReferenceExpressionReferent>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Feature</code> that is referenced by this <code>FeatureReferenceExpression</code>, which is its first non-<code>parameter</code> <code>member</code>.<p>" ;
      rdfs:label "featureReferenceExpressionReferent" .

<http://open-services.net/ns/sysmlv2#textualRepresentationBody>
      a       rdf:Property ;
      rdfs:comment """<p>The textual representation of the <code>representedElement</code> in the given <code>language</code>.</p>
""" ;
      rdfs:label "textualRepresentationBody" .

<http://open-services.net/ns/sysmlv2#performActionUsagePerformedAction>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ActionUsage</code> to be performed by this <code>PerformedActionUsage</code>. It is the <code>eventOccurrence</code> of the <code>PerformActionUsage</code> considered as an <code>EventOccurrenceUsage</code>, which must be an <code>ActionUsage</code>.</p> 
""" ;
      rdfs:label "performActionUsagePerformedAction" .

<http://open-services.net/ns/sysmlv2#annotatingElementAnnotatedElement>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Elements</code> that are annotated by this <code>AnnotatingElement</code>. If <code>annotation</code> is not empty, these are the <code>annotatedElements</code> of the <code>annotations</code>. If <code>annotation</code> is empty, then it is the <code>owningNamespace</code> of the <code>AnnotatingElement</code>.</p>
""" ;
      rdfs:label "annotatingElementAnnotatedElement" .

<http://open-services.net/ns/sysmlv2#usageNestedAttribute>
      a       rdf:Property ;
      rdfs:comment """<p>The code>AttributeUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>.</p>
""" ;
      rdfs:label "usageNestedAttribute" .

<http://open-services.net/ns/sysmlv2#featureValueIsDefault>
      a       rdf:Property ;
      rdfs:comment "<p>Whether this <code>FeatureValue</code> is a concrete specification of the bound or initial value of the <code>featureWithValue</code>, or just a default value that may be overridden.</p>" ;
      rdfs:label "featureValueIsDefault" .

<http://open-services.net/ns/sysmlv2#owningMembershipOwnedMemberElement>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Element</code> that becomes an <code>ownedMember</code> of the <code>membershipOwningNamespace</code> due to this <code>OwningMembership</code>.</p>
""" ;
      rdfs:label "owningMembershipOwnedMemberElement" .

<http://open-services.net/ns/sysmlv2#stateUsageDoAction>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ActionUsage</code> of this <code>StateUsage</code> to be performed while in the state defined by the <code>StateDefinition</code>. It is the owned <code>ActionUsage</code> related to the <code>StateUsage</code> by a <code>StateSubactionMembership</code>  with <code>kind = do</code>.</p>" ;
      rdfs:label "stateUsageDoAction" .

<http://open-services.net/ns/sysmlv2#namespaceOwnedMembership>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ownedRelationships</code> of this <code>Namespace</code> that are <code>Memberships</code>, for which the <code>Namespace</code> is the <code>membershipOwningNamespace</code>.</p>
""" ;
      rdfs:label "namespaceOwnedMembership" .

<http://open-services.net/ns/sysmlv2#requirementDefinitionSubjectParameter>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>parameter</code> of this <code>RequirementDefinition</code> that represents its subject.</p>" ;
      rdfs:label "requirementDefinitionSubjectParameter" .

<http://open-services.net/ns/sysmlv2#featureType>
      a       rdf:Property ;
      rdfs:comment """<p><code>Types</code> that restrict the values of this <code>Feature</code>, such that the values must be instances of all the <code>types</code>. The types of a <code>Feature</code> are derived from its <code>typings</code> and the <code>types</code> of its <code>subsettings</code>. If the <code>Feature</code> is chained, then the <code>types</code> of the last <code>Feature</code> in the chain are also <code>types</code> of the chained <code>Feature</code>.</p>
""" ;
      rdfs:label "featureType" .

<http://open-services.net/ns/sysmlv2#Membership>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>Membership</code> is a <code>Relationship</code> between a <code>Namespace</code> and an <code>Element</code> that indicates the <code>Element</code> is a <code>member</code> of (i.e., is contained in) the Namespace. Any <code>memberNames</code> specify how the <code>memberElement</code> is identified in the <code>Namespace</code> and the <code>visibility</code> specifies whether or not the <code>memberElement</code> is publicly visible from outside the <code>Namespace</code>.</p>

<p>If a <code>Membership</code> is an <code>OwningMembership</code>, then it owns its <code>memberElement</code>, which becomes an <code>ownedMember</code> of the <code>membershipOwningNamespace</code>. Otherwise, the <code>memberNames</code> of a <code>Membership</code> are effectively aliases within the <code>membershipOwningNamespace</code> for an <code>Element</code> with a separate <code>OwningMembership</code> in the same or a different <code>Namespace</code>.</p>

<p>&nbsp;</p>

memberElementId = memberElement.elementId""" ;
      rdfs:label "Membership" .

<http://open-services.net/ns/sysmlv2#transitionFeatureMembershipTransitionFeature>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Step</code> that is the <code>ownedMemberFeature</code> of this <code>TransitionFeatureMembership</code>.</p>" ;
      rdfs:label "transitionFeatureMembershipTransitionFeature" .

<http://open-services.net/ns/sysmlv2#subsettingSubsettedFeature>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Feature</code> that is subsetted by the <code>subsettingFeature</code> of this <code>Subsetting</code>.</p>
""" ;
      rdfs:label "subsettingSubsettedFeature" .

<http://open-services.net/ns/sysmlv2#sendActionUsagePayloadArgument>
      a       rdf:Property ;
      rdfs:comment """<p>An <code>Expression</code> whose result is bound to the <code><em>payload</em></code> input parameter of this <code>SendActionUsage</code>.</p> 
""" ;
      rdfs:label "sendActionUsagePayloadArgument" .

<http://open-services.net/ns/sysmlv2#requirementDefinitionStakeholderParameter>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>parameters</code> of this <code>RequirementDefinition</code> that represent stakeholders for th requirement.</p>" ;
      rdfs:label "requirementDefinitionStakeholderParameter" .

<http://open-services.net/ns/sysmlv2#RenderingUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>RenderingUsage</code> is the usage of a <code>RenderingDefinition</code> to specify the rendering of a specific model view to produce a physical view artifact.</p>


specializesFromLibrary('Views::renderings')
owningType <> null and
(owningType.oclIsKindOf(RenderingDefinition) or
 owningType.oclIsKindOf(RenderingUsage)) implies
    specializesFromLibrary('Views::Rendering::subrenderings')
owningFeatureMembership <> null and
owningFeatureMembership.oclIsKindOf(ViewRenderingMembership) implies
    redefinesFromLibrary('Views::View::viewRendering')""" ;
      rdfs:label "RenderingUsage" .

<http://open-services.net/ns/sysmlv2#actionUsageActionDefinition>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Behaviors</code> that are the <code>types</code> of this <code>ActionUsage</code>. Nominally, these would be <code>ActionDefinitions</code>, but other kinds of Kernel <code>Behaviors</code> are also allowed, to permit use of <code>Behaviors</code> from the Kernel Model Libraries.</p> 
""" ;
      rdfs:label "actionUsageActionDefinition" .

<http://open-services.net/ns/sysmlv2#typeDifferencingType>
      a       rdf:Property ;
      rdfs:comment """<p>The interpretations of a <code>Type</code> with <code>differencingTypes</code> are asserted to be those of the first of those <code>Types</code>, but not including those of the remaining <code>Types</code>. For example, a <code>Classifier</code> might be the difference of a <code>Classifier</code> for people and another for people of a particular nationality, leaving people who are not of that nationality. Similarly, a feature of people might be the difference between a feature for their children and a <code>Classifier</code> for people of a particular sex, identifying their children not of that sex (because the interpretations of the children <code>Feature</code> that identify those of that sex are also interpretations of the <code>Classifier</code> for that sex).</p>
""" ;
      rdfs:label "typeDifferencingType" .

<http://open-services.net/ns/sysmlv2#viewUsageExposedElement>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Elements</code> that are exposed by this <code>ViewUsage</code>, which are those <code>memberElements</code> of the imported <code>Memberships</code> from all the <code>Expose</code> <code>Relationships</code> that meet all the owned and inherited <code>viewConditions</code>.</p>" ;
      rdfs:label "viewUsageExposedElement" .

<http://open-services.net/ns/sysmlv2#featureOwnedTyping>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ownedSpecializations</code> of this <code>Feature</code> that are <code>FeatureTypings</code>, for which the <code>Feature</code> is the <code>typedFeature</code>.</p>" ;
      rdfs:label "featureOwnedTyping" .

<http://open-services.net/ns/sysmlv2#typeOwnedIntersecting>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ownedRelationships</code> of this <code>Type</code> that are <code>Intersectings</code>, have the <code>Type</code> as their <code>typeIntersected</code>.</p>
""" ;
      rdfs:label "typeOwnedIntersecting" .

<http://open-services.net/ns/sysmlv2#importIsRecursive>
      a       rdf:Property ;
      rdfs:comment "<p>Whether to recursively import Memberships from visible, owned sub-Namespaces.</p>" ;
      rdfs:label "importIsRecursive" .

<http://open-services.net/ns/sysmlv2#operatorExpressionOperator>
      a       rdf:Property ;
      rdfs:comment "<p>An <code>operator</code> symbol that names a corresponding <code>Function</code> from one of the standard packages from the Kernel Function Library .</p>" ;
      rdfs:label "operatorExpressionOperator" .

<http://open-services.net/ns/sysmlv2#AllocationUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>AllocationUsage</code> is a usage of an <code>AllocationDefinition</code> asserting the allocation of the <code>source</code> feature to the <code>target</code> feature.</p>
specializesFromLibrary('Allocations::allocations')""" ;
      rdfs:label "AllocationUsage" .

<http://open-services.net/ns/sysmlv2#requirementConstraintMembershipReferencedConstraint>
      a       rdf:Property ;
      rdfs:comment "<p> The <code>ConstraintUsage</code> that is referenced through this <code>RequirementConstraintMembership</code>. It is the <code>referencedFeature</code> of the <code>ownedReferenceSubsetting</code> of the <code>ownedConstraint</code>, if there is one, and, otherwise, the <code>ownedConstraint</code> itself.</p>" ;
      rdfs:label "requirementConstraintMembershipReferencedConstraint" .

<http://open-services.net/ns/sysmlv2#featureOwnedFeatureInverting>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ownedRelationships</code> of this <code>Feature</code> that are <code>FeatureInvertings</code> and for which the <code>Feature</code> is the <code>featureInverted</code>.</p>" ;
      rdfs:label "featureOwnedFeatureInverting" .

<http://open-services.net/ns/sysmlv2#caseUsageObjectiveRequirement>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>RequirementUsage</code> representing the objective of this <code>CaseUsage</code>.</p> 
""" ;
      rdfs:label "caseUsageObjectiveRequirement" .

<http://open-services.net/ns/sysmlv2#usageNestedMetadata>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>MetadataUsages</code> that are <code>nestedUsages</code> of this of this <code>Usage</code>.</p>" ;
      rdfs:label "usageNestedMetadata" .

<http://open-services.net/ns/sysmlv2#Featuring>
      a       rdfs:Class ;
      rdfs:comment """<p><code>Featuring</code> is a <code>Relationship</code> between a <code>Type</code> and a <code>Feature</code> that is featured by that <code>Type</code>. It asserts that every instance in the domain of the <code>feature</code> must be classified by the <code>type</code>.</p>

<p><code>Featuring</code> is abstract and does not commit to which of <code>feature</code> or <code>type</code> are the <code>source</code> or <code>target</code> of the <code>Relationship</code>. This commitment is made in the subclasses of <code>Featuring</code>, <code>TypeFeaturing</code> and <code>FeatureMembership</code>, which have opposite directions.</p>""" ;
      rdfs:label "Featuring" .

<http://open-services.net/ns/sysmlv2#successionGuardExpression>
      a       rdf:Property ;
      rdfs:comment """<p><code>Expressions</code> that must evaluate to true before the <code>transitionStep</code> can occur.</p>
""" ;
      rdfs:label "successionGuardExpression" .

<http://open-services.net/ns/sysmlv2#triggerInvocationExpressionKind>
      a       rdf:Property ;
      rdfs:comment "<p>Indicates which of the <code>Functions</code> from the <code><em>Triggers</em></code> model in the Kernel Semantic Library is to be invoked by this <code>TriggerInvocationExpression</code>.</p>" ;
      rdfs:label "triggerInvocationExpressionKind" .

<http://open-services.net/ns/sysmlv2#featureValueValue>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Expression</code> that provides the value of the <code>featureWithValue</code> as its <code>result</code>.</p>

<p>The Expression that provides the value as a result.</p>""" ;
      rdfs:label "featureValueValue" .

<http://open-services.net/ns/sysmlv2#Definition>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>Definition</code> is a <code>Classifier</code> of <code>Usages</code>. The actual kinds of <code>Definition</code> that may appear in a model are given by the subclasses of <code>Definition</code> (possibly as extended with user-defined <em><code>SemanticMetadata</code></em>).</p>

<p>Normally, a <code>Definition</code> has owned Usages that model <code>features</code> of the thing being defined. A <code>Definition</code> may also have other <code>Definitions</code> nested in it, but this has no semantic significance, other than the nested scoping resulting from the <code>Definition</code> being considered as a <code>Namespace</code> for any nested <code>Definitions</code>.</p>

<p>However, if a <code>Definition</code> has <code>isVariation</code> = <code>true</code>, then it represents a <em>variation point</em> <code>Definition</code>. In this case, all of its <code>members</code> must be <code>variant</code> <code>Usages</code>, related to the <code>Definition</code> by <code>VariantMembership</code> <code>Relationships</code>. Rather than being <code>features</code> of the <code>Definition</code>, <code>variant</code> <code>Usages</code> model different concrete alternatives that can be chosen to fill in for an abstract <code>Usage</code> of the variation point <code>Definition</code>.</p>

isVariation implies ownedFeatureMembership->isEmpty()
variant = variantMembership.ownedVariantUsage
variantMembership = ownedMembership->selectByKind(VariantMembership)
isVariation implies
    not ownedSpecialization.specific->exists(
        oclIsKindOf(Definition) and
        oclAsType(Definition).isVariation)
usage = feature->selectByKind(Usage)
directedUsage = directedFeature->selectByKind(Usage)
ownedUsage = ownedFeature->selectByKind(Usage)
ownedAttribute = ownedUsage->selectByKind(AttributeUsage)
ownedReference = ownedUsage->selectByKind(ReferenceUsage)
ownedEnumeration = ownedUsage->selectByKind(EnumerationUsage)
ownedOccurrence = ownedUsage->selectByKind(OccurrenceUsage)
ownedItem = ownedUsage->selectByKind(ItemUsage)
ownedPart = ownedUsage->selectByKind(PartUsage)
ownedPort = ownedUsage->selectByKind(PortUsage)
ownedConnection = ownedUsage->selectByKind(ConnectorAsUsage)
ownedFlow = ownedUsage->selectByKind(FlowConnectionUsage)
ownedInterface = ownedUsage->selectByKind(ReferenceUsage)
ownedAllocation = ownedUsage->selectByKind(AllocationUsage)
ownedAction = ownedUsage->selectByKind(ActionUsage)
ownedState = ownedUsage->selectByKind(StateUsage)
ownedTransition = ownedUsage->selectByKind(TransitionUsage)
ownedCalculation = ownedUsage->selectByKind(CalculationUsage)
ownedConstraint = ownedUsage->selectByKind(ConstraintUsage)
ownedRequirement = ownedUsage->selectByKind(RequirementUsage)
ownedConcern = ownedUsage->selectByKind(ConcernUsage)
ownedCase = ownedUsage->selectByKind(CaseUsage)
ownedAnalysisCase = ownedUsage->selectByKind(AnalysisCaseUsage)
ownedVerificationCase = ownedUsage->selectByKind(VerificationCaseUsage)
ownedUseCase = ownedUsage->selectByKind(UseCaseUsage)
ownedView = ownedUsage->selectByKind(ViewUsage)
ownedViewpoint = ownedUsage->selectByKind(ViewpointUsage)
ownedRendering = ownedUsage->selectByKind(RenderingUsage)
ownedMetadata = ownedUsage->selectByKind(MetadataUsage)
isVariation implies isAbstract""" ;
      rdfs:label "Definition" .

<http://open-services.net/ns/sysmlv2#referenceSubsettingReferencedFeature>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Feature</code> that is referenced by the <code>referencingFeature</code> of this <code>ReferenceSubsetting</code>.</p>
""" ;
      rdfs:label "referenceSubsettingReferencedFeature" .

<http://open-services.net/ns/sysmlv2#Usage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>Usage</code> is a usage of a <code>Definition</code>. A <code>Usage</code> may only be an <code>ownedFeature</code> of a <code>Definition</code> or another <code>Usage</code>.</p>

<p>A <code>Usage</code> may have <code>nestedUsages</code> that model <code>features</code> that apply in the context of the <code>owningUsage</code>. A <code>Usage</code> may also have <code>Definitions</code> nested in it, but this has no semantic significance, other than the nested scoping resulting from the <code>Usage</code> being considered as a <code>Namespace</code> for any nested <code>Definitions</code>.</p>

<p>However, if a <code>Usage</code> has <code>isVariation = true</code>, then it represents a <em>variation point</em> <code>Usage</code>. In this case, all of its <code>members</code> must be <code>variant</code> <code>Usages</code>, related to the <code>Usage</code> by <code>VariantMembership</code> <code>Relationships</code>. Rather than being <code>features</code> of the <code>Usage</code>, <code>variant</code> <code>Usages</code> model different concrete alternatives that can be chosen to fill in for the variation point <code>Usage</code>.</p>
variant = variantMembership.ownedVariantUsage
variantMembership = ownedMembership->selectByKind(VariantMembership)
isVariation implies ownedFeatureMembership->isEmpty()
isReference = not isComposite
owningVariationUsage <> null implies
    specializes(owningVariationUsage)
isVariation implies
    not ownedSpecialization.specific->exists(
        oclIsKindOf(Definition) and
        oclAsType(Definition).isVariation or
        oclIsKindOf(Usage) and
        oclAsType(Usage).isVariation)
owningVariationDefinition <> null implies
    specializes(owningVariationDefinition)
directedUsage = directedFeature->selectByKind(Usage)
nestedAction = nestedUsage->selectByKind(ActionUsage)
nestedAllocation = nestedUsage->selectByKind(AllocationUsage)
nestedAnalysisCase = nestedUsage->selectByKind(AnalysisCaseUsage)
nestedAttribute = nestedUsage->selectByKind(AttributeUsage)
nestedCalculation = nestedUsage->selectByKind(CalculationUsage)
nestedCase = nestedUsage->selectByKind(CaseUsage)
nestedConcern = nestedUsage->selectByKind(ConcernUsage)
nestedConnection = nestedUsage->selectByKind(ConnectorAsUsage)
nestedConstraint = nestedUsage->selectByKind(ConstraintUsage)
ownedNested = nestedUsage->selectByKind(EnumerationUsage)
nestedFlow = nestedUsage->selectByKind(FlowConnectionUsage)
nestedInterface = nestedUsage->selectByKind(ReferenceUsage)
nestedItem = nestedUsage->selectByKind(ItemUsage)
nestedMetadata = nestedUsage->selectByKind(MetadataUsage)
nestedOccurrence = nestedUsage->selectByKind(OccurrenceUsage)
nestedPart = nestedUsage->selectByKind(PartUsage)
nestedPort = nestedUsage->selectByKind(PortUsage)
nestedReference = nestedUsage->selectByKind(ReferenceUsage)
nestedRendering = nestedUsage->selectByKind(RenderingUsage)
nestedRequirement = nestedUsage->selectByKind(RequirementUsage)
nestedState = nestedUsage->selectByKind(StateUsage)
nestedTransition = nestedUsage->selectByKind(TransitionUsage)
nestedUsage = ownedFeature->selectByKind(Usage)
nestedUseCase = nestedUsage->selectByKind(UseCaseUsage)
nestedVerificationCase = nestedUsage->selectByKind(VerificationCaseUsage)
nestedView = nestedUsage->selectByKind(ViewUsage)
nestedViewpoint = nestedUsage->selectByKind(ViewpointUsage)
usage = feature->selectByKind(Usage)
direction <> null or isEnd or featuringType->isEmpty() implies
    isReference
isVariation implies isAbstract""" ;
      rdfs:label "Usage" .

<http://open-services.net/ns/sysmlv2#FlowConnectionUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>FlowConnectionUsage</code> is a <code>ConnectionUsage</code> that is also an <code>ItemFlow</code>.</p>
if ownedEndFeatures->isEmpty() then
    specializesFromLibrary('Connections::messageConnections')
else
    specializesFromLibrary('Connections::flowConnections')
endif""" ;
      rdfs:label "FlowConnectionUsage" .

<http://open-services.net/ns/sysmlv2#acceptActionUsagePayloadParameter>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>nestedReference</code> of this <code>AcceptActionUsage</code> that redefines the <code>payload</code> output <code>parameter</code> of the base <code>AcceptActionUsage</code> <em><code>AcceptAction</code></em> from the Systems Model Library.</p>" ;
      rdfs:label "acceptActionUsagePayloadParameter" .

<http://open-services.net/ns/sysmlv2#calculationUsageCalculationDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <ode>Function</code> that is the <code>type</code> of this <code>CalculationUsage</code>. Nominally, this would be a <code>CalculationDefinition</code>, but a kernel <code>Function</code> is also allowed, to permit use of <code>Functions</code> from the Kernel Model Libraries.</p>" ;
      rdfs:label "calculationUsageCalculationDefinition" .

<http://open-services.net/ns/sysmlv2#membershipMemberElement>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Element</code> that becomes a <code>member</code> of the <code>membershipOwningNamespace</code> due to this <code>Membership</code>.</p>
""" ;
      rdfs:label "membershipMemberElement" .

<http://open-services.net/ns/sysmlv2#CollectExpression>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>CollectExpression</code> is an <code>OperatorExpression</code> whose <code>operator</code> is <code>\"collect\"</code>, which resolves to the <code>Function</code> <em><code>ControlFunctions::collect</code></em> from the Kernel Functions Library.</p>
operator = \"collect\"""" ;
      rdfs:label "CollectExpression" .

<http://open-services.net/ns/sysmlv2#analysisCaseUsageAnalysisCaseDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>AnalysisCaseDefinition</code> that is the <code>definition</code> of this <code>AnalysisCaseUsage</code>.</p>" ;
      rdfs:label "analysisCaseUsageAnalysisCaseDefinition" .

<http://open-services.net/ns/sysmlv2#dependencySupplier>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Element</code> or <code>Elements</code> on which the <code>client</code> <code>Elements</code> depend in some respect.</p>" ;
      rdfs:label "dependencySupplier" .

<http://open-services.net/ns/sysmlv2#objectiveMembershipOwnedObjectiveRequirement>
      a       rdf:Property ;
      rdfs:comment """<p>The RequirementUsage that is the <code>ownedMemberFeature</code> of this RequirementUsage.</p> 
""" ;
      rdfs:label "objectiveMembershipOwnedObjectiveRequirement" .

<http://open-services.net/ns/sysmlv2#typeMultiplicity>
      a       rdf:Property ;
      rdfs:comment """<p>An <code>ownedMember</code> of this <code>Type</code> that is a <code>Multiplicity</code>, which constraints the cardinality of the <code>Type</code>. If there is no such <code>ownedMember</code>, then the cardinality of this <code>Type</code> is constrained by all the <code>Multiplicity</code> constraints applicable to any direct supertypes.</p>

<p>&nbsp;</p>
""" ;
      rdfs:label "typeMultiplicity" .

<http://open-services.net/ns/sysmlv2#usageNestedAction>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ActionUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>.</p>
""" ;
      rdfs:label "usageNestedAction" .

<http://open-services.net/ns/sysmlv2#definitionVariantMembership>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ownedMemberships</code> of this <code>Definition</code> that are <code>VariantMemberships</code>. If <code>isVariation</code> = true, then this must be all <code>ownedMemberships</code> of the <code>Definition</code>. If <code>isVariation</code> = false, then <code>variantMembership</code>must be empty.</p>" ;
      rdfs:label "definitionVariantMembership" .

<http://open-services.net/ns/sysmlv2#typeFeaturingFeaturingType>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Type</code> that features the <code>featureOfType</code>. It is the <code>target</code> of the <code>TypeFeaturing</code>.</p>" ;
      rdfs:label "typeFeaturingFeaturingType" .

<http://open-services.net/ns/sysmlv2#RequirementVerificationMembership>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>RequirementVerificationMembership</code> is a <code>RequirementConstraintMembership </code> used in the objective of a <code>VerificationCase</code> to identify a <code>RequirementUsage</code> that is verified by the <code>VerificationCase</code>.</p>
kind = RequirementConstraintKind::requirement
owningType.oclIsKindOf(RequirementUsage) and
owningType.owningFeatureMembership <> null and
owningType.owningFeatureMembership.oclIsKindOf(ObjectiveMembership)""" ;
      rdfs:label "RequirementVerificationMembership" .

<http://open-services.net/ns/sysmlv2#usageNestedAnalysisCase>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>AnalysisCaseUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>.</p>
""" ;
      rdfs:label "usageNestedAnalysisCase" .

<http://open-services.net/ns/sysmlv2#itemFlowInteraction>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Interactions</code> that type this <code>ItemFlow</code>. <code>Interactions</code> are both <code>Associations</code> and <code>Behaviors</code>, which can type <code>Connectors</code> and <code>Steps</code>, respectively.</p>" ;
      rdfs:label "itemFlowInteraction" .

<http://open-services.net/ns/sysmlv2#StateUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>StateUsage</code> is an <code>ActionUsage</code> that is nominally the <code>Usage</code> of a <code>StateDefinition</code>. However, other kinds of kernel <code>Behaviors</code> are also allowed as <code>types</code>, to permit use of <code>Behaviors</code from the Kernel Model Libraries.</p>

<p>A <code>StateUsage</code> may be related to up to three of its <code>ownedFeatures</code> by <code>StateSubactionMembership</code> <code>Relationships</code>, all of different <code>kinds</code>, corresponding to the entry, do and exit actions of the <code>StateUsage</code>.</p>

doAction =
    let doMemberships : Sequence(StateSubactionMembership) =
        ownedMembership->
            selectByKind(StateSubactionMembership)->
            select(kind = StateSubactionKind::do) in
    if doMemberships->isEmpty() then null
    else doMemberships->at(1)
    endif
entryAction =
    let entryMemberships : Sequence(StateSubactionMembership) =
        ownedMembership->
            selectByKind(StateSubactionMembership)->
            select(kind = StateSubactionKind::entry) in
    if entryMemberships->isEmpty() then null
    else entryMemberships->at(1)
    endif
isParallel implies
    nestedAction.incomingTransition->isEmpty() and
    nestedAction.outgoingTransition->isEmpty()
isSubstateUsage(true) implies
    specializesFromLibrary('States::State::substates')
exitAction =
    let exitMemberships : Sequence(StateSubactionMembership) =
        ownedMembership->
            selectByKind(StateSubactionMembership)->
            select(kind = StateSubactionKind::exit) in
    if exitMemberships->isEmpty() then null
    else exitMemberships->at(1)
    endif
specializesFromLibrary('States::stateActions')
ownedMembership->
    selectByKind(StateSubactionMembership)->
    isUnique(kind)
isSubstateUsage(false) implies
    specializesFromLibrary('States::State::substates')""" ;
      rdfs:label "StateUsage" .

<http://open-services.net/ns/sysmlv2#BindingConnectorAsUsage>
      a       rdfs:Class ;
      rdfs:comment "<p>A <code>BindingConnectorAsUsage</code> is both a <code>BindingConnector</code> and a <code>ConnectorAsUsage</code>.</p>" ;
      rdfs:label "BindingConnectorAsUsage" .

<http://open-services.net/ns/sysmlv2#textualRepresentationLanguage>
      a       rdf:Property ;
      rdfs:comment """<p>The natural or artifical language in which the <code>body</code> text is written.</p>
""" ;
      rdfs:label "textualRepresentationLanguage" .

<http://open-services.net/ns/sysmlv2#usageDirectedUsage>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>usages</code> of this <code>Usage</code> that are <code>directedFeatures</code>.</p>
""" ;
      rdfs:label "usageDirectedUsage" .

<http://open-services.net/ns/sysmlv2#featureIsComposite>
      a       rdf:Property ;
      rdfs:comment """<p>Whether the <code>Feature</code> is a composite <code>feature</code> of its <code>featuringType</code>. If so, the values of the <code>Feature</code> cannot exist after its featuring instance no longer does.</p>
""" ;
      rdfs:label "featureIsComposite" .

<http://open-services.net/ns/sysmlv2#requirementVerificationMembershipOwnedRequirement>
      a       rdf:Property ;
      rdfs:comment "<p>The owned <code>RequirementUsage</code> that acts as the <code>ownedConstraint</code> for this <code>RequirementVerificationMembership</code>. This will either be the <code>verifiedRequirement</code>, or it will subset the <code>verifiedRequirement</code>.</p>" ;
      rdfs:label "requirementVerificationMembershipOwnedRequirement" .

<http://open-services.net/ns/sysmlv2#namespaceMember>
      a       rdf:Property ;
      rdfs:comment """<p>The set of all member <code>Elements</code> of this <code>Namespace</code>, which are the <code>memberElements</code> of all <code>memberships</code> of the <code>Namespace</code>.</p>
""" ;
      rdfs:label "namespaceMember" .

<http://open-services.net/ns/sysmlv2#InterfaceDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>InterfaceDefinition</code> is a <code>ConnectionDefinition</code> all of whose ends are <code>PortUsages</code>, defining an interface between elements that interact through such ports.</p>
specializesFromLibrary('Interfaces::Interface')
ownedEndFeature->size() = 2 implies
    specializesFromLibrary('Interfaces::BinaryInterface')""" ;
      rdfs:label "InterfaceDefinition" .

<http://open-services.net/ns/sysmlv2#MetadataUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A  <code>MetadataUsage</code> is a <code>Usage</code> and a <code>MetadataFeature</code>, used to annotate other <code>Elements</code> in a system model with metadata. As a <code>MetadataFeature</code>, its type must be a <code>Metaclass</code>, which will nominally be a <code>MetadataDefinition</code>. However, any kernel <code>Metaclass</code> is also allowed, to permit use of <code>Metaclasses</code> from the Kernel Model Libraries.</p>
specializesFromLibrary('Metadata::metadataItems')""" ;
      rdfs:label "MetadataUsage" .

<http://open-services.net/ns/sysmlv2#requirementUsageActorParameter>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>parameters</code> of this <code>RequirementUsage</code> that represent actors involved in the requirement.</p>" ;
      rdfs:label "requirementUsageActorParameter" .

<http://open-services.net/ns/sysmlv2#definitionIsVariation>
      a       rdf:Property ;
      rdfs:comment "<p>Whether this <code>Definition</code> is for a variation point or not. If true, then all the <code>memberships</code> of the <code>Definition</code> must be <code>VariantMemberships</code>.</p>" ;
      rdfs:label "definitionIsVariation" .

<http://open-services.net/ns/sysmlv2#requirementUsageFramedConcern>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ConcernUsages</code> framed by this <code>RequirementUsage</code>, which are the <code>ownedConcerns</code> of all <code>FramedConcernMemberships</code> of the <code>RequirementUsage</code>.</p>" ;
      rdfs:label "requirementUsageFramedConcern" .

<http://open-services.net/ns/sysmlv2#ItemFlow>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>ItemFlow</code> is a <code>Step</code> that represents the transfer of objects or data values from one <code>Feature</code> to another. <code>ItemFlows</code> can take non-zero time to complete.</p>

if itemFlowEnds->isEmpty() then
    specializesFromLibrary('Transfers::transfers')
else
    specializesFromLibrary('Transfers::flowTransfers')
endif
itemType =
    if itemFeature = null then Sequence{}
    else itemFeature.type
    endif
sourceOutputFeature =
    if connectorEnd->isEmpty() or 
        connectorEnd.ownedFeature->isEmpty()
    then null
    else connectorEnd.ownedFeature->first()
    endif
targetInputFeature =
    if connectorEnd->size() < 2 or 
        connectorEnd->at(2).ownedFeature->isEmpty()
    then null
    else connectorEnd->at(2).ownedFeature->first()
    endif
itemFlowEnd = connectorEnd->selectByKind(ItemFlowEnd)
itemFeature =
    let itemFeatures : Sequence(ItemFeature) = 
        ownedFeature->selectByKind(ItemFeature) in
    if itemFeatures->isEmpty() then null
    else itemFeatures->first()
    endif
ownedFeature->selectByKind(ItemFeature)->size() <= 1""" ;
      rdfs:label "ItemFlow" .

<http://open-services.net/ns/sysmlv2#usageVariantMembership>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ownedMemberships</code> of this <code>Usage</code> that are <code>VariantMemberships</code>. If <code>isVariation = true</code>, then this must be all <code>memberships</code> of the <code>Usage</code>. If <code>isVariation = false</code>, then <code>variantMembership</code>must be empty.</p>" ;
      rdfs:label "usageVariantMembership" .

<http://open-services.net/ns/sysmlv2#featureOwnedTypeFeaturing>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ownedRelationships</code> of this <code>Feature</code> that are <code>TypeFeaturings</code> and for which the <code>Feature</code> is the <code>featureOfType</code>.</p>" ;
      rdfs:label "featureOwnedTypeFeaturing" .

<http://open-services.net/ns/sysmlv2#stepParameter>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>parameters</code> of this <code>Step</code>, which are defined as its <code>directedFeatures</code>, whose values are passed into and/or out of a performance of the <code>Step</code>.</p>
""" ;
      rdfs:label "stepParameter" .

<http://open-services.net/ns/sysmlv2#FeatureChaining>
      a       rdfs:Class ;
      rdfs:comment "<p><code>FeatureChaining</code> is a <code>Relationship</code> that makes its target <code>Feature</code> one of the <code>chainingFeatures</code> of its owning <code>Feature</code>.</p>" ;
      rdfs:label "FeatureChaining" .

<http://open-services.net/ns/sysmlv2#usageNestedItem>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ItemUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>.</p>" ;
      rdfs:label "usageNestedItem" .

<http://open-services.net/ns/sysmlv2#useCaseDefinitionIncludedUseCase>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>UseCaseUsages</code> that are included by this <code>UseCaseDefinition</code>, which are the <code>useCaseIncludeds</code> of the <code>IncludeUseCaseUsages</code> owned by this <code>UseCaseDefinition<code>.</p>" ;
      rdfs:label "useCaseDefinitionIncludedUseCase" .

<http://open-services.net/ns/sysmlv2#itemUsageItemDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The Structures that are the <code>definitions</code> of this ItemUsage. Nominally, these are ItemDefinitions, but other kinds of Kernel Structures are also allowed, to permit use of Structures from the Kernel Library.</p>" ;
      rdfs:label "itemUsageItemDefinition" .

<http://open-services.net/ns/sysmlv2#acceptActionUsageReceiverArgument>
      a       rdf:Property ;
      rdfs:comment """<p>An <code>Expression</code> whose <code>result</code> is bound to the <em><code>receiver</code></em> input <code>parameter</code> of this <code>AcceptActionUsage</code>.</p> 
""" ;
      rdfs:label "acceptActionUsageReceiverArgument" .

<http://open-services.net/ns/sysmlv2#requirementUsageSubjectParameter>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>parameter</code> of this <code>RequirementUsage</code> that represents its subject.</p>" ;
      rdfs:label "requirementUsageSubjectParameter" .

<http://open-services.net/ns/sysmlv2#caseDefinitionSubjectParameter>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>parameter</code> of this <code>CaseDefinition</code> that represents its subject.</p>" ;
      rdfs:label "caseDefinitionSubjectParameter" .

<http://open-services.net/ns/sysmlv2#typeEndFeature>
      a       rdf:Property ;
      rdfs:comment "<p>All <code>features</code> of this <code>Type</code> with <code>isEnd = true</code>.</p>" ;
      rdfs:label "typeEndFeature" .

<http://open-services.net/ns/sysmlv2#featuringFeature>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Feature</code> that is featured by the <code>featuringType</code>.</p>" ;
      rdfs:label "featuringFeature" .

<http://open-services.net/ns/sysmlv2#requirementUsageStakeholderParameter>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>parameters</code> of this <code>RequirementUsage</code> that represent stakeholders for the requirement.</p>" ;
      rdfs:label "requirementUsageStakeholderParameter" .

<http://open-services.net/ns/sysmlv2#disjoiningOwningType>
      a       rdf:Property ;
      rdfs:comment "<p>A <code>typeDisjoined</code> that is also an <code>owningRelatedElement</code>.</p>" ;
      rdfs:label "disjoiningOwningType" .

<http://open-services.net/ns/sysmlv2#featureInvertingInvertingFeature>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Feature</code> that is an inverse of the <code>invertedFeature</code>.</p>" ;
      rdfs:label "featureInvertingInvertingFeature" .

<http://open-services.net/ns/sysmlv2#interfaceDefinitionInterfaceEnd>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>PortUsages</code> that are the <code>connectionEnds</code> of this <code>InterfaceDefinition</code>.

""" ;
      rdfs:label "interfaceDefinitionInterfaceEnd" .

<http://open-services.net/ns/sysmlv2#typeOwnedFeature>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ownedMemberFeatures</code> of the <code>ownedFeatureMemberships</code> of this <code>Type</code>.</p>
""" ;
      rdfs:label "typeOwnedFeature" .

<http://open-services.net/ns/sysmlv2#Differencing>
      a       rdfs:Class ;
      rdfs:comment """<p><code>Differencing</code> is a <code>Relationship</code> that makes its <code>differencingType</code> one of the <code>differencingTypes</code> of its <code>typeDifferenced</code>.</p>
""" ;
      rdfs:label "Differencing" .

<http://open-services.net/ns/sysmlv2#SuccessionItemFlow>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>SuccessionItemFlow</code> is an <code>ItemFlow</code> that also provides temporal ordering. It classifies <code><em>Transfers</em></code> that cannot start until the source <code><em>Occurrence</em></code> has completed and that must complete before the target <code><em>Occurrence</em></code> can start.</p>
specializesFromLibrary('Transfers::flowTransfersBefore')""" ;
      rdfs:label "SuccessionItemFlow" .

<http://open-services.net/ns/sysmlv2#associationAssociationEnd>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>features</code> of the <code>Association</code> that identify the things that can be related by it. A concrete <code>Association</code> must have at least two <code>associationEnds</code>. When it has exactly two, the <code>Association</code> is called a <em>binary</em> <code>Association</code>.</p> 

<p>The ends of the Association determine which elements are eligible to be related by instances of the Association.</p>
""" ;
      rdfs:label "associationAssociationEnd" .

<http://open-services.net/ns/sysmlv2#featureIsNonunique>
      a       rdf:Property ;
      rdfs:label "featureIsNonunique" .

<http://open-services.net/ns/sysmlv2#occurrenceUsageIndividualDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The at most one <code>occurrenceDefinition</code> that has <code>isIndividual = true</code>.</p>" ;
      rdfs:label "occurrenceUsageIndividualDefinition" .

<http://open-services.net/ns/sysmlv2#attributeUsageAttributeDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>DataTypes</code> that are the types of this <code>AttributeUsage</code>. Nominally, these are <code>AttributeDefinitions</code>, but other kinds of kernel <code>DataTypes</code> are also allowed, to permit use of <code>DataTypes</code> from the Kernel Model Libraries.</p>" ;
      rdfs:label "attributeUsageAttributeDefinition" .

<http://open-services.net/ns/sysmlv2#stateUsageIsParallel>
      a       rdf:Property ;
      rdfs:comment """<p>Whether the <code>nestedStates</code> of this <code>StateUsage</code> are to all be performed in parallel. If true, none of the <code>nestedActions</code> (which include <code>nestedStates</code>) may have any incoming or outgoing <code>Transitions</code>. If false, only one <code>nestedState</code> may be performed at a time.</p>
""" ;
      rdfs:label "stateUsageIsParallel" .

<http://open-services.net/ns/sysmlv2#booleanExpressionPredicate>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Predicate</code> that types this <code>BooleanExpression</code>.</p>
<p>The Predicate that types the Expression.</p>
""" ;
      rdfs:label "booleanExpressionPredicate" .

<http://open-services.net/ns/sysmlv2#usageNestedViewpoint>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ViewpointUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>.</p> 
""" ;
      rdfs:label "usageNestedViewpoint" .

<http://open-services.net/ns/sysmlv2#MultiplicityRange>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>MultiplicityRange</code> is a <code>Multiplicity</code> whose value is defined to be the (inclusive) range of natural numbers given by the result of a <code>lowerBound</code> <code>Expression</code> and the result of an <code>upperBound</code> <code>Expression</code>. The result of these <code>Expressions</code> shall be of type <code><em>Natural</em></code>. If the result of the <code>upperBound</code> <code>Expression</code> is the unbounded value <code>*</code>, then the specified range includes all natural numbers greater than or equal to the <code>lowerBound</code> value. If no <code>lowerBound</code> <code>Expression</code>, then the default is that the lower bound has the same value as the upper bound, except if the <code>upperBound</code> evaluates to <code>*</code>, in which case the default for the lower bound is 0.</p>

bound->forAll(b | b.featuringType = self.featuringType)
bound->forAll(b |
    b.result.specializesFromLibrary('ScalarValues::Integer') and
    let value : UnlimitedNatural = valueOf(b) in
    value <> null implies value >= 0
)
lowerBound =
    let ownedMembers : Sequence(Element) = 
        ownedMembership->selectByKind(OwningMembership).ownedMember in
    if ownedMembers->size() < 2 or 
        not ownedMembers->first().oclIsKindOf(Expression) then null
    else ownedMembers->first().oclAsType(Expression)
    endif
upperBound =
    let ownedMembers : Sequence(Element) = 
        ownedMembership->selectByKind(OwningMembership).ownedMember in
    if ownedMembers->isEmpty() or 
       not ownedMembers->last().oclIsKindOf(Expression) 
    then null
    else ownedMembers->last().oclAsType(Expression)
    endif """ ;
      rdfs:label "MultiplicityRange" .

<http://open-services.net/ns/sysmlv2#metadataFeatureMetaclass>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>type</code> of this <code>MetadataFeature</code>, which must be a <code>Metaclass</code>.</p>" ;
      rdfs:label "metadataFeatureMetaclass" .

<http://open-services.net/ns/sysmlv2#typeOwnedFeatureMembership>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ownedMemberships</code> of this <code>Type</code> that are <code>FeatureMemberships</code>, for which the <code>Type</code> is the <code>owningType</code>. Each such <code>FeatureMembership</code> identifies an <code>ownedFeature</code> of the <code>Type</code>.</p>
""" ;
      rdfs:label "typeOwnedFeatureMembership" .

<http://open-services.net/ns/sysmlv2#referenceSubsettingReferencingFeature>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Feature</code> that owns this <code>ReferenceSubsetting</code> relationship, which is also its <code>subsettingFeature</code>.</p>
""" ;
      rdfs:label "referenceSubsettingReferencingFeature" .

<http://open-services.net/ns/sysmlv2#LiteralInfinity>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>LiteralInfinity</code> is a <code>LiteralExpression</code> that provides the positive infinity value (<code>*</code>). It's <code>result</code> must have the type <code><em>Positive</em></code>.</p>

specializesFromLibrary('Performances::literalIntegerEvaluations')""" ;
      rdfs:label "LiteralInfinity" .

<http://open-services.net/ns/sysmlv2#InterfaceUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>InterfaceUsage</code> is a Usage of an <code>InterfaceDefinition</code> to represent an interface connecting parts of a system through specific ports.</p>
ownedEndFeature->size() = 2 implies
    specializesFromLibrary('Interfaces::binaryInterfaces')
specializesFromLibrary('Interfaces::interfaces')""" ;
      rdfs:label "InterfaceUsage" .

<http://open-services.net/ns/sysmlv2#featureOwnedRedefinition>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ownedSubsettings</code> of this <code>Feature</code> that are <code>Redefinitions</code>, for which the <code>Feature</code> is the <code>redefiningFeature</code>.</p>

""" ;
      rdfs:label "featureOwnedRedefinition" .

<http://open-services.net/ns/sysmlv2#importImportOwningNamespace>
      a       rdf:Property ;
      rdfs:comment """<p>The Namespace into which Memberships are imported by this Import, which must be the <code>owningRelatedElement</code> of the Import.</p> 
""" ;
      rdfs:label "importImportOwningNamespace" .

<http://open-services.net/ns/sysmlv2#interfaceUsageInterfaceDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>InterfaceDefinitions</code> that type this <code>InterfaceUsage</code>.</p>" ;
      rdfs:label "interfaceUsageInterfaceDefinition" .

<http://open-services.net/ns/sysmlv2#PerformActionUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>PerformActionUsage</code> is an <code>ActionUsage</code> that represents the performance of an <code>ActionUsage</code>. Unless it is the <code>PerformActionUsage</code> itself, the <code>ActionUsage</code> to be performed is related to the <code>PerformActionUsage</code> by a <code>ReferenceSubsetting</code> relationship. A <code>PerformActionUsage</code> is also an <code>EventOccurrenceUsage</code>, with its <code>performedAction</code> as the <code>eventOccurrence</code>.</p>
ownedReferenceSubsetting <> null implies
    ownedReferenceSubsetting.referencedFeature.oclIsKindOf(ActionUsage)
owningType <> null and
(owningType.oclIsKindOf(PartDefinition) or
 owningType.oclIsKindOf(PartUsage)) implies
    specializesFromLibrary('Parts::Part::performedActions')""" ;
      rdfs:label "PerformActionUsage" .

<http://open-services.net/ns/sysmlv2#TransitionUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>TransitionUsage</code> is an <code>ActionUsage</code> representing a triggered transition between <code>ActionUsages</code> or <code>StateUsages</code>. When triggered by a <code>triggerAction</code>, when its <code>guardExpression</code> is true, the <code>TransitionUsage</code> asserts that its <code>source</code> is exited, then its <code>effectAction</code> (if any) is performed, and then its <code>target</code> is entered.</p>

<p>A <code>TransitionUsage</code> can be related to some of its <code>ownedFeatures</code> using <code>TransitionFeatureMembership</code> <code>Relationships</code>, corresponding to the <code>triggerAction</code>, <code>guardExpression</code> and <code>effectAction</code> of the <code>TransitionUsage</code>.</p>
isComposite and owningType <> null and
(owningType.oclIsKindOf(ActionDefinition) or 
 owningType.oclIsKindOf(ActionUsage)) and
not (owningType.oclIsKindOf(StateDefinition) or
     owningType.oclIsKindOf(StateUsage)) implies
    specializesFromLibrary('Actions::Action::decisionTransitions')
isComposite and owningType <> null and
(owningType.oclIsKindOf(StateDefinition) or
 owningType.oclIsKindOf(StateUsage)) implies
    specializesFromLibrary(\"States::State::stateTransitions\")
specializesFromLibrary('Actions::transitionActions')
source =
    if ownedMembership->isEmpty() then null
    else
        let member : Element = 
            ownedMembership->at(1).memberElement in 
        if not member.oclIsKindOf(ActionUsage) then null
        else member.oclAsKindOf(ActionUsage)
        endif
    endif
target =
    if succession.targetFeature->isEmpty() then null
    else
        let targetFeature : Feature = 
            succession.targetFeature->at(1) in
        if not targetFeature.oclIsKindOf(ActionUsage) then null
        else targetFeature.oclAsType(ActionUsage)
        endif
    endif
triggerAction = ownedFeatureMembership->
    selectByKind(TransitionFeatureMembership)->
    select(kind = TransitionFeatureKind::trigger).transitionFeature->
    selectByKind(AcceptActionUsage)
let successions : Sequence(Successions) = 
    ownedMember->selectByKind(Succession) in
successions->notEmpty() and
successions->at(1).targetFeature->
    forAll(oclIsKindOf(ActionUsage))
guardExpression = ownedFeatureMembership->
    selectByKind(TransitionFeatureMembership)->
    select(kind = TransitionFeatureKind::trigger).transitionFeature->
    selectByKind(Expression)
triggerAction->forAll(specializesFromLibrary('Actions::TransitionAction::accepter') and
guardExpression->forAll(specializesFromLibrary('Actions::TransitionAction::guard') and
effectAction->forAll(specializesFromLibrary('Actions::TransitionAction::effect'))
triggerAction = ownedFeatureMembership->
    selectByKind(TransitionFeatureMembership)->
    select(kind = TransitionFeatureKind::trigger).transitionFeatures->
    selectByKind(AcceptActionUsage)
succession.sourceFeature = source
ownedMember->selectByKind(BindingConnector)->exists(b |
    b.relatedFeatures->includes(source) and
    b.relatedFeatures->includes(inputParameter(1)))
triggerAction->notEmpty() implies
    let payloadParameter : Feature = inputParameter(2) in
    payloadParameter <> null and
    payloadParameter.subsetsChain(triggerAction->at(1), triggerPayloadParameter())
ownedMember->selectByKind(BindingConnector)->exists(b |
    b.relatedFeatures->includes(succession) and
    b.relatedFeatures->includes(resolveGlobal(
        'TransitionPerformances::TransitionPerformance::transitionLink')))
if triggerAction->isEmpty() then
    inputParameters()->size() >= 1
else
    inputParameters()->size() >= 2
endif
    
succession = ownedMember->selectByKind(Succession)->at(1)""" ;
      rdfs:label "TransitionUsage" .

<http://open-services.net/ns/sysmlv2#definitionUsage>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Usages</code> that are <code>features</code> of this <code>Definition</code> (not necessarily owned).</p>" ;
      rdfs:label "definitionUsage" .

<http://open-services.net/ns/sysmlv2#VerificationCaseUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>VerificationCaseUsage</code> is a </code>Usage</code> of a <code>VerificationCaseDefinition</code>.</p>
verifiedRequirement =
    if objectiveRequirement = null then OrderedSet{}
    else 
        objectiveRequirement.featureMembership->
            selectByKind(RequirementVerificationMembership).
            verifiedRequirement->asOrderedSet()
    endif
specializesFromLibrary('VerificationCases::verificationCases')
isComposite and owningType <> null and
    (owningType.oclIsKindOf(VerificationCaseDefinition) or
     owningType.oclIsKindOf(VerificationCaseUsage)) implies 
    specializesFromLibrary('VerificationCases::VerificationCase::subVerificationCases')""" ;
      rdfs:label "VerificationCaseUsage" .

<http://open-services.net/ns/sysmlv2#PortDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>PortDefinition</code> defines a point at which external entities can connect to and interact with a system or part of a system. Any <code>ownedUsages</code> of a <code>PortDefinition</code>, other than <code>PortUsages</code>, must not be composite.</p>



conjugatedPortDefinition = 
let conjugatedPortDefinitions : OrderedSet(ConjugatedPortDefinition) =
    ownedMember->selectByKind(ConjugatedPortDefinition) in
if conjugatedPortDefinitions->isEmpty() then null
else conjugatedPortDefinitions->first()
endif
ownedUsage->
    reject(oclIsKindOf(PortUsage))->
    forAll(not isComposite)
not oclIsKindOf(ConjugatedPortDefinition) implies
    ownedMember->
        selectByKind(ConjugatedPortDefinition)->
        size() = 1
specializesFromLibrary('Ports::Port')""" ;
      rdfs:label "PortDefinition" .

<http://open-services.net/ns/sysmlv2#constraintUsageConstraintDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The (single) <code>Predicate</code> that is the type of this <code>ConstraintUsage</code>. Nominally, this will be a <code>ConstraintDefinition</code>, but other kinds of <code>Predicates</code> are also allowed, to permit use of <code>Predicates</code> from the Kernel Model Libraries.</p>" ;
      rdfs:label "constraintUsageConstraintDefinition" .

<http://open-services.net/ns/sysmlv2#elementDocumentation>
      a       rdf:Property ;
      rdfs:comment "<p>The Documentation owned by this Element.</p>" ;
      rdfs:label "elementDocumentation" .

<http://open-services.net/ns/sysmlv2#stateDefinitionExitAction>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ActionUsage</code> of this <code>StateDefinition</code> to be performed on exit to the state defined by the <code>StateDefinition</code>. It is the owned <code>ActionUsage</code> related to the <code>StateDefinition</code> by a <code>StateSubactionMembership</code>  with <code>kind = exit</code>.</p>" ;
      rdfs:label "stateDefinitionExitAction" .

<http://open-services.net/ns/sysmlv2#parameterMembershipOwnedMemberParameter>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Feature</code> that is identified as a <code>parameter</code> by this <code>ParameterMembership</code>.</p>
""" ;
      rdfs:label "parameterMembershipOwnedMemberParameter" .

<http://open-services.net/ns/sysmlv2#usageNestedRequirement>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>RequirementUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>.</p>
""" ;
      rdfs:label "usageNestedRequirement" .

<http://open-services.net/ns/sysmlv2#definitionOwnedTransition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>TransitionUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.</p>" ;
      rdfs:label "definitionOwnedTransition" .

<http://open-services.net/ns/sysmlv2#associationRelatedType>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>types</code> of the <code>associationEnds</code> of the <code>Association</code>, which are the <code>relatedElements</code> of the <code>Association</code> considered as a <code>Relationship</code>.</p>
""" ;
      rdfs:label "associationRelatedType" .

<http://open-services.net/ns/sysmlv2#LiteralInteger>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>LiteralInteger</code> is a <code>LiteralExpression</code> that provides an <code><em>Integer</em></code> value as a result. Its <code>result</code> <code>parameter</code> must have the type <code><em>Integer</em></code>.</p>

specializesFromLibrary('Performances::literalIntegerEvaluations')""" ;
      rdfs:label "LiteralInteger" .

<http://open-services.net/ns/sysmlv2#specializationOwningType>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Type</code> that is the <code>specific</code> <code>Type</code> of this <code>Specialization</code> and owns it as its <code>owningRelatedElement</code>.</p>
""" ;
      rdfs:label "specializationOwningType" .

<http://open-services.net/ns/sysmlv2#ViewpointDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>ViewpointDefinition</code> is a <code>RequirementDefinition</code> that specifies one or more stakeholder concerns that are to be satisfied by creating a view of a model.</p>
viewpointStakeholder = framedConcern.featureMemberhsip->
    selectByKind(StakeholderMembership).
    ownedStakeholderParameter
specializesFromLibrary('Views::Viewpoint')""" ;
      rdfs:label "ViewpointDefinition" .

<http://open-services.net/ns/sysmlv2#LoopActionUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>LoopActionUsage</code> is an <code>ActionUsage</code> that specifies that its <code>bodyAction</code> should be performed repeatedly. Its subclasses <code>WhileLoopActionUsage</code> and <code>ForLoopActionUsage</code> provide different ways to determine how many times the <code>bodyAction</code> should be performed.</p>
bodyAction =
    let parameter : Feature = inputParameter(2) in
    if parameter <> null and parameter.oclIsKindOf(Action) then
        parameter.oclAsType(Action)
    else
        null
    endif
""" ;
      rdfs:label "LoopActionUsage" .

<http://open-services.net/ns/sysmlv2#conjugationOriginalType>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Type</code> to be conjugated.</p>
""" ;
      rdfs:label "conjugationOriginalType" .

<http://open-services.net/ns/sysmlv2#typeIsConjugated>
      a       rdf:Property ;
      rdfs:comment """<p>Indicates whether this <code>Type</code> has an <code>ownedConjugator</code>.</p>
""" ;
      rdfs:label "typeIsConjugated" .

<http://open-services.net/ns/sysmlv2#MembershipExpose>
      a       rdfs:Class ;
      rdfs:comment "<p>A <code>MembershipExpose</code> is an <code>Expose</code> <code.Relationship</code> that exposes a specific <code>importedMembership</code> and, if <code>isRecursive = true</code>, additional <code>Memberships</code> recursively.</p>" ;
      rdfs:label "MembershipExpose" .

<http://open-services.net/ns/sysmlv2#invocationExpressionOperand>
      a       rdf:Property ;
      rdfs:label "invocationExpressionOperand" .

<http://open-services.net/ns/sysmlv2#functionResult>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>result</code> <code>parameter</code> of the <code>Function</code>, which is owned by the <code>Function</code> via a <code>ReturnParameterMembership</code>.</p>

<p>The object or value that is the result of evaluating the Function.</p>""" ;
      rdfs:label "functionResult" .

<http://open-services.net/ns/sysmlv2#calculationDefinitionCalculation>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>actions</code> of this <code>CalculationDefinition</code> that are <code>CalculationUsages</code>.</p>" ;
      rdfs:label "calculationDefinitionCalculation" .

<http://open-services.net/ns/sysmlv2#featureFeaturingType>
      a       rdf:Property ;
      rdfs:comment "<p><code>Types</code> that feature this <code>Feature</code>, such that any instance in the domain of the <code>Feature</code> must be classified by all of these <code>Types</code>, including at least all the <code>featuringTypes</code> of its <code>typeFeaturings</code>.  If the <code>Feature</code> is chained, then the <code>featuringTypes</code> of the first <code>Feature</code> in the chain are also <code>featuringTypes</code> of the chained <code>Feature</code>.</p>" ;
      rdfs:label "featureFeaturingType" .

<http://open-services.net/ns/sysmlv2#requirementConstraintMembershipOwnedConstraint>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ConstraintUsage</code> that is the <code>ownedMemberFeature</code> of this <code>RequirementConstraintMembership</code>.</p>" ;
      rdfs:label "requirementConstraintMembershipOwnedConstraint" .

<http://open-services.net/ns/sysmlv2#ActorMembership>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>ActorMembership</code> is a <code>ParameterMembership</code> that identifies a <code>PartUsage</code> as an <em>actor</em> <code>parameter</code>, which specifies a role played by an external entity in interaction with the <code>owningType</code> of the <code>ActorMembership</code>.</p>
owningType.oclIsKindOf(RequirementUsage) or
owningType.oclIsKindOf(RequirementDefinition) or
owningType.oclIsKindOf(CaseDefinition) or
owningType.oclIsKindOf(CaseUsage)
""" ;
      rdfs:label "ActorMembership" .

<http://open-services.net/ns/sysmlv2#functionExpression>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Expressions</code> that are <code>steps</code> in the calculation of the <code>result</code> of this <code>Function</code>.</p>

<p>The set of expressions that represent computational steps or parts of a system of equations within the Function.</p>
""" ;
      rdfs:label "functionExpression" .

<http://open-services.net/ns/sysmlv2#featureOwningType>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Type</code> that is the <code>owningType</code> of the <code>owningFeatureMembership</code> of this <code>Feature</code>.</p>" ;
      rdfs:label "featureOwningType" .

<http://open-services.net/ns/sysmlv2#ViewRenderingMembership>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>ViewRenderingMembership</code> is a <coed>FeatureMembership</code> that identifies the <code>viewRendering</code> of a <code>ViewDefinition</code> or <code>ViewUsage</code>.</p>
referencedRendering =
    let reference: ReferenceSubsetting = 
        ownedRendering.ownedReferenceSubsetting in
    if reference = null then ownedRendering
    else if not reference.referencedFeature.oclIsKindOf(RenderingUsage) then null
    else reference.referencedFeature.oclAsType(RenderingUsage)
    endif
owningType.oclIsKindOf(ViewDefinition) or
owningType.oclIsKindOf(ViewUsage)""" ;
      rdfs:label "ViewRenderingMembership" .

<http://open-services.net/ns/sysmlv2#Import>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>Import</code> is an <code>Relationship</code> between its <code>importOwningNamespace</code> and either a <code>Membership</code> (for a <code>MembershipImport</code>) or another <code>Namespace</code> (for a <code>NamespaceImport</code>), which determines a set of <code>Memberships</code> that become <code>importedMemberships</code> of the <code>importOwningNamespace</code>. If <code>isImportAll = false</code> (the default), then only public <code>Memberships</code> are considered &quot;visible&quot;. If <code>isImportAll = true</code>, then all <code>Memberships</code> are considered &quot;visible&quot;, regardless of their declared <code>visibility</code>. If <code>isRecursive = true</code>, then visible <code>Memberships</code> are also recursively imported from owned sub-<code>Namespaces</code>.</p>

""" ;
      rdfs:label "Import" .

<http://open-services.net/ns/sysmlv2#Behavior>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>Behavior </code>coordinates occurrences of other <code>Behaviors</code>, as well as changes in objects. <code>Behaviors</code> can be decomposed into <code>Steps</code> and be characterized by <code>parameters</code>.</p>

specializesFromLibrary('Performances::Performance')
step = feature->selectByKind(Step)
ownedSpecialization.general->forAll(not oclIsKindOf(Structure))""" ;
      rdfs:label "Behavior" .

<http://open-services.net/ns/sysmlv2#renderingUsageRenderingDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>RenderingDefinition</code> that is the <code>definition</code> of this <code>RenderingUsage</code>.</p>" ;
      rdfs:label "renderingUsageRenderingDefinition" .

<http://open-services.net/ns/sysmlv2#requirementUsageRequirementDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>RequirementDefinition</code> that is the single <code>definition</code> of this <code>RequirementUsage</code>.</p>" ;
      rdfs:label "requirementUsageRequirementDefinition" .

<http://open-services.net/ns/sysmlv2#requirementUsageRequiredConstraint>
      a       rdf:Property ;
      rdfs:comment "<p>The owned <code>ConstraintUsages</code> that represent requirements of this <code>RequirementUsage</code>, which are the <code>ownedConstraints</code> of the <code>RequirementConstraintMemberships</code> of the <code>RequirementUsage</code> with <code>kind</code> = <code>requirement</code>.</p>" ;
      rdfs:label "requirementUsageRequiredConstraint" .

<http://open-services.net/ns/sysmlv2#disjoiningTypeDisjoined>
      a       rdf:Property ;
      rdfs:comment """<p><code>Type</code> asserted to be disjoint with the <code>disjoiningType</code>.</p>
""" ;
      rdfs:label "disjoiningTypeDisjoined" .

<http://open-services.net/ns/sysmlv2#Expose>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>Expose</code> is an <code>Import</code> of <code>Memberships</code> into a <code>ViewUsage</code> that provide the <code>Elements</code> to be included in a view. Visibility is always ignored for an <code>Expose</code> (i.e., <code>isImportAll = true</code>).</p>
isImportAll
importOwningNamespace.oclIsType(ViewUsage)""" ;
      rdfs:label "Expose" .

<http://open-services.net/ns/sysmlv2#usageNestedVerificationCase>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>VerificationCaseUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>.</p> 
""" ;
      rdfs:label "usageNestedVerificationCase" .

<http://open-services.net/ns/sysmlv2#itemFlowItemFeature>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ownedFeature</code> of the <code>ItemFlow</code> that is an <code>ItemFeature</code> (if any).</p>
""" ;
      rdfs:label "itemFlowItemFeature" .

<http://open-services.net/ns/sysmlv2#differencingDifferencingType>
      a       rdf:Property ;
      rdfs:comment """<p><code>Type</code> that partly determines interpretations of <code>typeDifferenced</code>, as described in <code>Type::differencingType</code>.</p>
""" ;
      rdfs:label "differencingDifferencingType" .

<http://open-services.net/ns/sysmlv2#RequirementUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>RequirementUsage</code> is a <code>Usage</code> of a <code>RequirementDefinition</code>.</p>
actorParameter = featureMembership->
    selectByKind(ActorMembership).
    ownedActorParameter
assumedConstraint = ownedFeatureMembership->
    selectByKind(RequirementConstraintMembership)->
    select(kind = RequirementConstraintKind::assumption).
    ownedConstraint
framedConcern = featureMembership->
    selectByKind(FramedConcernMembership).
    ownedConcern
requiredConstraint = ownedFeatureMembership->
    selectByKind(RequirementConstraintMembership)->
    select(kind = RequirementConstraintKind::requirement).
    ownedConstraint
stakeholderParameter = featureMembership->
    selectByKind(AStakholderMembership).
    ownedStakeholderParameter
subjectParameter =
    let subjects : OrderedSet(SubjectMembership) = 
        featureMembership->selectByKind(SubjectMembership) in
    if subjects->isEmpty() then null
    else subjects->first().ownedSubjectParameter
    endif
text = documentation.body
featureMembership->
    selectByKind(SubjectMembership)->
    size() <= 1
input->notEmpty() and input->first() = subjectParameter
specializesFromLibrary('Requirements::requirementChecks')
isComposite and owningType <> null and
    (owningType.oclIsKindOf(RequirementDefinition) or
     owningType.oclIsKindOf(RequirementUsage)) implies
    specializesFromLibrary('Requirements::RequirementCheck::subrequirements')
owningfeatureMembership <> null and
owningfeatureMembership.oclIsKindOf(ObjectiveMembership) implies
    owningType.ownedSpecialization.general->forAll(gen |
        (gen.oclIsKindOf(CaseDefinition) implies
            redefines(gen.oclAsType(CaseDefinition).objectiveRequirement)) and
        (gen.oclIsKindOf(CaseUsage) implies
            redefines(gen.oclAsType(CaseUsage).objectiveRequirement))
owningFeatureMembership <> null and
owningFeatureMembership.oclIsKindOf(RequirementVerificationMembership) implies
    specializesFromLibrary('VerificationCases::VerificationCase::obj::requirementVerifications')""" ;
      rdfs:label "RequirementUsage" .

<http://open-services.net/ns/sysmlv2#namespaceOwnedImport>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ownedRelationships</code> of this <code>Namespace</code> that are <code>Imports</code>, for which the <code>Namespace</code> is the <code>importOwningNamespace</code>.</p>
""" ;
      rdfs:label "namespaceOwnedImport" .

<http://open-services.net/ns/sysmlv2#CaseUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>CaseUsage</code> is a <code>Usage</code> of a <code>CaseDefinition</code>.</p>
objectiveRequirement = 
    let objectives: OrderedSet(RequirementUsage) = 
        featureMembership->
            selectByKind(ObjectiveMembership).
            ownedRequirement in
    if objectives->isEmpty() then null
    else objectives->first().ownedObjectiveRequirement
    endif
featureMembership->
    selectByKind(ObjectiveMembership)->
    size() <= 1
featureMembership->
	selectByKind(SubjectMembership)->
	size() <= 1
actorParameter = featureMembership->
    selectByKind(ActorMembership).
    ownedActorParameter
subjectParameter =
    let subjects : OrderedSet(SubjectMembership) = 
        featureMembership->selectByKind(SubjectMembership) in
    if subjects->isEmpty() then null
    else subjects->first().ownedSubjectParameter
    endif
input->notEmpty() and input->first() = subjectParameter
specializesFromLibrary('Cases::cases')
isComposite and owningType <> null and 
    (owningType.oclIsKindOf(CaseDefinition) or
     owningType.oclIsKindOf(CaseUsage)) implies
    specializesFromLibrary('Cases::Case::subcases')""" ;
      rdfs:label "CaseUsage" .

<http://open-services.net/ns/sysmlv2#featureChainExpressionTargetFeature>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Feature</code> that is accessed by this <code>FeatureChainExpression<code>, which is its first non-<code>parameter</code> <code>member</code>.<p>" ;
      rdfs:label "featureChainExpressionTargetFeature" .

<http://open-services.net/ns/sysmlv2#usageNestedConstraint>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ConstraintUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>.</p>
""" ;
      rdfs:label "usageNestedConstraint" .

<http://open-services.net/ns/sysmlv2#requirementDefinitionAssumedConstraint>
      a       rdf:Property ;
      rdfs:comment "<p>The owned <code>ConstraintUsages</code> that represent assumptions of this <code>RequirementDefinition</code>, which are the <code>ownedConstraints</code> of the <code>RequirementConstraintMemberships</code> of the <code>RequirementDefinition</code> with <code>kind = assumption</code>.</p>" ;
      rdfs:label "requirementDefinitionAssumedConstraint" .

<http://open-services.net/ns/sysmlv2#OwningMembership>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>OwningMembership</code> is a <code>Membership</code> that owns its <code>memberElement</code> as a <code>ownedRelatedElement</code>. The <code>ownedMemberElement</code> becomes an <code>ownedMember</code> of the <code>membershipOwningNamespace</code>.</p>

ownedMemberName = ownedMemberElement.name
ownedMemberShortName = ownedMemberElement.shortName""" ;
      rdfs:label "OwningMembership" .

<http://open-services.net/ns/sysmlv2#Function>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>Function</code> is a <code>Behavior</code> that has an <code>out</code> <code>parameter</code> that is identified as its <code>result</code>. A <code>Function</code> represents the performance of a calculation that produces the values of its <code>result</code> <code>parameter</code>. This calculation may be decomposed into <code>Expressions</code> that are <code>steps</code> of the <code>Function</code>.</p>

ownedMembership.selectByKind(ResultExpressionMembership)->
    forAll(mem | ownedFeature.selectByKind(BindingConnector)->
        exists(binding |
            binding.relatedFeature->includes(result) and
            binding.relatedFeature->includes(mem.ownedResultExpression.result)))
specializesFromLibrary('Performances::Evaluation')
result =
    let resultParams : Sequence(Feature) =
        ownedFeatureMemberships->
            selectByKind(ReturnParameterMembership).
            ownedParameterMember in
    if resultParams->notEmpty() then resultParams->first()
    else null
    endif
ownedFeatureMembership->
    selectByKind(ReturnParameterMembership)->
    size() <= 1
membership->selectByKind(ResultExpressionMembership)->size() <= 1""" ;
      rdfs:label "Function" .

<http://open-services.net/ns/sysmlv2#Redefinition>
      a       rdfs:Class ;
      rdfs:comment """<p><code>Redefinition</code> is a kind of <code>Subsetting</code> that requires the <code>redefinedFeature</code> and the <code>redefiningFeature</code> to have the same values (on each instance of the domain of the <code>redefiningFeature</code>). This means any restrictions on the <code>redefiningFeature</code>, such as <code>type</code> or <code>multiplicity</code>, also apply to the <code>redefinedFeature</code> (on each instance of the domain of the <code>redefiningFeature</code>), and vice versa. The <code>redefinedFeature</code> might have values for instances of the domain of the <code>redefiningFeature</code>, but only as instances of the domain of the <code>redefinedFeature</code> that happen to also be instances of the domain of the <code>redefiningFeature</code>. This is supported by the constraints inherited from <code>Subsetting</code> on the domains of the <code>redefiningFeature</code> and <code>redefinedFeature</code>. However, these constraints are narrowed for <code>Redefinition</code> to require the <code>owningTypes</code> of the <code>redefiningFeature</code> and <code>redefinedFeature</code> to be different and the <code>redefinedFeature</code> to not be inherited into the <code>owningNamespace</code> of the <code>redefiningFeature</code>.This enables the <code>redefiningFeature</code> to have the same name as the <code>redefinedFeature</code>, if desired.</p>

let anythingType: Type =
    redefiningFeature.resolveGlobal('Base::Anything').modelElement.oclAsType(Type) in 
-- Including \"Anything\" accounts for implicit featuringType of Features
-- with no explicit featuringType.
let redefiningFeaturingTypes: Set(Type) =
    redefiningFeature.featuringTypes->asSet()->including(anythingType) in
let redefinedFeaturingTypes: Set(Type) =
    redefinedFeature.featuringTypes->asSet()->including(anythingType) in
redefiningFeaturingTypes <> redefinedFeaturingType
featuringType->forAll(t |
    let direction : FeatureDirectionKind = t.directionOf(redefinedFeature) in
    ((direction = FeatureDirectionKind::_'in' or 
      direction = FeatureDirectionKind::out) implies
         redefiningFeature.direction = direction)
    and 
    (direction = FeatureDirectionKind::inout implies
        redefiningFeature.direction <> null))""" ;
      rdfs:label "Redefinition" .

<http://open-services.net/ns/sysmlv2#associationSourceType>
      a       rdf:Property ;
      rdfs:comment """<p>The source <code>relatedType</code> for this <code>Association</code>. It is the first <code>relatedType</code> of the <code>Association</code>.</p>
""" ;
      rdfs:label "associationSourceType" .

<http://open-services.net/ns/sysmlv2#conjugatedPortDefinitionOriginalPortDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The original <code>PortDefinition</code> for this <code>ConjugatedPortDefinition</code>, which is the <code>owningNamespace</code> of the <code>ConjugatedPortDefinition</code>.</p>" ;
      rdfs:label "conjugatedPortDefinitionOriginalPortDefinition" .

<http://open-services.net/ns/sysmlv2#specializationSpecific>
      a       rdf:Property ;
      rdfs:comment """<p>A <code>Type</code> with a subset of all instances of the <code>general</code> <code>Type</code>, which might be the same set.</p>
""" ;
      rdfs:label "specializationSpecific" .

<http://open-services.net/ns/sysmlv2#requirementUsageText>
      a       rdf:Property ;
      rdfs:comment "<p>An optional textual statement of the requirement represented by this <code>RequirementUsage</code>, derived from the <code>bodies<code> of the <code>documentation</code> of the <code>RequirementUsage</code>.</p>" ;
      rdfs:label "requirementUsageText" .

<http://open-services.net/ns/sysmlv2#elementQualifiedName>
      a       rdf:Property ;
      rdfs:comment "<p>The full ownership-qualified name of this <code>Element</code>, represented in a form that is valid according to the KerML textual concrete syntax for qualified names (including use of unrestricted name notation and escaped characters, as necessary). The <code>qualifiedName</code> is null if this <code>Element</code> has no <code>owningNamespace</code> or if there is not a complete ownership chain of named <code>Namespaces</code> from a root <code>Namespace</code> to this <code>Element</code>.</p>" ;
      rdfs:label "elementQualifiedName" .

<http://open-services.net/ns/sysmlv2#definitionOwnedAttribute>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>AttributeUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.<p>" ;
      rdfs:label "definitionOwnedAttribute" .

<http://open-services.net/ns/sysmlv2#AnalysisCaseDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>AnalysisCaseDefinition</code> is a <code>CaseDefinition</code> for the case of carrying out an analysis.</p>
analysisAction = action->select(
    isComposite and 
    specializes('AnalysisCases::AnalysisAction'))
resultExpression =
    let results : OrderedSet(ResultExpressionMembership) =
        featureMembersip->
            selectByKind(ResultExpressionMembership) in
    if results->isEmpty() then null
    else results->first().ownedResultExpression
    endif
specializesFromLibrary('AnalysisCases::AnalysisCase')""" ;
      rdfs:label "AnalysisCaseDefinition" .

<http://open-services.net/ns/sysmlv2#definitionOwnedPort>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>PortUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.</p>" ;
      rdfs:label "definitionOwnedPort" .

<http://open-services.net/ns/sysmlv2#featureChainingFeatureChained>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Feature</code> whose values are partly determined by values of the <code>chainingFeature</code>, as described in <code>Feature::chainingFeature</code>.</p>
""" ;
      rdfs:label "featureChainingFeatureChained" .

<http://open-services.net/ns/sysmlv2#featureOwnedReferenceSubsetting>
      a       rdf:Property ;
      rdfs:comment "<p>The one <code>ownedSubsetting</code> of this <code>Feature</code>, if any, that is a <code>ReferenceSubsetting</code>, for which the <code>Feature</code> is the <code>referencingFeature</code>.</p>" ;
      rdfs:label "featureOwnedReferenceSubsetting" .

<http://open-services.net/ns/sysmlv2#Unioning>
      a       rdfs:Class ;
      rdfs:comment """<p><code>Unioning</code> is a <code>Relationship</code> that makes its <code>unioningType</code> one of the <code>unioningTypes</code> of its <code>typeUnioned</code>.</p>
""" ;
      rdfs:label "Unioning" .

<http://open-services.net/ns/sysmlv2#featureValueIsInitial>
      a       rdf:Property ;
      rdfs:comment "<p>Whether this <code>FeatureValue</code> specifies a bound value or an initial value for the <code>featureWithValue</code>.</p>" ;
      rdfs:label "featureValueIsInitial" .

<http://open-services.net/ns/sysmlv2#SuccessionFlowConnectionUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>SuccessionFlowConnectionUsage</code> is a <code>FlowConnectionUsage</code> that is also a <code>SuccessionItemFlow</code>.</p>
specializesFromLibrary('Connections::successionFlowConnections')""" ;
      rdfs:label "SuccessionFlowConnectionUsage" .

<http://open-services.net/ns/sysmlv2#Namespace>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>Namespace</code> is an <code>Element</code> that contains other <code>Elements</code>, known as its <code>members</code>, via <code>Membership</code> <code>Relationships</code> with those <code>Elements</code>. The <code>members</code> of a <code>Namespace</code> may be owned by the <code>Namespace</code>, aliased in the <code>Namespace</code>, or imported into the <code>Namespace</code> via <code>Import</code> <code>Relationships</code>.</p>

<p>A <code>Namespace</code> can provide names for its <code>members</code> via the <code>memberNames</code> and <code>memberShortNames</code> specified by the <code>Memberships</code> in the <code>Namespace</code>. If a <code>Membership</code> specifies a <code>memberName</code> and/or <code>memberShortName</code>, then those are names of the corresponding <code>memberElement</code> relative to the <code>Namespace</code>. For an <code>OwningMembership</code>, the <code>owningMemberName</code> and <code>owningMemberShortName</code> are given by the <code>Element</code> <code>name</code> and <code>shortName</code>. Note that the same <code>Element</code> may be the <code>memberElement</code> of multiple <code>Memberships</code> in a <code>Namespace</code> (though it may be owned at most once), each of which may define a separate alias for the <code>Element</code> relative to the <code>Namespace</code>.</p>

membership->forAll(m1 | 
    membership->forAll(m2 | 
        m1 <> m2 implies m1.isDistinguishableFrom(m2)))
member = membership.memberElement
ownedMember = ownedMembership->selectByKind(OwningMembership).ownedMemberElement
importedMembership = importedMemberships(Set{})
ownedImport = ownedRelationship->selectByKind(Import)
ownedMembership = ownedRelationship->selectByKind(Membership)""" ;
      rdfs:label "Namespace" .

<http://open-services.net/ns/sysmlv2#portConjugationConjugatedPortDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ConjugatedPortDefinition</code> that is conjugate to the <code>originalPortDefinition</code>.</p>" ;
      rdfs:label "portConjugationConjugatedPortDefinition" .

<http://open-services.net/ns/sysmlv2#usageNestedOccurrence>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>OccurrenceUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>.</p>" ;
      rdfs:label "usageNestedOccurrence" .

<http://open-services.net/ns/sysmlv2#Dependency>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>Dependency</code> is a <code>Relationship</code> that indicates that one or more <code>client</code> <code>Elements</code> require one more <code>supplier</code> <code>Elements</code> for their complete specification. In general, this means that a change to one of the <code>supplier</code> <code>Elements</code> may necessitate a change to, or re-specification of, the <code>client</code> <code>Elements</code>.</p>

<p>Note that a <code>Dependency</code> is entirely a model-level <code>Relationship</code>, without instance-level semantics.</p>""" ;
      rdfs:label "Dependency" .

<http://open-services.net/ns/sysmlv2#flowConnectionUsageFlowConnectionDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Interactions</code> that are the <code>types</code> of this <code>FlowConnectionUsage</code>. Nominally, these are <code>FlowConnectionDefinitions</code>, but other kinds of Kernel <code>Interactions</code> are also allowed, to permit use of Interactions from the Kernel Model Libraries.</p>" ;
      rdfs:label "flowConnectionUsageFlowConnectionDefinition" .

<http://open-services.net/ns/sysmlv2#stepBehavior>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Behaviors</code> that type this <code>Step</code>.</p>
""" ;
      rdfs:label "stepBehavior" .

<http://open-services.net/ns/sysmlv2#OccurrenceDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>OccurrenceDefinition</code> is a <code>Definition</code> of a <code>Class</code> of individuals that have an independent life over time and potentially an extent over space. This includes both structural things and behaviors that act on such structures.</p>

<p>If <code>isIndividual</code> is true, then the <code>OccurrenceDefinition</code> is constrained to represent an individual thing. The instances of such an <code>OccurrenceDefinition</code> include all spatial and temporal portions of the individual being represented, but only one of these can be the complete <code>Life</code> of the individual. All other instances must be portions of the &quot;maximal portion&quot; that is single <code>Life</code> instance, capturing the conception that all of the instances represent one individual with a single &quot;identity&quot;.</p>

<p>An <code>OccurrenceDefinition</code> must specialize, directly or indirectly, the base <code>Class</code> <code><em>Occurrence</em></code> from the Kernel Semantic Library.</p>

let n : Integer = ownedMember->selectByKind(LifeClass) in
if isIndividual then n = 1 else n = 0 endif
lifeClass =
    let lifeClasses: OrderedSet(LifeClass) = 
        ownedMember->selectByKind(LifeClass) in
    if lifeClasses->isEmpty() then null
    else lifeClasses->first()
    endif""" ;
      rdfs:label "OccurrenceDefinition" .

<http://open-services.net/ns/sysmlv2#usageNestedCase>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>CaseUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>.</p>
""" ;
      rdfs:label "usageNestedCase" .

<http://open-services.net/ns/sysmlv2#enumerationDefinitionEnumeratedValue>
      a       rdf:Property ;
      rdfs:comment "<p><code>EnumerationUsages</code> of this <code>EnumerationDefinition</code>that have distinct, fixed values. Each <code>enumeratedValue</code> specifies one of the allowed instances of the <code>EnumerationDefinition</code>.</p>" ;
      rdfs:label "enumerationDefinitionEnumeratedValue" .

<http://open-services.net/ns/sysmlv2#importImportedElement>
      a       rdf:Property ;
      rdfs:comment "<p>The effectively imported <code>Element</code> for this </code>Import</code>. For a <code>MembershipImport</code>, this is the <code>memberElement</code> of the <code>importedMembership</code>. For a <code>NamespaceImport</code>, it is the <code>importedNamespace</code>.</p>" ;
      rdfs:label "importImportedElement" .

<http://open-services.net/ns/sysmlv2#ForLoopActionUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>ForLoopActionUsage</code> is a <code>LoopActionUsage</code> that specifies that its <code>bodyAction</code> <code>ActionUsage</code> should be performed once for each value, in order, from the sequence of values obtained as the result of the <code>seqArgument</code> <code>Expression</code>, with the <code>loopVariable</code> set to the value for each iteration.</p>
seqArgument = argument(1)

isSubactionUsage() implies
    specializesFromLibrary('Actions::Action::forLoops')
loopVariable <> null and
loopVariable.redefinesFromLibrary('Actions::ForLoopAction::var')
specializesFromLibrary('Actions::forLoopActions')
loopVariable =
    if ownedFeature->isEmpty() or 
        not ownedFeature->first().oclIsKindOf(ReferenceUsage) then 
        null
    else 
        ownedFeature->first().oclAsType(ReferenceUsage)
    endif
ownedFeature->notEmpty() and
ownedFeature->at(1).oclIsKindOf(ReferenceUsage)

inputParameters()->size() = 2""" ;
      rdfs:label "ForLoopActionUsage" .

<http://open-services.net/ns/sysmlv2#includeUseCaseUsageUseCaseIncluded>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>UseCaseUsage</code> to be included by this <code>IncludeUseCaseUsage</code>. It is the <code>performedAction</code> of the <code>IncludeUseCaseUsage</code> considered as a <code>PerformActionUsage</code>, which must be a <code>UseCaseUsage</code>.</p> 
""" ;
      rdfs:label "includeUseCaseUsageUseCaseIncluded" .

<http://open-services.net/ns/sysmlv2#classifierOwnedSubclassification>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ownedSpecializations</code> of this <code>Classifier</code> that are <code>Subclassifications</code>, for which this <code>Classifier</code> is the <code>subclassifier</code>.</p>
""" ;
      rdfs:label "classifierOwnedSubclassification" .

<http://open-services.net/ns/sysmlv2#MetadataFeature>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>MetadataFeature</code> is a <code>Feature</code> that is an <code>AnnotatingElement</code> used to annotate another <code>Element</code> with metadata. It is typed by a <code>Metaclass</code>. All its <code>ownedFeatures</code> must redefine <code>features</code> of its <code>metaclass</code> and any feature bindings must be model-level evaluable.</p>


specializesFromLibrary('Metaobjects::metaobjects')
isSemantic() implies
    let annotatedTypes : Sequence(Type) = 
        annotatedElement->selectAsKind(Type) in
    let baseTypes : Sequence(MetadataFeature) = 
        evaluateFeature(resolveGlobal(
            'Metaobjects::SemanticMetadata::baseType').
            memberElement.
            oclAsType(Feature))->
        selectAsKind(MetadataFeature) in
    annotatedTypes->notEmpty() and 
    baseTypes()->notEmpty() and 
    baseTypes()->first().isSyntactic() implies
        let annotatedType : Type = annotatedTypes->first() in
        let baseType : Element = baseTypes->first().syntaxElement() in
        if annotatedType.oclIsKindOf(Classifier) and 
            baseType.oclIsKindOf(Feature) then
            baseType.oclAsType(Feature).type->
                forAll(t | annotatedType.specializes(t))
        else if baseType.oclIsKindOf(Type) then
            annotatedType.specializes(baseType.oclAsType(Type))
        else
            true
        endif
not metaclass.isAbstract
let baseAnnotatedElementFeature : Feature =
    resolveGlobal('Metaobjects::Metaobject::annotatedElement').memberElement.
    oclAsType(Feature) in
let annotatedElementFeatures : OrderedSet(Feature) = feature->
    select(specializes(baseAnnotatedElementFeature))->
    excluding(baseAnnotatedElementFeature) in
annotatedElementFeatures->notEmpty() implies
    let annotatedElementTypes : Set(Feature) =
        annotatedElementFeatures.typing.type->asSet() in
    let metaclasses : Set(Metaclass) =
        annotatedElement.oclType().qualifiedName->collect(qn | 
            resolveGlobal(qn).memberElement.oclAsType(Metaclass)) in
   metaclasses->forAll(m | annotatedElementTypes->exists(t | m.specializes(t)))
ownedFeature->closure(ownedFeature)->forAll(f |
    f.declaredName = null and f.declaredShortName = null and
    f.valuation <> null implies f.valuation.value.isModelLevelEvaluable and
    f.redefinition.redefinedFeature->size() = 1)
metaclass = 
    let metaclassTypes : Sequence(Type) = type->selectByKind(Metaclass) in
    if metaclassTypes->isEmpty() then null
    else metaClassTypes->first()
    endif
type->selectByKind(Metaclass).size() = 1""" ;
      rdfs:label "MetadataFeature" .

<http://open-services.net/ns/sysmlv2#transitionUsageTarget>
      a       rdf:Property ;
      rdfs:comment "<p>The target <code>ActionUsage</code> of this <code>TransitionUsage<code>, which is the <code>targetFeature</code> of the <code>succession</code> for the <code>TransitionUsage</code>.</p>" ;
      rdfs:label "transitionUsageTarget" .

<http://open-services.net/ns/sysmlv2#ifActionUsageElseAction>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ActionUsage</code> that is to be performed if the result of the <code>ifArgument</code> is false. It is the (optional) third <code>parameter</code> of the <code>IfActionUsage</code>.</p> 
""" ;
      rdfs:label "ifActionUsageElseAction" .

<http://open-services.net/ns/sysmlv2#caseUsageActorParameter>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>parameters</code> of this <code>CaseUsage</code> that represent actors involved in the case.</p>" ;
      rdfs:label "caseUsageActorParameter" .

<http://open-services.net/ns/sysmlv2#annotationOwningAnnotatedElement>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>annotatedElement</code> of this <code>Annotation</code>, when it is also its <code>owningRelatedElement</code>.</p>
""" ;
      rdfs:label "annotationOwningAnnotatedElement" .

<http://open-services.net/ns/sysmlv2#literalStringValue>
      a       rdf:Property ;
      rdfs:comment """<p>The <code><em>String</em></code> value that is the result of evaluating this <code>LiteralString</code>.</p>

<p>The String value that is the result of evaluating this Expression.</p>""" ;
      rdfs:label "literalStringValue" .

<http://open-services.net/ns/sysmlv2#ObjectiveMembership>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>ObjectiveMembership</code> is a <code>FeatureMembership</code> that indicates that its <code>ownedObjectiveRequirement</code> is the objective <code>RequirementUsage</code> for its <code>owningType</code>, which must be a <code>CaseDefinition</code> or <code>CaseUsage</code>.</p>
owningType.oclIsType(CaseDefinition) or
owningType.oclIsType(CaseUsage)

ownedObjectiveRequirement.isComposite""" ;
      rdfs:label "ObjectiveMembership" .

<http://open-services.net/ns/sysmlv2#Feature>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>Feature</code> is a <code>Type</code> that classifies relations between multiple things (in the universe). The domain of the relation is the intersection of the <code>featuringTypes</code> of the <code>Feature</code>. (The domain of a <code>Feature</code> with no <code>featuringTyps</code> is implicitly the most general <code>Type</code> <em><code>Base::Anything</code></em> from the Kernel Semantic Library.) The co-domain of the relation is the intersection of the <code>types</code> of the <code>Feature</code>.

<p>In the simplest cases, the <code>featuringTypes</code> and <code>types</code> are <code>Classifiers</code> and the <code>Feature</code> relates two things, one from the domain and one from the range. Examples include cars paired with wheels, people paired with other people, and cars paired with numbers representing the car length.</p>

<p>Since <code>Features</code> are <code>Types</code>, their <code>featuringTypes</code> and <code>types</code> can be <code>Features</code>. In this case, the <code>Feature</code> effectively classifies relations between relations, which can be interpreted as the sequence of things related by the domain <code>Feature</code> concatenated with the sequence of things related by the co-domain <code>Feature</code>.</p>

<p>The <em>values</em> of a <code>Feature</code> for a given instance of its domain are all the instances of its co-domain that are related to that domain instance by the <code>Feature</code>. The values of a <code>Feature</code> with <code>chainingFeatures</code> are the same as values of the last <code>Feature</code> in the chain, which can be found by starting with values of the first <code>Feature</code>, then using those values as domain instances to obtain valus of the second <code>Feature</code>, and so on, to values of the last <code>Feature</code>.</p>

ownedRedefinition = ownedSubsetting->selectByKind(Redefinition)
ownedTypeFeaturing = ownedRelationship->selectByKind(TypeFeaturing)->
    select(tf | tf.featureOfType = self)
ownedSubsetting = ownedSpecialization->selectByKind(Subsetting)
ownedTyping = ownedGeneralization->selectByKind(FeatureTyping)
type = 
    let types : OrderedSet(Types) = OrderedSet{self}->
        -- Note: The closure operation automatically handles circular relationships.
        closure(typingFeatures()).typing.type->asOrderedSet() in
    types->reject(t1 | types->exist(t2 | t2 <> t1 and t2.specializes(t1)))
multiplicity <> null implies multiplicity.featuringType = featuringType 
specializesFromLibrary('Base::things')
chainingFeature->excludes(self)
ownedFeatureChaining = ownedRelationship->selectByKind(FeatureChaining)
chainingFeature = ownedFeatureChaining.chainingFeature
chainingFeature->size() <> 1
isEnd and owningType <> null implies
    let i : Integer = 
        owningType.ownedEndFeature->indexOf(self) in
    owningType.ownedSpecialization.general->
        forAll(supertype |
             supertype.endFeature->size() >= i implies
                redefines(supertype.endFeature->at(i))
direction = null and
ownedSpecializations->forAll(isImplied) implies
    ownedMembership->
        selectByKind(FeatureValue)->
        forAll(fv | specializes(fv.value.result))
isEnd and owningType <> null and
(owningType.oclIsKindOf(Association) or
 owningType.oclIsKindOf(Connector)) implies
    specializesFromLibrary('Links::Link::participant')
isComposite and
ownedTyping.type->includes(oclIsKindOf(Structure)) and
owningType <> null and
(owningType.oclIsKindOf(Structure) or
 owningType.type->includes(oclIsKindOf(Structure))) implies
    specializesFromLibrary('Occurrence::Occurrence::suboccurrences')
owningType <> null and
owningType.oclIsKindOf(FeatureReferenceExpression) and
self = owningType.oclAsType(FeatureReferenceExpression).result implies
    specializes(owningType.oclAsType(FeatureReferenceExpression).referent)

ownedTyping.type->exists(selectByKind(Class)) implies
    specializesFromLibrary('Occurrences::occurrences')
isComposite and
ownedTyping.type->includes(oclIsKindOf(Class)) and
owningType <> null and
(owningType.oclIsKindOf(Class) or
 owningType.oclIsKindOf(Feature) and
    owningType.oclAsType(Feature).type->
        exists(oclIsKindOf(Class))) implies
    specializesFromLibrary('Occurrence::Occurrence::suboccurrences')
ownedTyping.type->exists(selectByKind(DataType)) implies
    specializesFromLibrary('Base::dataValues')
owningType <> null and
owningType.oclIsKindOf(ItemFlowEnd) and
owningType.ownedFeature->at(1) = self implies
    let flowType : Type = owningType.owningType in
    flowType <> null implies
        let i : Integer = 
            flowType.ownedFeature.indexOf(owningType) in
        (i = 1 implies 
            redefinesFromLibrary('Transfers::Transfer::source::sourceOutput')) and
        (i = 2 implies
            redefinesFromLibrary('Transfers::Transfer::source::targetInput'))
                 
owningType <> null and
(owningType.oclIsKindOf(Behavior) or
 owningType.oclIsKindOf(Step)) implies
    let i : Integer = 
        owningType.ownedFeature->select(direction <> null) in
    owningType.ownedSpecialization.general->
        forAll(supertype |
            let ownedParameters : Sequence(Feature) = 
                supertype.ownedFeature->select(direction <> null) in
            ownedParameters->size() >= i implies
                redefines(ownedParameters->at(i))
ownedTyping.type->exists(selectByKind(Structure)) implies
    specializesFromLibary('Objects::objects')
owningType <> null and
(owningType.oclIsKindOf(Function) and
    self = owningType.oclAsType(Function).result or
 owningType.oclIsKindOf(Expression) and
    self = owningType.oclAsType(Expression).result) implies
    owningType.ownedSpecialization.general->
        select(oclIsKindOf(Function) or oclIsKindOf(Expression))->
        forAll(supertype |
            redefines(
                if superType.oclIsKindOf(Function) then
                    superType.oclAsType(Function).result
                else
                    superType.oclAsType(Expression).result
                endif)
ownedFeatureInverting = ownedRelationship->selectByKind(FeatureInverting)->
    select(fi | fi.featureInverted = self)
featuringType =
    let featuringTypes : OrderedSet(Type) = 
        featuring.type->asOrderedSet() in
    if chainingFeature->isEmpty() then featuringTypes
    else
        featuringTypes->
            union(chainingFeature->first().featuringType)->
            asOrderedSet()
    endif
ownedReferenceSubsetting =
    let referenceSubsettings : OrderedSet(ReferenceSubsetting) =
        ownedSubsetting->selectByKind(ReferenceSubsetting) in
    if referenceSubsettings->isEmpty() then null
    else referenceSubsettings->first() endif
ownedSubsetting->selectByKind(ReferenceSubsetting)->size() <= 1
Sequence{1..chainingFeature->size() - 1}->forAll(i |
    chainingFeature->at(i + 1).featuringType->forAll(t | 
        chainingFeature->at(i).specializes(t)))

isPortion and
ownedTyping.type->includes(oclIsKindOf(Class)) and
owningType <> null and
(owningType.oclIsKindOf(Class) or
 owningType.oclIsKindOf(Feature) and
    owningType.oclAsType(Feature).type->
        exists(oclIsKindOf(Class))) implies
    specializesFromLibrary('Occurrence::Occurrence::portions')""" ;
      rdfs:label "Feature" .

<http://open-services.net/ns/sysmlv2#definitionOwnedOccurrence>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>OccurrenceUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.</p>" ;
      rdfs:label "definitionOwnedOccurrence" .

<http://open-services.net/ns/sysmlv2#typeInput>
      a       rdf:Property ;
      rdfs:comment """<p>All <code>features</code> related to this <code>Type</code> by <code>FeatureMemberships</code> that have <code>direction</code> <code>in<code> or <code>inout<code>.</code></code></code></code></p>
""" ;
      rdfs:label "typeInput" .

<http://open-services.net/ns/sysmlv2#annotationAnnotatedElement>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Element</code> that is annotated by the <code>annotatingElement</code> of this Annotation.</p>
""" ;
      rdfs:label "annotationAnnotatedElement" .

<http://open-services.net/ns/sysmlv2#definitionOwnedReference>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ReferenceUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.</p>" ;
      rdfs:label "definitionOwnedReference" .

<http://open-services.net/ns/sysmlv2#resultExpressionMembershipOwnedResultExpression>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Expression</code> that provides the result for the owner of the <code>ResultExpressionMembership</code>.</p>
""" ;
      rdfs:label "resultExpressionMembershipOwnedResultExpression" .

<http://open-services.net/ns/sysmlv2#behaviorStep>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Steps</code> that make up this <code>Behavior</code>.</p>
""" ;
      rdfs:label "behaviorStep" .

<http://open-services.net/ns/sysmlv2#EnumerationDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>EnumerationDefinition</code> is an <code>AttributeDefinition</code> all of whose instances are given by an explicit list of <code>enumeratedValues</code>. This is realized by requiring that the <code>EnumerationDefinition</code> have <code>isVariation = true</code>, with the <code>enumeratedValues</code> being its <code>variants</code>.</p> 
isVariation""" ;
      rdfs:label "EnumerationDefinition" .

<http://open-services.net/ns/sysmlv2#partUsagePartDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>itemDefinitions</code> of this PartUsage that are PartDefinitions.</p>" ;
      rdfs:label "partUsagePartDefinition" .

<http://open-services.net/ns/sysmlv2#transitionUsageEffectAction>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ActionUsages</code> that define the effects of this <code>TransitionUsage</code>, which are the <code>ownedFeatures</code> of the <code>TransitionUsage</code> related to it by <code>TransitionFeatureMemberships</code> with <code>kind = effect</code>, which must all be <code>ActionUsages</code>.</p>" ;
      rdfs:label "transitionUsageEffectAction" .

<http://open-services.net/ns/sysmlv2#usageNestedRendering>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>RenderingUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>.</p> 
""" ;
      rdfs:label "usageNestedRendering" .

<http://open-services.net/ns/sysmlv2#typeOwnedUnioning>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>ownedRelationships</code> of this <code>Type</code> that are <code>Unionings</code>, having the <code>Type</code> as their <code>typeUnioned</code>.</p>
""" ;
      rdfs:label "typeOwnedUnioning" .

<http://open-services.net/ns/sysmlv2#relationshipOwningRelatedElement>
      a       rdf:Property ;
      rdfs:comment "<p>The <tt>relatedElement</tt> of this Relationship that owns the Relationship, if any.</p>" ;
      rdfs:label "relationshipOwningRelatedElement" .

<http://open-services.net/ns/sysmlv2#caseUsageSubjectParameter>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>parameter</code> of this <code>CaseUsage</code> that represents its subject.</p>
""" ;
      rdfs:label "caseUsageSubjectParameter" .

<http://open-services.net/ns/sysmlv2#ActionUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>ActionUsage</code> is a <code>Usage</code> that is also a <code>Step</code>, and, so, is typed by a <code>Behavior</code>. Nominally, if the type is an <code>ActionDefinition</code>, an <code>ActionUsage</code> is a <code>Usage</code> of that <code>ActionDefinition</code> within a system. However, other kinds of kernel <code>Behaviors</code> are also allowed, to permit use of <code>Behaviors</code> from the Kernel Model Libraries.</p>

isSubactionUsage() implies
    specializesFromLibrary('Actions::Action::subactions')
specializesFromLibrary('Actions::actions')
isComposite and owningType <> null and
(owningType.oclIsKindOf(PartDefinition) or
 owningType.oclIsKindOf(PartUsage)) implies
    specializesFromLibrary('Parts::Part::ownedActions')
owningFeatureMembership <> null and
owningFeatureMembership.oclIsKindOf(StateSubactionMembership) implies
    let kind : StateSubactionKind = 
        owningFeatureMembership.oclAsType(StateSubactionMembership).kind in
    if kind = StateSubactionKind::entry then
        redefinesFromLibrary('States::StateAction::entryAction')
    else if kind = StateSubactionKind::do then
        redefinesFromLibrary('States::StateAction::doAction')
    else
        redefinesFromLibrary('States::StateAction::exitAction')
    endif endif
owningType <> null and
    (owningType.oclIsKindOf(AnalysisCaseDefinition) and
        owningType.oclAsType(AnalysisCaseDefinition).analysisAction->
            includes(self) or
     owningType.oclIsKindOf(AnalysisCaseUsage) and
        owningType.oclAsType(AnalysisCaseUsage).analysisAction->
            includes(self)) implies
    specializesFromLibrary('AnalysisCases::AnalysisCase::analysisSteps')""" ;
      rdfs:label "ActionUsage" .

<http://open-services.net/ns/sysmlv2#Disjoining>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>Disjoining</code> is a <code>Relationship</code> between <code>Types</code> asserted to have interpretations that are not shared (disjoint) between them, identified as <code>typeDisjoined</code> and <code>disjoiningType</code>. For example, a <code>Classifier</code> for mammals is disjoint from a <code>Classifier</code> for minerals, and a <code>Feature</code> for people&#39;s parents is disjoint from a <code>Feature</code> for their children.</p>
""" ;
      rdfs:label "Disjoining" .

<http://open-services.net/ns/sysmlv2#caseUsageCaseDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The CaseDefinition that is the type of this CaseUsage.</p>" ;
      rdfs:label "caseUsageCaseDefinition" .

<http://open-services.net/ns/sysmlv2#Association>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>Association</code> is a <code>Relationship</code> and a <code>Classifier</code> to enable classification of links between things (in the universe). The co-domains (<code>types</code>) of the <code>associationEnd</code> <code>Features</code> are the <code>relatedTypes</code>, as co-domain and participants (linked things) of an <code>Association</code> identify each other.</p>

relatedType = associationEnd.type
specializesFromLibrary('Links::Link')
oclIsKindOf(Structure) = oclIsKindOf(AssociationStructure)
associationEnd->size() = 2 implies
    specializesFromLibrary('Links::BinaryLink')
not isAbstract implies relatedType->size() >= 2
associationEnds->size() > 2 implies
    not specializesFromLibrary('Links::BinaryLink')
sourceType =
    if relatedType->isEmpty() then null
    else relatedType->first() endif
targetType =
    if relatedType->size() < 2 then OrderedSet{}
    else 
        relatedType->
            subSequence(2, relatedType->size())->
            asOrderedSet() 
    endif""" ;
      rdfs:label "Association" .

<http://open-services.net/ns/sysmlv2#PartUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>PartUsage</code> is a usage of a <code>PartDefinition</code> to represent a system or a part of a system. At least one of the <code>itemDefinitions</code> of the <code>PartUsage</code> must be a <code>PartDefinition</code>.</p>

<p>A <code>PartUsage</code> must subset, directly or indirectly, the base <code>PartUsage</code> <em><code>parts</code></em> from the Systems Model Library.</p>
itemDefinition->selectByKind(PartDefinition)
partDefinition->notEmpty()
specializesFromLibrary('Parts::parts')
isComposite and owningType <> null and
(owningType.oclIsKindOf(ItemDefinition) or
 owningType.oclIsKindOf(ItemUsage)) implies
    specializesFromLibrary('Items::Item::subparts')
owningFeatureMembership <> null and
owningFeatureMembership.oclIsKindOf(ActorMembership) implies
    if owningType.oclIsKindOf(RequirementDefinition) or 
       owningType.oclIsKindOf(RequirementUsage)
    then specializesFromLibrary('Requirements::RequirementCheck::actors')
    else specializesFromLibrary('Cases::Case::actors')
owningFeatureMembership <> null and
owningFeatureMembership.oclIsKindOf(StakeholderMembership) implies
    specializesFromLibrary('Requirements::RequirementCheck::stakeholders')""" ;
      rdfs:label "PartUsage" .

<http://open-services.net/ns/sysmlv2#conjugationOwningType>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>conjugatedType</code> of this <code>Conjugation</code> that is also its <code>owningRelatedElement</code>.</p>
""" ;
      rdfs:label "conjugationOwningType" .

<http://open-services.net/ns/sysmlv2#viewpointUsageViewpointDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ViewpointDefinition</code> that is the <code>definition</code> of this <code>ViewpointUsage<code>.</p>" ;
      rdfs:label "viewpointUsageViewpointDefinition" .

<http://open-services.net/ns/sysmlv2#typeIsSufficient>
      a       rdf:Property ;
      rdfs:comment """<p>Whether all things that meet the classification conditions of this <code>Type</code> must be classified by the <code>Type</code>.</p>

<p>(A <code>Type</code>&nbsp;gives conditions that must be met by whatever it classifies, but when <code>isSufficient</code> is false, things may meet those conditions but still not be classified by the <code>Type</code>. For example, a Type <code><em>Car</em></code> that is not sufficient could require everything it classifies to have four wheels, but not all four wheeled things would classify as cars. However, if the <code>Type</code> <code><em>Car</em></code> were sufficient, it would classify all four-wheeled things.)</p>
""" ;
      rdfs:label "typeIsSufficient" .

<http://open-services.net/ns/sysmlv2#usageIsReference>
      a       rdf:Property ;
      rdfs:comment "<p>Whether this <code>Usage</code> is a referential <code>Usage</code>, that is, it has <code>isComposite = false</code>.<p>" ;
      rdfs:label "usageIsReference" .

<http://open-services.net/ns/sysmlv2#Multiplicity>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>Multiplicity</code> is a <code>Feature</code> whose co-domain is a set of natural numbers giving the allowed cardinalities of each <code>typeWithMultiplicity</code>. The <em>cardinality</em> of a <code>Type</code> is defined as follows, depending on whether the <code>Type</code> is a <code>Classifier</code> or <code>Feature</code>.
<ul>
<li><code>Classifier</code> – The number of basic instances of the <code>Classifier</code>, that is, those instances representing things, which are not instances of any subtypes of the <code>Classifier</code> that are <code>Features</code>.
<li><code>Features</code> – The number of instances with the same featuring instances. In the case of a <code>Feature</code> with a <code>Classifier</code> as its <code>featuringType</code>, this is the number of values of <code>Feature</code> for each basic instance of the <code>Classifier</code>. Note that, for non-unique <code>Features</code>, all duplicate values are included in this count.</li>
</ul>

<p><code>Multiplicity</code> co-domains (in models) can be specified by <code>Expression</code> that might vary in their results. If the <code>typeWithMultiplicity</code> is a <code>Classifier</code>, the domain of the <code>Multiplicity</code> shall be <em><code>Base::Anything</code></em>.  If the <code>typeWithMultiplicity</code> is a <code>Feature</code>,  the <code>Multiplicity</code> shall have the same domain as the <code>typeWithMultiplicity</code>.</p>

if owningType <> null and owningType.oclIsKindOf(Feature) then
    featuringType = 
        owningType.oclAsType(Feature).featuringType
else
    featuringType->isEmpty()
endif
specializesFromLibrary('Base::naturals')""" ;
      rdfs:label "Multiplicity" .

<http://open-services.net/ns/sysmlv2#invocationExpressionArgument>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>value</code> <code>Expressions</code> of the <code>FeatureValues</code> of the owned input <code>parameters</code> of the <code>InvocationExpression</code>." ;
      rdfs:label "invocationExpressionArgument" .

<http://open-services.net/ns/sysmlv2#expressionIsModelLevelEvaluable>
      a       rdf:Property ;
      rdfs:comment "<p>Whether this <code>Expression</code> meets the constraints necessary to be evaluated at <em>model level</em>, that is, using metadata within the model.</p>" ;
      rdfs:label "expressionIsModelLevelEvaluable" .

<http://open-services.net/ns/sysmlv2#stateDefinitionDoAction>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>ActionUsage</code> of this <code>StateDefinition</code> to be performed while in the state defined by the <code>StateDefinition</code>. It is the owned <code>ActionUsage</code> related to the <code>StateDefinition</code> by a <code>StateSubactionMembership</code>  with <code>kind = do</code>.</p>" ;
      rdfs:label "stateDefinitionDoAction" .

<http://open-services.net/ns/sysmlv2#importIsImportAll>
      a       rdf:Property ;
      rdfs:comment """<p>Whether to import memberships without regard to declared visibility.</p>
""" ;
      rdfs:label "importIsImportAll" .

<http://open-services.net/ns/sysmlv2#concernUsageConcernDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The ConcernDefinition that is the single type of this ConcernUsage.</p>" ;
      rdfs:label "concernUsageConcernDefinition" .

<http://open-services.net/ns/sysmlv2#featureIsOrdered>
      a       rdf:Property ;
      rdfs:comment "<p>Whether an order exists for the values of this <code>Feature</code> or not.</p>" ;
      rdfs:label "featureIsOrdered" .

<http://open-services.net/ns/sysmlv2#ConcernDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>ConcernDefinition</code> is a <code>RequirementDefinition</code> that one or more stakeholders may be interested in having addressed. These stakeholders are identified by the <code>ownedStakeholders</code>of the <code>ConcernDefinition</code>.</p>

specializesFromLibrary('Requirements::ConcernCheck')""" ;
      rdfs:label "ConcernDefinition" .

<http://open-services.net/ns/sysmlv2#ConcernUsage>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>ConcernUsage</code> is a <code>Usage</code> of a <code>ConcernDefinition</code>.</p>

 The <code>ownedStakeholder</code> features of the ConcernUsage shall all subset the <em><code>ConcernCheck::concernedStakeholders</code> </em>feature. If the ConcernUsage is an <code>ownedFeature</code> of a StakeholderDefinition or StakeholderUsage, then the ConcernUsage shall have an <code>ownedStakeholder</code> feature that is bound to the <em><code>self</code></em> feature of its owner.</p>

specializesFromLibrary('Requirements::concernChecks')
owningFeatureMembership <> null and
owningFeatureMembership.oclIsKindOf(FramedConcernMembership) implies
    specializesFromLibrary('Requirements::RequirementCheck::concerns')""" ;
      rdfs:label "ConcernUsage" .

<http://open-services.net/ns/sysmlv2#featureIsEnd>
      a       rdf:Property ;
      rdfs:comment """<p>Whether or not the this <code>Feature</code> is an end <code>Feature</code>, requiring a different interpretation of the <code>multiplicity</code> of the <code>Feature</code>.</p>

<p>An end <code>Feature</code> is always considered to map each domain instance to a single co-domain instance, whether or not a <code>Multiplicity</code> is given for it. If a <code>Multiplicity</code> is given for an end <code>Feature</code>, rather than giving the co-domain cardinality for the <code>Feature</code> as usual, it specifies a cardinality constraint for <em>navigating</em> across the <code>endFeatures</code> of the <code>featuringType</code> of the end <code>Feature</code>. That is, if a <code>Type</code> has <em>n</em> <code>endFeatures</code>, then the <code>Multiplicity</code> of any one of those end <code>Features</code> constrains the cardinality of the set of values of that <code>Feature</code> when the values of the other <em>n-1</em> end <code>Features</code> are held fixed.</p>
""" ;
      rdfs:label "featureIsEnd" .

<http://open-services.net/ns/sysmlv2#definitionOwnedFlow>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>FlowConnectionUsages</code> that are <code>ownedUsages</code> of this <code>Definition</code>.</p>" ;
      rdfs:label "definitionOwnedFlow" .

<http://open-services.net/ns/sysmlv2#requirementDefinitionText>
      a       rdf:Property ;
      rdfs:comment """<p>An optional textual statement of the requirement represented by this <code>RequirementDefinition</code>, derived from the <code>bodies</code> of the <code>documentation</code> of the <code>RequirementDefinition</code>.</p>
""" ;
      rdfs:label "requirementDefinitionText" .

<http://open-services.net/ns/sysmlv2#Classifier>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>Classifier</code> is a <code>Type</code> that classifies:</p>

<ul>
	<li>Things (in the universe) regardless of how <code>Features</code> relate them. (These are interpreted semantically as sequences of exactly one thing.)</li>
	<li>How the above things are related by <code>Features.</code> (These are interpreted semantically as sequences of multiple things, such that the last thing in the sequence is also classified by the <code>Classifier</code>. Note that this means that a <code>Classifier</code> modeled as specializing a <code>Feature</code> cannot classify anything.)</li>
</ul>


ownedSubclassification = 
    ownedSpecialization->selectByKind(Subclassification)
multiplicity <> null implies multiplicity.featuringType->isEmpty()""" ;
      rdfs:label "Classifier" .

<http://open-services.net/ns/sysmlv2#featureEndOwningType>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Type</code> that is related to this <code>Feature</code> by an <code>EndFeatureMembership</code> in which the <code>Feature</code> is an <code>ownedMemberFeature</code>.</p>" ;
      rdfs:label "featureEndOwningType" .

<http://open-services.net/ns/sysmlv2#ItemDefinition>
      a       rdfs:Class ;
      rdfs:comment """<p>An <code>ItemDefinition</code> is an <code>OccurrenceDefinition</code> of the <code>Structure</code> of things that may themselves be systems or parts of systems, but may also be things that are acted on by a system or parts of a system, but which do not necessarily perform actions themselves. This includes items that can be exchanged between parts of a system, such as water or electrical signals.</p>

specializesFromLibrary('Items::Item')""" ;
      rdfs:label "ItemDefinition" .

<http://open-services.net/ns/sysmlv2#StateSubactionMembership>
      a       rdfs:Class ;
      rdfs:comment """<p>A <code>StateSubactionMembership</code> is a <code>FeatureMembership</code> for an entry, do or exit <code>ActionUsage<code> of a <code>StateDefinition</code> or <code>StateUsage</code>.</p>
owningType.oclIsKindOf(StateDefinition) or
owningType.oclIsKindOf(StateUsage)""" ;
      rdfs:label "StateSubactionMembership" .

<http://open-services.net/ns/sysmlv2#requirementUsageAssumedConstraint>
      a       rdf:Property ;
      rdfs:comment "<p>The owned <code>ConstraintUsages</code> that represent assumptions of this <code>RequirementUsage</code>, derived as the <code>ownedConstraints</code> of the <code>RequirementConstraintMemberships</code> of the <code>RequirementUsage</code> with <code>kind</code> = <code>assumption</code>.</p>" ;
      rdfs:label "requirementUsageAssumedConstraint" .

<http://open-services.net/ns/sysmlv2#usageOwningUsage>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>Usage</code> in which this <code>Usage</code> is nested (if any).</p>" ;
      rdfs:label "usageOwningUsage" .

<http://open-services.net/ns/sysmlv2#usageIsVariation>
      a       rdf:Property ;
      rdfs:comment "<p>Whether this <code>Usage</code> is for a variation point or not. If true, then all the <code>memberships</code> of the <code>Usage</code> must be <code>VariantMemberships</code>.</p>" ;
      rdfs:label "usageIsVariation" .

<http://open-services.net/ns/sysmlv2#usageNestedInterface>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>InterfaceUsages</code> that are <code>nestedUsages</code> of this <code>Usage</code>.</p>" ;
      rdfs:label "usageNestedInterface" .

<http://open-services.net/ns/sysmlv2#Subsetting>
      a       rdfs:Class ;
      rdfs:comment """<p><code>Subsetting</code> is <code>Specialization</code> in which the <code>specific</code> and <code>general</code> <code>Types</code> are <code>Features</code>. This means all values of the <code>subsettingFeature</code> (on instances of its domain, i.e., the intersection of its <code>featuringTypes</code>) are values of the <code>subsettedFeature</code> on instances of its domain. To support this the domain of the <code>subsettingFeature</code> must be the same or specialize (at least indirectly) the domain of the <code>subsettedFeature</code> (via <code>Specialization</code>), and the co-domain (intersection of the <code>types</code>) of the <code>subsettingFeature</code> must specialize the co-domain of the <code>subsettedFeature</code>.</p>

let subsettingFeaturingTypes: OrderedSet(Type) =
    subsettingFeature.featuringTypes in
let subsettedFeaturingTypes: OrderedSet(Type) =
    subsettedFeature.featuringTypes in
let anythingType: Element =
    subsettingFeature.resolveGlobal('Base::Anything').memberElement in 
subsettedFeaturingTypes->forAll(t |
    subsettingFeaturingTypes->isEmpty() and t = anythingType or
    subsettingFeaturingTypes->exists(specializes(t))
subsettedFeature.isUnique implies subsettingFeature.isUnique""" ;
      rdfs:label "Subsetting" .

<http://open-services.net/ns/sysmlv2#ConnectorAsUsage>
      a       rdfs:Class ;
      rdfs:comment "<p>A <code>ConnectorAsUsage</code> is both a <code>Connector</code> and a <code>Usage</code>. <code>ConnectorAsUsage</code> cannot itself be instantiated in a SysML model, but it is the base class for the concrete classes <code>BindingConnectorAsUsage</code>, <code>SuccessionAsUsage</code> and <code>ConnectionUsage</code>.</p>" ;
      rdfs:label "ConnectorAsUsage" .

<http://open-services.net/ns/sysmlv2#featureTypingType>
      a       rdf:Property ;
      rdfs:comment """<p>The <code>Type</code> that is being applied by this <code>FeatureTyping</code>.</p>
""" ;
      rdfs:label "featureTypingType" .

<http://open-services.net/ns/sysmlv2#elementTextualRepresentation>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>TextualRepresentations</code> that annotate this <code>Element</code>.</p>" ;
      rdfs:label "elementTextualRepresentation" .

<http://open-services.net/ns/sysmlv2#conjugatedPortTypingPortDefinition>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>originalPortDefinition</code> of the <code>conjugatedPortDefinition</code> of this <code>ConjugatedPortTyping</code>.</p>" ;
      rdfs:label "conjugatedPortTypingPortDefinition" .

<http://open-services.net/ns/sysmlv2#featureIsUnique>
      a       rdf:Property ;
      rdfs:comment """<p>Whether or not values for this <code>Feature</code> must have no duplicates or not.</p>
""" ;
      rdfs:label "featureIsUnique" .

<http://open-services.net/ns/sysmlv2#verificationCaseDefinitionVerifiedRequirement>
      a       rdf:Property ;
      rdfs:comment "<p>The <code>RequirementUsages</code> verified by this <code>VerificationCaseDefinition</code>, which are the <code>verifiedRequirements</code> of all <code>RequirementVerificationMemberships</code> of the <code>objectiveRequirement</code>.</p>" ;
      rdfs:label "verificationCaseDefinitionVerifiedRequirement" .
